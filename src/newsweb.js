/* Generated by the Nim Compiler v1.2.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI16516463 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16501255 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10240112 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16266255 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI16335610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16335422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900215 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900209 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI16273686 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16225422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16185056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16185029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16172403 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16172398 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16172385 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16172366 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16172361 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI16172360 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI16172421 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16171481 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16166704 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16166696 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16166688 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16166684 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI16166634 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16166629 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16166624 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI16166677 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16150027 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16150018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16150014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI16150013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI16166659 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16166652 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16166646 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16166642 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11550422 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10702266 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10702260 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15325250 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15325244 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10525054 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10525048 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1101031 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1101028 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1101025 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15325210 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15927048 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15995610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15995422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15927058 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927055 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927052 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15945056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15945029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15932460 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15932454 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15932453 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15932467 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15932448 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15927100 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927091 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15927090 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15932435 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15932416 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15932411 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15932410 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15932485 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15931531 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15927231 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927214 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927198 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927194 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15927144 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927133 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927123 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15927122 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15927111 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927085 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15927084 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15927118 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15927044 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927041 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15927040 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15927079 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15927035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15927187 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15910027 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15910018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15910014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15910013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15927169 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927162 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927156 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15927152 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI16274562 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16285056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI16285029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900449 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900443 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900442 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15900456 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900437 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900352 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900343 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900342 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15900360 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15321017 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI15321024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15321019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15321029 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15321021 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15900236 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900192 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900191 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI16274579 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900403 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900386 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900370 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900366 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900331 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900320 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900310 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900309 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15900430 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900422 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900421 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15900478 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900201 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900198 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900197 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15900473 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15900468 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15900464 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI16510217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15900302 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900289 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900280 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900276 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15900275 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15900262 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900255 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900249 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15900245 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15325272 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15325204 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11550428 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11550432 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11550431 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11555208 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10296205 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10296203 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI15325224 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10702204 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10296201 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15225422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15185056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15185029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15172327 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15172322 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15172309 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15172290 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15172285 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15172284 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15172345 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15171405 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15165870 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15165862 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15165854 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15165850 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15165800 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15165795 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15165790 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15165843 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15150027 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15150018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15150014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15150013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15165825 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15165818 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15165812 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15165808 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15035422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14995056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14995029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14982418 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14982413 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14982400 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14982381 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14982376 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14982375 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14982436 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14981496 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14975691 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14975683 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14975675 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14975671 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14975621 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14975616 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14975611 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14975664 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14960027 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14960018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14960014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14960013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14975646 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14975639 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14975633 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14975629 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15246170 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15260056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15260029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15235640 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15235635 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15235622 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15235603 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15235598 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15235597 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI15246187 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14924609 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924601 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924593 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924589 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14924517 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14924512 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14924507 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15235168 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI15245217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14924582 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924569 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924560 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924556 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14924555 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14924542 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924535 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924529 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14924525 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI15270735 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI15310422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14611245 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14611228 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14615364 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14690610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14690422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14451071 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615371 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615368 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14640056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14640029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14628420 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14628414 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14628413 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14628427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14628408 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14615411 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615402 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14615401 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14628395 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14628376 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14628371 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14628370 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14628445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14627491 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14615494 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615481 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615472 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615468 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14615467 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14615454 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615447 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615441 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615437 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14451092 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14451081 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14451066 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14451065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14615422 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615396 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14615395 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14615429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14615360 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615357 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14615356 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14615390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14615351 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14615525 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615508 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615339 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14615501 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14610792 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14785595 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14785422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14735056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14735029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14721783 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14721777 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14721776 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14721790 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14721771 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14610830 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610821 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14610820 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14721758 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14721739 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14721734 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14721733 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14721808 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14720854 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14610961 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610944 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610928 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610924 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14610874 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610863 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610853 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14610852 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14610841 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610815 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14610814 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14610848 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14610788 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610785 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14610784 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14610809 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14610779 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14610917 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14595027 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14595018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14595014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14595013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14610899 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610892 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610886 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14610882 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14490018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14490015 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14490012 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14821170 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14835056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14835029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14811073 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14811067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14811066 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14811080 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14811061 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14811048 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14811029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14811024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14811023 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14821187 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14530613 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530596 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530580 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530576 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14451055 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14451044 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14451029 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14451028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14530497 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530471 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14530470 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14530504 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14530453 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530450 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14530449 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14530465 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14530444 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14810594 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14820217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14530569 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530556 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530547 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530543 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14530542 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14530529 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530522 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530516 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530512 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14855735 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14196146 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14196160 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14196154 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14196139 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14196144 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14196137 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14451019 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14451016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14451015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14455010 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14530486 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14530477 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14530476 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14895610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14895422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14451034 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14455017 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14455014 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13760630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13885610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13885422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13760640 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760637 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760634 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13835056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13835029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13821779 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13821773 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13821772 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13821786 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13821767 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13760682 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760673 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13760672 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13821754 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13821735 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13821730 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13821729 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13821804 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13820850 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13760813 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760796 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760780 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760776 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13760726 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760715 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760705 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13760704 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13760693 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760667 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13760666 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13760700 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13760626 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760623 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13760622 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13760661 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13760617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13760769 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13745027 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13745018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13745014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13745013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13760751 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760744 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760738 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13760734 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13676253 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13676244 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13735628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14055610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14055422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13735638 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735635 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735632 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14005056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14005029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13991372 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13991366 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13991365 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13991379 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13991360 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13735680 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735671 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13735670 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13991347 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13991328 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13991323 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13991322 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13991397 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13990443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13735789 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735776 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735767 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735763 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13735762 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13735749 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735742 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735736 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735732 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13735724 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735713 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735703 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13735702 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13735691 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735665 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13735664 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13735698 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13735624 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735621 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13735620 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13735659 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13735615 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13735820 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735803 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735603 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13735796 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11811039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11996084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI179 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI11996041 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11996045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11996043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI851017 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI11996073 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11996070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11996067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10206015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI14091170 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14105056 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI14105029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10206019 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191626 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10191277 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191275 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10191624 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10191718 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10191281 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191279 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10191227 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191225 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10191241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191239 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13821817 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13685759 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13685753 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13685752 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685766 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13685747 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13685670 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13685572 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10206402 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10206399 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10206390 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10206075 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685551 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13685550 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14091187 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13685713 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685696 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685680 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10206065 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI13685676 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13676192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13676181 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10206589 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13676166 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13676165 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685740 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685732 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13685731 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685788 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10206387 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10206386 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10206073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685560 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685557 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13685556 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685783 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13685778 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13685774 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI14090217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13685638 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685625 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685616 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685612 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13685611 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685598 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685591 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685585 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10206049 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI13685581 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14125765 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI13930606 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10206392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI10191454 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191450 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191446 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191442 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191438 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191434 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191430 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191426 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191422 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191418 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191414 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191410 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191406 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191402 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191398 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191394 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191390 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191386 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191382 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191378 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10191205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191289 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191287 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10191229 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10191574 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10191572 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10191570 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10191233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10191231 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13685010 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13685662 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685653 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13685652 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI14165610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10270030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI4605232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4860011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI14165422 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10206023 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13676171 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685017 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI13685014 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI13586045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI13586044 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI13586042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10206017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10206021 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI10206031 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
NTI10206031.base = NTI112;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI10206021 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10206021.node = NNI10206021;
var NNI10206017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10206017.node = NNI10206017;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI10206017.base = NTI6221;
NTI10206021.base = NTI10206017;
var NNI13586045 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "description", len: 0, typ: NTI112, name: "description", sons: null}]};
NTI13586045.node = NNI13586045;
NTI13586044.base = NTI13586045;
NTI13586042.base = NTI13586044;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI13685014 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI13685017, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI13676171, name: "set", sons: null}]};
NTI13685014.node = NNI13685014;
NTI13685014.base = NTI6008;
var NNI10206023 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10206023.node = NNI10206023;
NTI10206023.base = NTI6221;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
NTI14165422.base = NTI10206031;
var NNI4860011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4605232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4860011.node = NNI4860011;
NTI10270030.base = NTI112;
var NNI13685653 = {kind: 1, offset: "update", len: 0, typ: NTI13685662, name: "update", sons: null};
NTI13685653.node = NNI13685653;
NTI13685652.base = NTI13685653;
NTI14165610.base = NTI13685652;
NTI10191570.base = NTI10191231;
NTI10191572.base = NTI10191231;
NTI10191574.base = NTI10191231;
var NNI10191229 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI10191229, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10191229, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10191229, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10191229, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10191229, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10191229, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI10191229, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI10191229, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI10191229, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI10191229, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI10191229, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI10191229, name: "NotationNode", len: 0, sons: null}}};
NTI10191229.node = NNI10191229;
var NNI10191289 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI10191289.node = NNI10191289;
NTI10191289.base = NTI6008;
NTI10191287.base = NTI10191289;
var NNI10191233 = {kind: 2, len: 16, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI10191570, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI10191572, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10191574, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI10191231, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI10191231, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI10191231, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI10191229, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI10191231, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI10191231, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI10191287, name: "style", sons: null}]};
NTI10191233.node = NNI10191233;
var NNI10191205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI10191378, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI10191382, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI10191386, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI10191390, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI10191394, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI10191398, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI10191402, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI10191406, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI10191410, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI10191414, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI10191418, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI10191422, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI10191426, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI10191430, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI10191434, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI10191438, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI10191442, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI10191446, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI10191450, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI10191454, name: "onunload", sons: null}]};
NTI10191205.node = NNI10191205;
NTI10191205.base = NTI6008;
NTI10191233.base = NTI10191205;
NTI10191231.base = NTI10191233;
var NNI13685010 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI13586042, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI13685010.node = NNI13685010;
NTI13685010.base = NTI13685014;
NTI13930606.base = NTI10206392;
NTI14125765.base = NTI10206031;
var NNI10206049 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10206049, name: "SimpleTypeSelector", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10206049, name: "SerialTypeSelector", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10206049, name: "CompareTypeSelector", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10206049, name: "ObjectTypeSelector", len: 0, sons: null}}};
NTI10206049.node = NNI10206049;
var NNI13685612 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI13685616, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI13685625, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI13685612.node = NNI13685612;
NTI13685611.base = NTI13685612;
var NNI13685581 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI13685585, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI13685591, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI13685598, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI13685611, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI13685638, name: "eql", sons: null}]}]]};
NTI13685581.node = NNI13685581;
var NNI14090217 = {kind: 1, offset: "config", len: 0, typ: NTI13685774, name: "config", sons: null};
NTI14090217.node = NNI14090217;
NTI10206387.base = NTI10206031;
var NNI10206386 = {kind: 1, offset: "paths", len: 0, typ: NTI10206387, name: "paths", sons: null};
NTI10206386.node = NNI10206386;
NTI10206073.base = NTI10206386;
var NNI13685557 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI13685560, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI13685557.node = NNI13685557;
NTI13685556.base = NTI13685557;
NTI13685783.base = NTI13685556;
var NNI13685732 = {kind: 1, offset: "compile", len: 0, typ: NTI13685740, name: "compile", sons: null};
NTI13685732.node = NNI13685732;
NTI13685731.base = NTI13685732;
NTI13685788.base = NTI13685731;
var NNI13676166 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI13676181, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI13676192, name: "clone", sons: null}]};
NTI13676166.node = NNI13676166;
NTI13676165.base = NTI13676166;
var NNI10206065 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI10206065, name: "SimpleIterator", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10206065, name: "SerialIterator", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10206065, name: "TypeSelectorIterator", len: 0, sons: null}}};
NTI10206065.node = NNI10206065;
var NNI13685676 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI13685680, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI13685696, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI13685713, name: "selector", sons: null}]]};
NTI13685676.node = NNI13685676;
var NNI13685778 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI13685783, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI13685788, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13676165, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI13685581, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI13685676, name: "iterate", sons: null}]]}]};
NTI13685778.node = NNI13685778;
NTI13685778.base = NTI6008;
NTI14090217.base = NTI13685778;
NTI10206402.base = NTI10206392;
var NNI10206399 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI10206402, name: "data", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI143, name: "head", sons: null}, 
{kind: 1, offset: "tail", len: 0, typ: NTI143, name: "tail", sons: null}, 
{kind: 1, offset: "count", len: 0, typ: NTI143, name: "count", sons: null}, 
{kind: 1, offset: "mask", len: 0, typ: NTI143, name: "mask", sons: null}]};
NTI10206399.node = NNI10206399;
var NNI10206390 = {kind: 1, offset: "fifo", len: 0, typ: NTI10206399, name: "fifo", sons: null};
NTI10206390.node = NNI10206390;
NTI10206075.base = NTI10206390;
NTI13685572.base = NTI13685556;
NTI13685670.base = NTI13685652;
NTI13685747.base = NTI13685731;
NTI13685759.base = NTI13685652;
var NNI13685753 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI13685759, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13676165, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI13685753.node = NNI13685753;
NTI13685752.base = NTI13685753;
NTI13685766.base = NTI13685752;
var NNI13685551 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI13685572, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI13586042, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI13685581, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI13676165, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13676165, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI13685670, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI13685676, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI13676165, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI13685747, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI13685766, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI13685551.node = NNI13685551;
NTI13685550.base = NTI13685551;
NTI14091187.base = NTI13685550;
var NNI10191227 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10191227.node = NNI10191227;
NTI10191227.base = NTI6008;
NTI10191225.base = NTI10191227;
NTI10191718.base = NTI10191239;
var NNI10191281 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI10191718, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI10191281.node = NNI10191281;
NTI10191281.base = NTI10191241;
NTI10191279.base = NTI10191281;
var NNI10191277 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI10191277.node = NNI10191277;
NTI10191277.base = NTI10191241;
NTI10191275.base = NTI10191277;
NTI10191624.base = NTI10191275;
NTI10191626.base = NTI10191275;
var NNI10191241 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI10191225, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI10191279, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI10191624, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI10191626, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI10191241.node = NNI10191241;
NTI10191241.base = NTI10191233;
NTI10191239.base = NTI10191241;
NTI13821817.base = NTI10191239;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
NTI6243.base = NTI6221;
var NNI10206019 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10206019.node = NNI10206019;
NTI10206019.base = NTI10206017;
NTI14105029.base = NTI13685752;
NTI14105056.base = NTI13685652;
NTI14091170.base = NTI13685550;
var NNI10206015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10206015.node = NNI10206015;
NTI10206015.base = NTI6221;
var NNI11996041 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI11996041, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI11996041, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI11996041, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI11996041, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI11996041, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI11996041, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI11996041, name: "JArray", len: 0, sons: null}}};
NTI11996041.node = NNI11996041;
NTI11996084.base = NTI11996043;
var NNI11996045 = {kind: 3, offset: "kind", len: 7, typ: NTI11996041, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI112, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI179, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI104, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI163, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI11996067, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI11996084, name: "elems", sons: null}]]};
NTI11996045.node = NNI11996045;
NTI11996043.base = NTI11996045;
var NNI11996073 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI851017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI112, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI11996043, name: "Field3", sons: null}]};
NTI11996073.node = NNI11996073;
NTI11996070.base = NTI11996073;
var NNI11996067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI11996070, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI143, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI143, name: "last", sons: null}]};
NTI11996067.node = NNI11996067;
var NNI6245 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6245.node = NNI6245;
NTI6245.base = NTI6243;
var NNI11811039 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI11811039.node = NNI11811039;
NTI11811039.base = NTI6243;
var NNI13735796 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI13735603, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI13735803, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI13735820, name: "selector", sons: null}]]};
NTI13735796.node = NNI13735796;
var NNI13735621 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI13735624, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI13735621.node = NNI13735621;
NTI13735620.base = NTI13735621;
NTI13735659.base = NTI13735620;
var NNI13735665 = {kind: 1, offset: "compile", len: 0, typ: NTI13735691, name: "compile", sons: null};
NTI13735665.node = NNI13735665;
NTI13735664.base = NTI13735665;
NTI13735698.base = NTI13735664;
var NNI13735703 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI13735713, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI13735724, name: "clone", sons: null}]};
NTI13735703.node = NNI13735703;
NTI13735702.base = NTI13735703;
var NNI13735763 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI13735767, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI13735776, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI13735763.node = NNI13735763;
NTI13735762.base = NTI13735763;
var NNI13735732 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI13735736, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI13735742, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI13735749, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI13735762, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI13735789, name: "eql", sons: null}]}]]};
NTI13735732.node = NNI13735732;
var NNI13735615 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI13735659, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI13735698, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13735702, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI13735732, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI13735796, name: "iterate", sons: null}]]}]};
NTI13735615.node = NNI13735615;
NTI13735615.base = NTI6008;
NTI13990443.base = NTI13685652;
NTI13991328.base = NTI13735620;
var NNI13735671 = {kind: 1, offset: "update", len: 0, typ: NTI13735680, name: "update", sons: null};
NTI13735671.node = NNI13735671;
NTI13735670.base = NTI13735671;
NTI13991347.base = NTI13735670;
NTI13991360.base = NTI13735664;
NTI13991372.base = NTI13735670;
var NNI13991366 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI13991372, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13735702, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI13991366.node = NNI13991366;
NTI13991365.base = NTI13991366;
NTI13991379.base = NTI13991365;
var NNI13991323 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI13991328, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI13586044, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI13735732, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI13735702, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13735702, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI13991347, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI13735796, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI13735702, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI13991360, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI13991379, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI13991323.node = NNI13991323;
NTI13991322.base = NTI13991323;
NTI13991397.base = NTI13991322;
NTI14005029.base = NTI13991365;
NTI14005056.base = NTI13735670;
var NNI13735632 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI13735635, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI13735638, name: "set", sons: null}]};
NTI13735632.node = NNI13735632;
NTI13735632.base = NTI6008;
NTI14055422.base = NTI10206031;
NTI14055610.base = NTI13735670;
var NNI13735628 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI13586044, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI13735628.node = NNI13735628;
NTI13735628.base = NTI13735632;
NTI13676244.base = NTI13586044;
var NNI13676253 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI13586044, name: "Field1", sons: null}]};
NTI13676253.node = NNI13676253;
var NNI13745014 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI13745018, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI13745027, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI13745014.node = NNI13745014;
NTI13745013.base = NTI13745014;
var NNI13760734 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI13760738, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI13760744, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI13760751, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI13745013, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI13760769, name: "eql", sons: null}]}]]};
NTI13760734.node = NNI13760734;
var NNI13760623 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI13760626, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI13760623.node = NNI13760623;
NTI13760622.base = NTI13760623;
NTI13760661.base = NTI13760622;
var NNI13760667 = {kind: 1, offset: "compile", len: 0, typ: NTI13760693, name: "compile", sons: null};
NTI13760667.node = NNI13760667;
NTI13760666.base = NTI13760667;
NTI13760700.base = NTI13760666;
var NNI13760705 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI13760715, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI13760726, name: "clone", sons: null}]};
NTI13760705.node = NNI13760705;
NTI13760704.base = NTI13760705;
var NNI13760776 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI13760780, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI13760796, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI13760813, name: "selector", sons: null}]]};
NTI13760776.node = NNI13760776;
var NNI13760617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI13760661, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI13760700, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13760704, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI13760734, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI13760776, name: "iterate", sons: null}]]}]};
NTI13760617.node = NNI13760617;
NTI13760617.base = NTI6008;
NTI13820850.base = NTI13735670;
NTI13821735.base = NTI13760622;
var NNI13760673 = {kind: 1, offset: "update", len: 0, typ: NTI13760682, name: "update", sons: null};
NTI13760673.node = NNI13760673;
NTI13760672.base = NTI13760673;
NTI13821754.base = NTI13760672;
NTI13821767.base = NTI13760666;
NTI13821779.base = NTI13760672;
var NNI13821773 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI13821779, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13760704, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI13821773.node = NNI13821773;
NTI13821772.base = NTI13821773;
NTI13821786.base = NTI13821772;
var NNI13821730 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI13821735, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI112, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI13760734, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI13760704, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13760704, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI13821754, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI13760776, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI13760704, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI13821767, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI13821786, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI13821730.node = NNI13821730;
NTI13821729.base = NTI13821730;
NTI13821804.base = NTI13821729;
NTI13835029.base = NTI13821772;
NTI13835056.base = NTI13760672;
var NNI13760634 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI13760637, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI13760640, name: "set", sons: null}]};
NTI13760634.node = NNI13760634;
NTI13760634.base = NTI6008;
NTI13885422.base = NTI10206031;
NTI13885610.base = NTI13760672;
var NNI13760630 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI112, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI13760630.node = NNI13760630;
NTI13760630.base = NTI13760634;
var NNI14455014 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14455017, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14451034, name: "set", sons: null}]};
NTI14455014.node = NNI14455014;
NTI14455014.base = NTI6008;
NTI14895422.base = NTI10206031;
var NNI14530477 = {kind: 1, offset: "update", len: 0, typ: NTI14530486, name: "update", sons: null};
NTI14530477.node = NNI14530477;
NTI14530476.base = NTI14530477;
NTI14895610.base = NTI14530476;
NTI14196160.base = NTI112;
var NNI14196154 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "num", len: 0, typ: NTI112, name: "num", sons: null}, 
{kind: 1, offset: "subject", len: 0, typ: NTI112, name: "subject", sons: null}, 
{kind: 1, offset: "from_h", len: 0, typ: NTI112, name: "from_h", sons: null}, 
{kind: 1, offset: "date", len: 0, typ: NTI112, name: "date", sons: null}, 
{kind: 1, offset: "message_id", len: 0, typ: NTI112, name: "message_id", sons: null}, 
{kind: 1, offset: "references", len: 0, typ: NTI14196160, name: "references", sons: null}, 
{kind: 1, offset: "bytes", len: 0, typ: NTI112, name: "bytes", sons: null}, 
{kind: 1, offset: "lines", len: 0, typ: NTI112, name: "lines", sons: null}]};
NTI14196154.node = NNI14196154;
NTI14196139.base = NTI14196154;
NTI14196146.base = NTI14196137;
var NNI14196144 = {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "article", len: 0, typ: NTI14196139, name: "article", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI14196146, name: "children", sons: null}, 
{kind: 1, offset: "num", len: 0, typ: NTI143, name: "num", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI143, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI143, name: "last", sons: null}, 
{kind: 1, offset: "endnum", len: 0, typ: NTI143, name: "endnum", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI112, name: "body", sons: null}]};
NTI14196144.node = NNI14196144;
NTI14196137.base = NTI14196144;
NTI14451019.base = NTI14196137;
var NNI14451016 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "group", len: 0, typ: NTI112, name: "group", sons: null}, 
{kind: 1, offset: "loaded_group", len: 0, typ: NTI112, name: "loaded_group", sons: null}, 
{kind: 1, offset: "threads", len: 0, typ: NTI14451019, name: "threads", sons: null}]};
NTI14451016.node = NNI14451016;
NTI14451015.base = NTI14451016;
var NNI14455010 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI14451015, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI14455010.node = NNI14455010;
NTI14455010.base = NTI14455014;
NTI14855735.base = NTI10206031;
var NNI14530543 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14530547, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14530556, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI14530543.node = NNI14530543;
NTI14530542.base = NTI14530543;
var NNI14530512 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14530516, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14530522, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI14530529, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI14530542, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI14530569, name: "eql", sons: null}]}]]};
NTI14530512.node = NNI14530512;
var NNI14820217 = {kind: 1, offset: "config", len: 0, typ: NTI14810594, name: "config", sons: null};
NTI14820217.node = NNI14820217;
var NNI14530450 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI14530453, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI14530450.node = NNI14530450;
NTI14530449.base = NTI14530450;
NTI14530465.base = NTI14530449;
var NNI14530471 = {kind: 1, offset: "compile", len: 0, typ: NTI14530497, name: "compile", sons: null};
NTI14530471.node = NNI14530471;
NTI14530470.base = NTI14530471;
NTI14530504.base = NTI14530470;
var NNI14451029 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI14451044, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI14451055, name: "clone", sons: null}]};
NTI14451029.node = NNI14451029;
NTI14451028.base = NTI14451029;
var NNI14530576 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14530580, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14530596, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI14530613, name: "selector", sons: null}]]};
NTI14530576.node = NNI14530576;
var NNI14530444 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14530465, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI14530504, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451028, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI14530512, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI14530576, name: "iterate", sons: null}]]}]};
NTI14530444.node = NNI14530444;
NTI14530444.base = NTI6008;
NTI14820217.base = NTI14530444;
NTI14811029.base = NTI14530449;
NTI14811048.base = NTI14530476;
NTI14811061.base = NTI14530470;
NTI14811073.base = NTI14530476;
var NNI14811067 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI14811073, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451028, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI14811067.node = NNI14811067;
NTI14811066.base = NTI14811067;
NTI14811080.base = NTI14811066;
var NNI14811024 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14811029, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI14451015, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI14530512, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI14451028, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451028, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI14811048, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI14530576, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI14451028, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI14811061, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI14811080, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI14811024.node = NNI14811024;
NTI14811023.base = NTI14811024;
NTI14821187.base = NTI14811023;
NTI14835029.base = NTI14811066;
NTI14835056.base = NTI14530476;
NTI14821170.base = NTI14811023;
var NNI14490012 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14490015, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14490018, name: "set", sons: null}]};
NTI14490012.node = NNI14490012;
NTI14490012.base = NTI6008;
var NNI14595014 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14595018, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14595027, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI14595014.node = NNI14595014;
NTI14595013.base = NTI14595014;
var NNI14610882 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14610886, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14610892, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI14610899, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI14595013, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI14610917, name: "eql", sons: null}]}]]};
NTI14610882.node = NNI14610882;
var NNI14610785 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI14610788, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI14610785.node = NNI14610785;
NTI14610784.base = NTI14610785;
NTI14610809.base = NTI14610784;
var NNI14610815 = {kind: 1, offset: "compile", len: 0, typ: NTI14610841, name: "compile", sons: null};
NTI14610815.node = NNI14610815;
NTI14610814.base = NTI14610815;
NTI14610848.base = NTI14610814;
var NNI14610853 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI14610863, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI14610874, name: "clone", sons: null}]};
NTI14610853.node = NNI14610853;
NTI14610852.base = NTI14610853;
var NNI14610924 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14610928, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14610944, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI14610961, name: "selector", sons: null}]]};
NTI14610924.node = NNI14610924;
var NNI14610779 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14610809, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI14610848, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14610852, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI14610882, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI14610924, name: "iterate", sons: null}]]}]};
NTI14610779.node = NNI14610779;
NTI14610779.base = NTI6008;
NTI14720854.base = NTI14530476;
NTI14721739.base = NTI14610784;
var NNI14610821 = {kind: 1, offset: "update", len: 0, typ: NTI14610830, name: "update", sons: null};
NTI14610821.node = NNI14610821;
NTI14610820.base = NTI14610821;
NTI14721758.base = NTI14610820;
NTI14721771.base = NTI14610814;
NTI14721783.base = NTI14610820;
var NNI14721777 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI14721783, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14610852, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI14721777.node = NNI14721777;
NTI14721776.base = NTI14721777;
NTI14721790.base = NTI14721776;
var NNI14721734 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14721739, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI14451019, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI14610882, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI14610852, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14610852, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI14721758, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI14610924, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI14610852, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI14721771, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI14721790, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI14721734.node = NNI14721734;
NTI14721733.base = NTI14721734;
NTI14721808.base = NTI14721733;
NTI14735029.base = NTI14721776;
NTI14735056.base = NTI14610820;
NTI14785422.base = NTI10206031;
NTI14785595.base = NTI14610820;
var NNI14610792 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI14451019, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI14610792.node = NNI14610792;
NTI14610792.base = NTI14490012;
var NNI14615501 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14615339, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14615508, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI14615525, name: "selector", sons: null}]]};
NTI14615501.node = NNI14615501;
var NNI14615357 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI14615360, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI14615357.node = NNI14615357;
NTI14615356.base = NTI14615357;
NTI14615390.base = NTI14615356;
var NNI14615396 = {kind: 1, offset: "compile", len: 0, typ: NTI14615422, name: "compile", sons: null};
NTI14615396.node = NNI14615396;
NTI14615395.base = NTI14615396;
NTI14615429.base = NTI14615395;
var NNI14451066 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI14451081, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI14451092, name: "clone", sons: null}]};
NTI14451066.node = NNI14451066;
NTI14451065.base = NTI14451066;
var NNI14615468 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14615472, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14615481, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI14615468.node = NNI14615468;
NTI14615467.base = NTI14615468;
var NNI14615437 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14615441, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14615447, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI14615454, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI14615467, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI14615494, name: "eql", sons: null}]}]]};
NTI14615437.node = NNI14615437;
var NNI14615351 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14615390, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI14615429, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451065, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI14615437, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI14615501, name: "iterate", sons: null}]]}]};
NTI14615351.node = NNI14615351;
NTI14615351.base = NTI6008;
NTI14627491.base = NTI14610820;
NTI14628376.base = NTI14615356;
var NNI14615402 = {kind: 1, offset: "update", len: 0, typ: NTI14615411, name: "update", sons: null};
NTI14615402.node = NNI14615402;
NTI14615401.base = NTI14615402;
NTI14628395.base = NTI14615401;
NTI14628408.base = NTI14615395;
NTI14628420.base = NTI14615401;
var NNI14628414 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI14628420, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451065, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI14628414.node = NNI14628414;
NTI14628413.base = NTI14628414;
NTI14628427.base = NTI14628413;
var NNI14628371 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14628376, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI14196137, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI14615437, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI14451065, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451065, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI14628395, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI14615501, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI14451065, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI14628408, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI14628427, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI14628371.node = NNI14628371;
NTI14628370.base = NTI14628371;
NTI14628445.base = NTI14628370;
NTI14640029.base = NTI14628413;
NTI14640056.base = NTI14615401;
var NNI14615368 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14615371, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14451071, name: "set", sons: null}]};
NTI14615368.node = NNI14615368;
NTI14615368.base = NTI6008;
NTI14690422.base = NTI10206031;
NTI14690610.base = NTI14615401;
var NNI14615364 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI14196137, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI14615364.node = NNI14615364;
NTI14615364.base = NTI14615368;
NTI14611228.base = NTI14196137;
var NNI14611245 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI14196137, name: "Field1", sons: null}]};
NTI14611245.node = NNI14611245;
NTI15310422.base = NTI10206031;
NTI15270735.base = NTI10206031;
var NNI14924556 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14924560, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14924569, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI14924556.node = NNI14924556;
NTI14924555.base = NTI14924556;
var NNI14924525 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14924529, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14924535, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI14924542, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI14924555, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI14924582, name: "eql", sons: null}]}]]};
NTI14924525.node = NNI14924525;
var NNI15245217 = {kind: 1, offset: "config", len: 0, typ: NTI15235168, name: "config", sons: null};
NTI15245217.node = NNI15245217;
NTI14924512.base = NTI14615356;
NTI14924517.base = NTI14615395;
var NNI14924589 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14924593, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14924601, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI14924609, name: "selector", sons: null}]]};
NTI14924589.node = NNI14924589;
var NNI14924507 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14924512, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI14924517, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451065, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI14924525, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI14924589, name: "iterate", sons: null}]]}]};
NTI14924507.node = NNI14924507;
NTI14924507.base = NTI6008;
NTI15245217.base = NTI14924507;
NTI15235603.base = NTI14615356;
NTI15235622.base = NTI14615401;
NTI15235635.base = NTI14615395;
NTI15235640.base = NTI14628413;
var NNI15235598 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI15235603, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI14196137, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI14924525, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI14451065, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14451065, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI15235622, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI14924589, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI14451065, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI15235635, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI15235640, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI15235598.node = NNI15235598;
NTI15235597.base = NTI15235598;
NTI15246187.base = NTI15235597;
NTI15260029.base = NTI14628413;
NTI15260056.base = NTI14615401;
NTI15246170.base = NTI15235597;
var NNI14960014 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI14960018, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI14960027, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI14960014.node = NNI14960014;
NTI14960013.base = NTI14960014;
var NNI14975629 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14975633, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14975639, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI14975646, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI14960013, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI14975664, name: "eql", sons: null}]}]]};
NTI14975629.node = NNI14975629;
NTI14975616.base = NTI13760622;
NTI14975621.base = NTI13760666;
var NNI14975671 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI14975675, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI14975683, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI14975691, name: "selector", sons: null}]]};
NTI14975671.node = NNI14975671;
var NNI14975611 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14975616, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI14975621, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13760704, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI14975629, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI14975671, name: "iterate", sons: null}]]}]};
NTI14975611.node = NNI14975611;
NTI14975611.base = NTI6008;
NTI14981496.base = NTI14615401;
NTI14982381.base = NTI13760622;
NTI14982400.base = NTI13760672;
NTI14982413.base = NTI13760666;
NTI14982418.base = NTI13821772;
var NNI14982376 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI14982381, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI112, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI14975629, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI13760704, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13760704, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI14982400, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI14975671, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI13760704, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI14982413, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI14982418, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI14982376.node = NNI14982376;
NTI14982375.base = NTI14982376;
NTI14982436.base = NTI14982375;
NTI14995029.base = NTI13821772;
NTI14995056.base = NTI13760672;
NTI15035422.base = NTI10206031;
var NNI15150014 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI15150018, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI15150027, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI15150014.node = NNI15150014;
NTI15150013.base = NTI15150014;
var NNI15165808 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI15165812, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI15165818, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI15165825, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI15150013, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI15165843, name: "eql", sons: null}]}]]};
NTI15165808.node = NNI15165808;
NTI15165795.base = NTI14610784;
NTI15165800.base = NTI14610814;
var NNI15165850 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI15165854, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI15165862, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI15165870, name: "selector", sons: null}]]};
NTI15165850.node = NNI15165850;
var NNI15165790 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI15165795, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI15165800, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14610852, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI15165808, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI15165850, name: "iterate", sons: null}]]}]};
NTI15165790.node = NNI15165790;
NTI15165790.base = NTI6008;
NTI15171405.base = NTI14615401;
NTI15172290.base = NTI14610784;
NTI15172309.base = NTI14610820;
NTI15172322.base = NTI14610814;
NTI15172327.base = NTI14721776;
var NNI15172285 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI15172290, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI14196146, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI15165808, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI14610852, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI14610852, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI15172309, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI15165850, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI14610852, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI15172322, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI15172327, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI15172285.node = NNI15172285;
NTI15172284.base = NTI15172285;
NTI15172345.base = NTI15172284;
NTI15185029.base = NTI14721776;
NTI15185056.base = NTI14610820;
NTI15225422.base = NTI10206031;
var NNI10296201 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matchLen", len: 0, typ: NTI143, name: "matchLen", sons: null}, 
{kind: 1, offset: "matchMax", len: 0, typ: NTI143, name: "matchMax", sons: null}]};
NTI10296201.node = NNI10296201;
NTI10296201.base = NTI6217;
var NNI10702204 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ip", len: 0, typ: NTI143, name: "ip", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI143, name: "si", sons: null}, 
{kind: 1, offset: "rp", len: 0, typ: NTI143, name: "rp", sons: null}, 
{kind: 1, offset: "cp", len: 0, typ: NTI143, name: "cp", sons: null}, 
{kind: 1, offset: "pp", len: 0, typ: NTI143, name: "pp", sons: null}]};
NTI10702204.node = NNI10702204;
var NNI10296203 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI10296203, name: "cftOpen", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10296203, name: "cftClose", len: 0, sons: null}}};
NTI10296203.node = NNI10296203;
var NNI10296205 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10296205, name: "ckStr", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10296205, name: "ckAction", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10296205, name: "ckRef", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10296205, name: "ckClose", len: 0, sons: null}}};
NTI10296205.node = NNI10296205;
var NNI15325224 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cft", len: 0, typ: NTI10296203, name: "cft", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI143, name: "si", sons: null}, 
{kind: 1, offset: "ck", len: 0, typ: NTI10296205, name: "ck", sons: null}, 
{kind: 1, offset: "sPushed", len: 0, typ: NTI112, name: "sPushed", sons: null}]};
NTI15325224.node = NNI15325224;
var NNI11550432 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "ck", len: 4, typ: NTI10296205, name: "ck", sons: [[setConstr(0, 2, 1), {kind: 1, offset: "s", len: 0, typ: NTI112, name: "s", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "si", len: 0, typ: NTI143, name: "si", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "len", len: 0, typ: NTI143, name: "len", sons: null}]};
NTI11550432.node = NNI11550432;
NTI11550431.base = NTI11550432;
NTI11555208.base = NTI11550431;
NTI11550428.base = NTI11550431;
var NNI15325204 = {kind: 1, offset: "fn", len: 0, typ: NTI15325272, name: "fn", sons: null};
NTI15325204.node = NNI15325204;
var NNI15900276 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI15900280, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI15900289, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI15900276.node = NNI15900276;
NTI15900275.base = NTI15900276;
var NNI15900245 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI15900249, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI15900255, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI15900262, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI15900275, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI15900302, name: "eql", sons: null}]}]]};
NTI15900245.node = NNI15900245;
var NNI16510217 = {kind: 1, offset: "config", len: 0, typ: NTI15900464, name: "config", sons: null};
NTI16510217.node = NNI16510217;
var NNI15900198 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI15900201, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI15900198.node = NNI15900198;
NTI15900197.base = NTI15900198;
NTI15900473.base = NTI15900197;
var NNI15900422 = {kind: 1, offset: "compile", len: 0, typ: NTI15900430, name: "compile", sons: null};
NTI15900422.node = NNI15900422;
NTI15900421.base = NTI15900422;
NTI15900478.base = NTI15900421;
var NNI15900310 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI15900320, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI15900331, name: "clone", sons: null}]};
NTI15900310.node = NNI15900310;
NTI15900309.base = NTI15900310;
var NNI15900366 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI15900370, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI15900386, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI15900403, name: "selector", sons: null}]]};
NTI15900366.node = NNI15900366;
var NNI15900468 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI15900473, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI15900478, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI15900309, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI15900245, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI15900366, name: "iterate", sons: null}]]}]};
NTI15900468.node = NNI15900468;
NTI15900468.base = NTI6008;
NTI16510217.base = NTI15900468;
NTI15900236.base = NTI15900197;
var NNI15321017 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI15321017, name: "AppIndex", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI15321017, name: "AppGroupThreads", len: 0, sons: null}}};
NTI15321017.node = NNI15321017;
var NNI15321024 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "hash", len: 0, typ: NTI112, name: "hash", sons: null}, 
{kind: 1, offset: "route", len: 0, typ: NTI15321017, name: "route", sons: null}, 
{kind: 1, offset: "group_name", len: 0, typ: NTI112, name: "group_name", sons: null}]};
NTI15321024.node = NNI15321024;
NTI15321019.base = NTI15321024;
var NNI15321029 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "route", len: 0, typ: NTI15321019, name: "route", sons: null}, 
{kind: 1, offset: "groups", len: 0, typ: NTI13586042, name: "groups", sons: null}, 
{kind: 1, offset: "threads", len: 0, typ: NTI14451015, name: "threads", sons: null}]};
NTI15321029.node = NNI15321029;
NTI15321021.base = NTI15321029;
var NNI15900343 = {kind: 1, offset: "update", len: 0, typ: NTI15900352, name: "update", sons: null};
NTI15900343.node = NNI15900343;
NTI15900342.base = NTI15900343;
NTI15900360.base = NTI15900342;
NTI15900437.base = NTI15900421;
NTI15900449.base = NTI15900342;
var NNI15900443 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI15900449, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI15900309, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI15900443.node = NNI15900443;
NTI15900442.base = NTI15900443;
NTI15900456.base = NTI15900442;
var NNI15900192 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI15900236, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI15321021, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI15900245, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI15900309, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI15900309, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI15900360, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI15900366, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI15900309, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI15900437, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI15900456, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI15900192.node = NNI15900192;
NTI15900191.base = NTI15900192;
NTI16274579.base = NTI15900191;
NTI16285029.base = NTI15900442;
NTI16285056.base = NTI15900342;
NTI16274562.base = NTI15900191;
var NNI15910014 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI15910018, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI15910027, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI15910014.node = NNI15910014;
NTI15910013.base = NTI15910014;
var NNI15927152 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI15927156, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI15927162, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI15927169, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI15910013, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI15927187, name: "eql", sons: null}]}]]};
NTI15927152.node = NNI15927152;
var NNI15927041 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI15927044, name: "refresh", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "after", len: 0, typ: NTI163, name: "after", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "reads", len: 0, typ: NTI10206073, name: "reads", sons: null}]};
NTI15927041.node = NNI15927041;
NTI15927040.base = NTI15927041;
NTI15927079.base = NTI15927040;
var NNI15927085 = {kind: 1, offset: "compile", len: 0, typ: NTI15927111, name: "compile", sons: null};
NTI15927085.node = NNI15927085;
NTI15927084.base = NTI15927085;
NTI15927118.base = NTI15927084;
var NNI15927123 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10206589, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI15927133, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI15927144, name: "clone", sons: null}]};
NTI15927123.node = NNI15927123;
NTI15927122.base = NTI15927123;
var NNI15927194 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI15927198, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI15927214, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI15927231, name: "selector", sons: null}]]};
NTI15927194.node = NNI15927194;
var NNI15927035 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI15927079, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI15927118, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI15927122, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI15927152, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI15927194, name: "iterate", sons: null}]]}]};
NTI15927035.node = NNI15927035;
NTI15927035.base = NTI6008;
NTI15931531.base = NTI15900342;
NTI15932416.base = NTI15927040;
var NNI15927091 = {kind: 1, offset: "update", len: 0, typ: NTI15927100, name: "update", sons: null};
NTI15927091.node = NNI15927091;
NTI15927090.base = NTI15927091;
NTI15932435.base = NTI15927090;
NTI15932448.base = NTI15927084;
NTI15932460.base = NTI15927090;
var NNI15932454 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI15932460, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI15927122, name: "mount", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI15932454.node = NNI15932454;
NTI15932453.base = NTI15932454;
NTI15932467.base = NTI15932453;
var NNI15932411 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI15932416, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI15321019, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI15927152, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI15927122, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI15927122, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI15932435, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI15927194, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI15927122, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI15932448, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI15932467, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI15932411.node = NNI15932411;
NTI15932410.base = NTI15932411;
NTI15932485.base = NTI15932410;
NTI15945029.base = NTI15932453;
NTI15945056.base = NTI15927090;
var NNI15927052 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI15927055, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI15927058, name: "set", sons: null}]};
NTI15927052.node = NNI15927052;
NTI15927052.base = NTI6008;
NTI15995422.base = NTI10206031;
NTI15995610.base = NTI15927090;
var NNI15927048 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI15321019, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI15927048.node = NNI15927048;
NTI15927048.base = NTI15927052;
var NNI1101031 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI851017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI112, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI112, name: "Field2", sons: null}]};
NTI1101031.node = NNI1101031;
NTI1101028.base = NTI1101031;
var NNI1101025 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1101028, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}]};
NTI1101025.node = NNI1101025;
NTI10525054.base = NTI143;
var NNI10525048 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI143, name: "top", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI143, name: "max", sons: null}, 
{kind: 1, offset: "frames", len: 0, typ: NTI10525054, name: "frames", sons: null}]};
NTI10525048.node = NNI10525048;
NTI15325250.base = NTI15325224;
var NNI15325244 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI143, name: "top", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI143, name: "max", sons: null}, 
{kind: 1, offset: "frames", len: 0, typ: NTI15325250, name: "frames", sons: null}]};
NTI15325244.node = NNI15325244;
NTI10702266.base = NTI10702204;
var NNI10702260 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI143, name: "top", sons: null}, 
{kind: 1, offset: "max", len: 0, typ: NTI143, name: "max", sons: null}, 
{kind: 1, offset: "frames", len: 0, typ: NTI10702266, name: "frames", sons: null}]};
NTI10702260.node = NNI10702260;
var NNI15325210 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ip", len: 0, typ: NTI143, name: "ip", sons: null}, 
{kind: 1, offset: "si", len: 0, typ: NTI143, name: "si", sons: null}, 
{kind: 1, offset: "simax", len: 0, typ: NTI143, name: "simax", sons: null}, 
{kind: 1, offset: "refs", len: 0, typ: NTI1101025, name: "refs", sons: null}, 
{kind: 1, offset: "retStack", len: 0, typ: NTI10525048, name: "retStack", sons: null}, 
{kind: 1, offset: "capStack", len: 0, typ: NTI15325244, name: "capStack", sons: null}, 
{kind: 1, offset: "backStack", len: 0, typ: NTI10702260, name: "backStack", sons: null}, 
{kind: 1, offset: "precStack", len: 0, typ: NTI10525048, name: "precStack", sons: null}]};
NTI15325210.node = NNI15325210;
var NNI11550422 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ok", len: 0, typ: NTI163, name: "ok", sons: null}, 
{kind: 1, offset: "matchLen", len: 0, typ: NTI143, name: "matchLen", sons: null}, 
{kind: 1, offset: "matchMax", len: 0, typ: NTI143, name: "matchMax", sons: null}, 
{kind: 1, offset: "cs", len: 0, typ: NTI11550428, name: "cs", sons: null}]};
NTI11550422.node = NNI11550422;
var NNI16150014 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI16150018, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI16150027, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10206031, name: "id", sons: null}]};
NTI16150014.node = NNI16150014;
NTI16150013.base = NTI16150014;
var NNI16166642 = {kind: 3, offset: "kind", len: 4, typ: NTI10206049, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI16166646, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI16166652, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI16166659, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI16150013, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI16166677, name: "eql", sons: null}]}]]};
NTI16166642.node = NNI16166642;
NTI16166629.base = NTI13760622;
NTI16166634.base = NTI13760666;
var NNI16166684 = {kind: 3, offset: "kind", len: 3, typ: NTI10206065, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI16166688, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI16166696, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI16166704, name: "selector", sons: null}]]};
NTI16166684.node = NNI16166684;
var NNI16166624 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI16166629, name: "refresh", sons: null}, 
{kind: 1, offset: "cmatches", len: 0, typ: NTI16166634, name: "cmatches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13760704, name: "mount", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "convert", len: 0, typ: NTI16166642, name: "convert", sons: null}], 
[setConstr(1), {kind: 1, offset: "iterate", len: 0, typ: NTI16166684, name: "iterate", sons: null}]]}]};
NTI16166624.node = NNI16166624;
NTI16166624.base = NTI6008;
NTI16171481.base = NTI15900342;
NTI16172366.base = NTI13760622;
NTI16172385.base = NTI13760672;
NTI16172398.base = NTI13760666;
NTI16172403.base = NTI13821772;
var NNI16172361 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "runner", len: 0, typ: NTI10206075, name: "runner", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI16172366, name: "refresh", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10206049, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI112, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI16166642, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI13760704, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI13760704, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI16172385, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI16166684, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI13760704, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI16172398, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI16172403, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10191231, name: "anchor", sons: null}]}]]}]};
NTI16172361.node = NNI16172361;
NTI16172360.base = NTI16172361;
NTI16172421.base = NTI16172360;
NTI16185029.base = NTI13821772;
NTI16185056.base = NTI13760672;
NTI16225422.base = NTI10206031;
NTI16273686.base = NTI15900342;
var NNI15900209 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI15900212, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI15900215, name: "set", sons: null}]};
NTI15900209.node = NNI15900209;
NTI15900209.base = NTI6008;
NTI16335422.base = NTI10206031;
NTI16335610.base = NTI15900342;
var NNI15900205 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10191231, name: "node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI15321021, name: "data", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI163, name: "init", sons: null}, 
{kind: 1, offset: "before", len: 0, typ: NTI163, name: "before", sons: null}, 
{kind: 1, offset: "skip", len: 0, typ: NTI163, name: "skip", sons: null}]};
NTI15900205.node = NNI15900205;
NTI15900205.base = NTI15900209;
NTI16266255.base = NTI10206031;
NTI10240112.base = NTI112;
NTI16501255.base = NTI10206031;
NTI16516463.base = NTI10206031;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
var ConstSet2 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(true);
var ConstSet4 = setConstr(0);
var ConstSet5 = setConstr(true);
var ConstSet6 = setConstr(1);
var ConstSet7 = setConstr(true);
var ConstSet8 = setConstr(2);
var ConstSet9 = setConstr(true);
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
var ConstSet12 = setConstr(true);
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet13 = setConstr(true);
var ConstSet14 = setConstr(true);
var ConstSet15 = setConstr(true);
var ConstSet16 = setConstr(true);
var ConstSet17 = setConstr(true);
var ConstSet18 = setConstr(true);
var ConstSet19 = setConstr(true);
var ConstSet20 = setConstr(true);
var ConstSet21 = setConstr(true);
var ConstSet22 = setConstr(true);
var ConstSet23 = setConstr(true);
var ConstSet24 = setConstr(false);
var ConstSet25 = setConstr(0);
var ConstSet26 = setConstr(false);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr(false);
var ConstSet30 = setConstr(1);
var ConstSet31 = setConstr(2);
var ConstSet32 = setConstr(false);
var ConstSet33 = setConstr(2, 3);
var ConstSet34 = setConstr(2, 3);
var ConstSet35 = setConstr(3);
var ConstSet36 = setConstr(false);
var ConstSet37 = setConstr(3);
var ConstSet38 = setConstr(false);
var ConstSet39 = setConstr(3);
var ConstSet40 = setConstr(false);
var ConstSet41 = setConstr(2, 3);
var ConstSet42 = setConstr(false);
var ConstSet43 = setConstr(false);
var ConstSet44 = setConstr(false);
var ConstSet45 = setConstr(false);
var ConstSet46 = setConstr(false);
var ConstSet47 = setConstr(false);
var ConstSet48 = setConstr(false);
var ConstSet49 = setConstr(false);
var ConstSet50 = setConstr(false);
var ConstSet51 = setConstr(false);
var ConstSet52 = setConstr(false);
var ConstSet53 = setConstr(false);
var ConstSet54 = setConstr(false);
var ConstSet55 = setConstr(false);
var ConstSet56 = setConstr(false);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(false);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(false);
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function genericReset(x_250044, ti_250045) {
  var result_250046 = null;

    result_250046 = null;
    switch (ti_250045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (is_fat_pointer_235401(ti_250045)) {
              result_250046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_250046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_250045.kind == 17)) {
      result_250046 = {m_type: ti_250045};
      }
      else {
        result_250046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_250046 = [];
    
      break;
    case 4:
    case 16:
            result_250046 = new Array(x_250044.length);
      for (var i = 0; i < x_250044.length; ++i) {
        result_250046[i] = genericReset(x_250044[i], ti_250045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_250046;

}
var ConstSet61 = setConstr(60, 62, 94);
var ConstSet62 = setConstr(60, 62, 94);
var ConstSet63 = setConstr(45, 43, 32);
var ConstSet64 = setConstr([48, 57]);
var ConstSet65 = setConstr([48, 57]);
var ConstSet66 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
var ConstSet67 = setConstr([65, 90], [97, 122]);
var ConstSet68 = setConstr(true);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(true);
var ConstSet71 = setConstr(true);
var ConstSet72 = setConstr(true);
var ConstSet73 = setConstr(true);
var ConstSet74 = setConstr(true);
var ConstSet75 = setConstr(false);
var ConstSet76 = setConstr(false);
var ConstSet77 = setConstr(false);
var ConstSet78 = setConstr(1);
var ConstSet79 = setConstr(false);
var ConstSet80 = setConstr(false);
var ConstSet81 = setConstr(false);
var ConstSet82 = setConstr(false);
var ConstSet83 = setConstr(false);
var ConstSet84 = setConstr(false);
var ConstSet85 = setConstr(false);
var ConstSet86 = setConstr(3);
function nimMax(a_230821, b_230822) {
    var Tmp1;

  var result_230823 = 0;

  BeforeRet: do {
    if ((b_230822 <= a_230821)) {
    Tmp1 = a_230821;
    }
    else {
    Tmp1 = b_230822;
    }
    
    result_230823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230823;

}
function nimMin(a_230803, b_230804) {
    var Tmp1;

  var result_230805 = 0;

  BeforeRet: do {
    if ((a_230803 <= b_230804)) {
    Tmp1 = a_230803;
    }
    else {
    Tmp1 = b_230804;
    }
    
    result_230805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230805;

}
var ConstSet87 = setConstr(true);
var ConstSet88 = setConstr(false);
var ConstSet89 = setConstr(4);
var ConstSet90 = setConstr(4);
var ConstSet91 = setConstr(2);
var ConstSet92 = setConstr(2);
var ConstSet93 = setConstr(3);
var ConstSet94 = setConstr(3);
var ConstSet95 = setConstr(1);
var ConstSet96 = setConstr(1);
var ConstSet97 = setConstr(6);
var ConstSet98 = setConstr(6);
var ConstSet99 = setConstr(5);
var ConstSet100 = setConstr(5);
var ConstSet101 = setConstr(5);
function modInt(a_230475, b_230476) {
        if (b_230476 == 0) raiseDivByZero();
    if (b_230476 == -1 && a_230475 == 2147483647) raiseOverflow();
    return Math.trunc(a_230475 % b_230476);
  

  
}
var ConstSet102 = setConstr(5);
var ConstSet103 = setConstr(5);
var ConstSet104 = setConstr(6);
function addChar(x_275031, c_275032) {
    x_275031.push(c_275032);

  
}
var ConstSet105 = setConstr([48, 57]);
var ConstSet106 = setConstr(0, 125);
var ConstSet107 = setConstr([48, 57]);
var ConstSet108 = setConstr([65, 90]);
var ConstSet109 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
function reprEnum(e_315480, typ_315481) {
  var result_315482 = null;

  var F={procname:"system.reprEnum",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    if (!(is_undefined_315483(typ_315481.node.sons[e_315480]))) {
    F.line = 38;
    result_315482 = nimCopy(null, makeNimstrLit(typ_315481.node.sons[e_315480].name), NTI112);
    }
    else {
      F.line = 40;
      result_315482 = nimCopy(null, (cstrToNimstr((e_315480)+"") || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI112);
    }
    
  framePtr = F.prev;

  return result_315482;

}
var ConstSet110 = setConstr(6);
var ConstSet111 = setConstr(6);
var ConstSet112 = setConstr(5);
var ConstSet113 = setConstr(5, 0);
var ConstSet114 = setConstr(5, 0);
var ConstSet115 = setConstr(4, 0);
var ConstSet116 = setConstr(4, 0);
var ConstSet117 = setConstr(4);
var ConstSet118 = setConstr(5);
var ConstSet119 = setConstr(6);
var ConstSet120 = setConstr(6);
var ConstSet121 = setConstr(5);
var ConstSet122 = setConstr(true);
var ConstSet123 = setConstr(true);
var ConstSet124 = setConstr(true);
var ConstSet125 = setConstr(true);
var ConstSet126 = setConstr(true);
var ConstSet127 = setConstr(true);
var ConstSet128 = setConstr(true);
var ConstSet129 = setConstr(false);
var ConstSet130 = setConstr(false);
var ConstSet131 = setConstr(false);
var ConstSet132 = setConstr(1);
var ConstSet133 = setConstr(false);
var ConstSet134 = setConstr(false);
var ConstSet135 = setConstr(false);
var ConstSet136 = setConstr(false);
var ConstSet137 = setConstr(false);
var ConstSet138 = setConstr(false);
var ConstSet139 = setConstr(false);
var ConstSet140 = setConstr(true);
var ConstSet141 = setConstr(true);
var ConstSet142 = setConstr(0);
var ConstSet143 = setConstr(true);
var ConstSet144 = setConstr(1);
var ConstSet145 = setConstr(true);
var ConstSet146 = setConstr(2);
var ConstSet147 = setConstr(true);
var ConstSet148 = setConstr(true);
var ConstSet149 = setConstr(true);
var ConstSet150 = setConstr(true);
var ConstSet151 = setConstr(true);
var ConstSet152 = setConstr(true);
var ConstSet153 = setConstr(true);
var ConstSet154 = setConstr(true);
var ConstSet155 = setConstr(true);
var ConstSet156 = setConstr(true);
var ConstSet157 = setConstr(true);
var ConstSet158 = setConstr(true);
var ConstSet159 = setConstr(true);
var ConstSet160 = setConstr(true);
var ConstSet161 = setConstr(true);
var ConstSet162 = setConstr(false);
var ConstSet163 = setConstr(0);
var ConstSet164 = setConstr(false);
var ConstSet165 = setConstr(1);
var ConstSet166 = setConstr(1);
var ConstSet167 = setConstr(false);
var ConstSet168 = setConstr(1);
var ConstSet169 = setConstr(2);
var ConstSet170 = setConstr(false);
var ConstSet171 = setConstr(2, 3);
var ConstSet172 = setConstr(2, 3);
var ConstSet173 = setConstr(3);
var ConstSet174 = setConstr(false);
var ConstSet175 = setConstr(3);
var ConstSet176 = setConstr(false);
var ConstSet177 = setConstr(3);
var ConstSet178 = setConstr(false);
var ConstSet179 = setConstr(2, 3);
var ConstSet180 = setConstr(false);
var ConstSet181 = setConstr(false);
var ConstSet182 = setConstr(false);
var ConstSet183 = setConstr(false);
var ConstSet184 = setConstr(false);
var ConstSet185 = setConstr(false);
var ConstSet186 = setConstr(false);
var ConstSet187 = setConstr(false);
var ConstSet188 = setConstr(false);
var ConstSet189 = setConstr(false);
var ConstSet190 = setConstr(false);
var ConstSet191 = setConstr(false);
var ConstSet192 = setConstr(false);
var ConstSet193 = setConstr(false);
var ConstSet194 = setConstr(false);
var ConstSet195 = setConstr(false);
var ConstSet196 = setConstr(false);
var ConstSet197 = setConstr(false);
var ConstSet198 = setConstr(false);
var ConstSet199 = setConstr(true);
var ConstSet200 = setConstr(true);
var ConstSet201 = setConstr(true);
var ConstSet202 = setConstr(true);
var ConstSet203 = setConstr(true);
var ConstSet204 = setConstr(true);
var ConstSet205 = setConstr(true);
var ConstSet206 = setConstr(false);
var ConstSet207 = setConstr(false);
var ConstSet208 = setConstr(false);
var ConstSet209 = setConstr(1);
var ConstSet210 = setConstr(false);
var ConstSet211 = setConstr(false);
var ConstSet212 = setConstr(false);
var ConstSet213 = setConstr(false);
var ConstSet214 = setConstr(false);
var ConstSet215 = setConstr(false);
var ConstSet216 = setConstr(false);
var ConstSet217 = setConstr(true);
var ConstSet218 = setConstr(true);
var ConstSet219 = setConstr(0);
var ConstSet220 = setConstr(true);
var ConstSet221 = setConstr(1);
var ConstSet222 = setConstr(true);
var ConstSet223 = setConstr(2);
var ConstSet224 = setConstr(true);
var ConstSet225 = setConstr(true);
var ConstSet226 = setConstr(true);
var ConstSet227 = setConstr(true);
var ConstSet228 = setConstr(true);
var ConstSet229 = setConstr(true);
var ConstSet230 = setConstr(true);
var ConstSet231 = setConstr(true);
var ConstSet232 = setConstr(true);
var ConstSet233 = setConstr(true);
var ConstSet234 = setConstr(true);
var ConstSet235 = setConstr(true);
var ConstSet236 = setConstr(true);
var ConstSet237 = setConstr(true);
var ConstSet238 = setConstr(true);
var ConstSet239 = setConstr(false);
var ConstSet240 = setConstr(0);
var ConstSet241 = setConstr(false);
var ConstSet242 = setConstr(1);
var ConstSet243 = setConstr(1);
var ConstSet244 = setConstr(false);
var ConstSet245 = setConstr(1);
var ConstSet246 = setConstr(2);
var ConstSet247 = setConstr(false);
var ConstSet248 = setConstr(2, 3);
var ConstSet249 = setConstr(2, 3);
var ConstSet250 = setConstr(3);
var ConstSet251 = setConstr(false);
var ConstSet252 = setConstr(3);
var ConstSet253 = setConstr(false);
var ConstSet254 = setConstr(3);
var ConstSet255 = setConstr(false);
var ConstSet256 = setConstr(2, 3);
var ConstSet257 = setConstr(false);
var ConstSet258 = setConstr(false);
var ConstSet259 = setConstr(false);
var ConstSet260 = setConstr(false);
var ConstSet261 = setConstr(false);
var ConstSet262 = setConstr(false);
var ConstSet263 = setConstr(false);
var ConstSet264 = setConstr(false);
var ConstSet265 = setConstr(false);
var ConstSet266 = setConstr(false);
var ConstSet267 = setConstr(false);
var ConstSet268 = setConstr(false);
var ConstSet269 = setConstr(false);
var ConstSet270 = setConstr(false);
var ConstSet271 = setConstr(false);
var ConstSet272 = setConstr(false);
var ConstSet273 = setConstr(false);
var ConstSet274 = setConstr(false);
var ConstSet275 = setConstr(false);
var ConstSet276 = setConstr(true);
var ConstSet277 = setConstr(false);
var ConstSet278 = setConstr(true);
var ConstSet279 = setConstr(true);
var ConstSet280 = setConstr(0);
var ConstSet281 = setConstr(true);
var ConstSet282 = setConstr(1);
var ConstSet283 = setConstr(true);
var ConstSet284 = setConstr(2);
var ConstSet285 = setConstr(true);
var ConstSet286 = setConstr(true);
var ConstSet287 = setConstr(true);
var ConstSet288 = setConstr(true);
var ConstSet289 = setConstr(true);
var ConstSet290 = setConstr(true);
var ConstSet291 = setConstr(true);
var ConstSet292 = setConstr(true);
var ConstSet293 = setConstr(true);
var ConstSet294 = setConstr(true);
var ConstSet295 = setConstr(true);
var ConstSet296 = setConstr(true);
var ConstSet297 = setConstr(true);
var ConstSet298 = setConstr(true);
var ConstSet299 = setConstr(true);
var ConstSet300 = setConstr(false);
var ConstSet301 = setConstr(0);
var ConstSet302 = setConstr(false);
var ConstSet303 = setConstr(1);
var ConstSet304 = setConstr(1);
var ConstSet305 = setConstr(false);
var ConstSet306 = setConstr(1);
var ConstSet307 = setConstr(2);
var ConstSet308 = setConstr(false);
var ConstSet309 = setConstr(2, 3);
var ConstSet310 = setConstr(2, 3);
var ConstSet311 = setConstr(3);
var ConstSet312 = setConstr(false);
var ConstSet313 = setConstr(3);
var ConstSet314 = setConstr(false);
var ConstSet315 = setConstr(3);
var ConstSet316 = setConstr(false);
var ConstSet317 = setConstr(2, 3);
var ConstSet318 = setConstr(false);
var ConstSet319 = setConstr(false);
var ConstSet320 = setConstr(false);
var ConstSet321 = setConstr(false);
var ConstSet322 = setConstr(false);
var ConstSet323 = setConstr(false);
var ConstSet324 = setConstr(false);
var ConstSet325 = setConstr(false);
var ConstSet326 = setConstr(false);
var ConstSet327 = setConstr(false);
var ConstSet328 = setConstr(false);
var ConstSet329 = setConstr(false);
var ConstSet330 = setConstr(false);
var ConstSet331 = setConstr(false);
var ConstSet332 = setConstr(false);
var ConstSet333 = setConstr(false);
var ConstSet334 = setConstr(false);
var ConstSet335 = setConstr(false);
var ConstSet336 = setConstr(false);
var ConstSet337 = setConstr(true);
var ConstSet338 = setConstr(true);
var ConstSet339 = setConstr(true);
var ConstSet340 = setConstr(true);
var ConstSet341 = setConstr(true);
var ConstSet342 = setConstr(true);
var ConstSet343 = setConstr(true);
var ConstSet344 = setConstr(false);
var ConstSet345 = setConstr(false);
var ConstSet346 = setConstr(false);
var ConstSet347 = setConstr(1);
var ConstSet348 = setConstr(false);
var ConstSet349 = setConstr(false);
var ConstSet350 = setConstr(false);
var ConstSet351 = setConstr(false);
var ConstSet352 = setConstr(false);
var ConstSet353 = setConstr(false);
var ConstSet354 = setConstr(false);
var ConstSet355 = setConstr(3);
var ConstSet356 = setConstr(true);
var ConstSet357 = setConstr(false);
var ConstSet358 = setConstr(5, 0);
var ConstSet359 = setConstr(5, 0);
var ConstSet360 = setConstr(6);
var ConstSet361 = setConstr(6);
var ConstSet362 = setConstr(5, 0);
var ConstSet363 = setConstr(5, 0);
var ConstSet364 = setConstr(5, 0);
var ConstSet365 = setConstr(5, 0);
var ConstSet366 = setConstr(6);
var ConstSet367 = setConstr(6);
var ConstSet368 = setConstr(2);
var ConstSet369 = setConstr(2);
var ConstSet370 = setConstr(2);
var ConstSet371 = setConstr(true);
var ConstSet372 = setConstr(true);
var ConstSet373 = setConstr(true);
var ConstSet374 = setConstr(true);
var ConstSet375 = setConstr(true);
var ConstSet376 = setConstr(true);
var ConstSet377 = setConstr(true);
var ConstSet378 = setConstr(false);
var ConstSet379 = setConstr(false);
var ConstSet380 = setConstr(false);
var ConstSet381 = setConstr(1);
var ConstSet382 = setConstr(false);
var ConstSet383 = setConstr(false);
var ConstSet384 = setConstr(false);
var ConstSet385 = setConstr(false);
var ConstSet386 = setConstr(false);
var ConstSet387 = setConstr(false);
var ConstSet388 = setConstr(false);
var ConstSet389 = setConstr(true);
var ConstSet390 = setConstr(true);
var ConstSet391 = setConstr(0);
var ConstSet392 = setConstr(true);
var ConstSet393 = setConstr(1);
var ConstSet394 = setConstr(true);
var ConstSet395 = setConstr(2);
var ConstSet396 = setConstr(true);
var ConstSet397 = setConstr(true);
var ConstSet398 = setConstr(true);
var ConstSet399 = setConstr(true);
var ConstSet400 = setConstr(true);
var ConstSet401 = setConstr(true);
var ConstSet402 = setConstr(true);
var ConstSet403 = setConstr(true);
var ConstSet404 = setConstr(true);
var ConstSet405 = setConstr(true);
var ConstSet406 = setConstr(true);
var ConstSet407 = setConstr(true);
var ConstSet408 = setConstr(true);
var ConstSet409 = setConstr(true);
var ConstSet410 = setConstr(true);
var ConstSet411 = setConstr(false);
var ConstSet412 = setConstr(0);
var ConstSet413 = setConstr(false);
var ConstSet414 = setConstr(1);
var ConstSet415 = setConstr(1);
var ConstSet416 = setConstr(false);
var ConstSet417 = setConstr(1);
var ConstSet418 = setConstr(2);
var ConstSet419 = setConstr(false);
var ConstSet420 = setConstr(2, 3);
var ConstSet421 = setConstr(2, 3);
var ConstSet422 = setConstr(3);
var ConstSet423 = setConstr(false);
var ConstSet424 = setConstr(3);
var ConstSet425 = setConstr(false);
var ConstSet426 = setConstr(3);
var ConstSet427 = setConstr(false);
var ConstSet428 = setConstr(2, 3);
var ConstSet429 = setConstr(false);
var ConstSet430 = setConstr(false);
var ConstSet431 = setConstr(false);
var ConstSet432 = setConstr(false);
var ConstSet433 = setConstr(false);
var ConstSet434 = setConstr(false);
var ConstSet435 = setConstr(false);
var ConstSet436 = setConstr(false);
var ConstSet437 = setConstr(false);
var ConstSet438 = setConstr(false);
var ConstSet439 = setConstr(false);
var ConstSet440 = setConstr(false);
var ConstSet441 = setConstr(false);
var ConstSet442 = setConstr(false);
var ConstSet443 = setConstr(false);
var ConstSet444 = setConstr(false);
var ConstSet445 = setConstr(false);
var ConstSet446 = setConstr(false);
var ConstSet447 = setConstr(false);
var ConstSet448 = setConstr(true);
var ConstSet449 = setConstr(true);
var ConstSet450 = setConstr(true);
var ConstSet451 = setConstr(true);
var ConstSet452 = setConstr(true);
var ConstSet453 = setConstr(true);
var ConstSet454 = setConstr(true);
var ConstSet455 = setConstr(false);
var ConstSet456 = setConstr(false);
var ConstSet457 = setConstr(false);
var ConstSet458 = setConstr(1);
var ConstSet459 = setConstr(false);
var ConstSet460 = setConstr(false);
var ConstSet461 = setConstr(false);
var ConstSet462 = setConstr(false);
var ConstSet463 = setConstr(false);
var ConstSet464 = setConstr(false);
var ConstSet465 = setConstr(false);
var ConstSet466 = setConstr(true);
var ConstSet467 = setConstr(true);
var ConstSet468 = setConstr(0);
var ConstSet469 = setConstr(true);
var ConstSet470 = setConstr(1);
var ConstSet471 = setConstr(true);
var ConstSet472 = setConstr(2);
var ConstSet473 = setConstr(true);
var ConstSet474 = setConstr(true);
var ConstSet475 = setConstr(true);
var ConstSet476 = setConstr(true);
var ConstSet477 = setConstr(true);
var ConstSet478 = setConstr(true);
var ConstSet479 = setConstr(true);
var ConstSet480 = setConstr(true);
var ConstSet481 = setConstr(true);
var ConstSet482 = setConstr(true);
var ConstSet483 = setConstr(true);
var ConstSet484 = setConstr(true);
var ConstSet485 = setConstr(true);
var ConstSet486 = setConstr(true);
var ConstSet487 = setConstr(true);
var ConstSet488 = setConstr(false);
var ConstSet489 = setConstr(0);
var ConstSet490 = setConstr(false);
var ConstSet491 = setConstr(1);
var ConstSet492 = setConstr(1);
var ConstSet493 = setConstr(false);
var ConstSet494 = setConstr(1);
var ConstSet495 = setConstr(2);
var ConstSet496 = setConstr(false);
var ConstSet497 = setConstr(2, 3);
var ConstSet498 = setConstr(2, 3);
var ConstSet499 = setConstr(3);
var ConstSet500 = setConstr(false);
var ConstSet501 = setConstr(3);
var ConstSet502 = setConstr(false);
var ConstSet503 = setConstr(3);
var ConstSet504 = setConstr(false);
var ConstSet505 = setConstr(2, 3);
var ConstSet506 = setConstr(false);
var ConstSet507 = setConstr(false);
var ConstSet508 = setConstr(false);
var ConstSet509 = setConstr(false);
var ConstSet510 = setConstr(false);
var ConstSet511 = setConstr(false);
var ConstSet512 = setConstr(false);
var ConstSet513 = setConstr(false);
var ConstSet514 = setConstr(false);
var ConstSet515 = setConstr(false);
var ConstSet516 = setConstr(false);
var ConstSet517 = setConstr(false);
var ConstSet518 = setConstr(false);
var ConstSet519 = setConstr(false);
var ConstSet520 = setConstr(false);
var ConstSet521 = setConstr(false);
var ConstSet522 = setConstr(false);
var ConstSet523 = setConstr(false);
var ConstSet524 = setConstr(false);
var ConstSet525 = setConstr(true);
var ConstSet526 = setConstr(true);
var ConstSet527 = setConstr(0);
var ConstSet528 = setConstr(true);
var ConstSet529 = setConstr(1);
var ConstSet530 = setConstr(true);
var ConstSet531 = setConstr(2);
var ConstSet532 = setConstr(true);
var ConstSet533 = setConstr(true);
var ConstSet534 = setConstr(true);
var ConstSet535 = setConstr(true);
var ConstSet536 = setConstr(true);
var ConstSet537 = setConstr(true);
var ConstSet538 = setConstr(true);
var ConstSet539 = setConstr(true);
var ConstSet540 = setConstr(true);
var ConstSet541 = setConstr(true);
var ConstSet542 = setConstr(true);
var ConstSet543 = setConstr(true);
var ConstSet544 = setConstr(true);
var ConstSet545 = setConstr(true);
var ConstSet546 = setConstr(true);
var ConstSet547 = setConstr(false);
var ConstSet548 = setConstr(0);
var ConstSet549 = setConstr(false);
var ConstSet550 = setConstr(1);
var ConstSet551 = setConstr(1);
var ConstSet552 = setConstr(false);
var ConstSet553 = setConstr(1);
var ConstSet554 = setConstr(2);
var ConstSet555 = setConstr(false);
var ConstSet556 = setConstr(2, 3);
var ConstSet557 = setConstr(2, 3);
var ConstSet558 = setConstr(3);
var ConstSet559 = setConstr(false);
var ConstSet560 = setConstr(3);
var ConstSet561 = setConstr(false);
var ConstSet562 = setConstr(3);
var ConstSet563 = setConstr(false);
var ConstSet564 = setConstr(2, 3);
var ConstSet565 = setConstr(false);
var ConstSet566 = setConstr(false);
var ConstSet567 = setConstr(false);
var ConstSet568 = setConstr(false);
var ConstSet569 = setConstr(false);
var ConstSet570 = setConstr(false);
var ConstSet571 = setConstr(false);
var ConstSet572 = setConstr(false);
var ConstSet573 = setConstr(false);
var ConstSet574 = setConstr(false);
var ConstSet575 = setConstr(false);
var ConstSet576 = setConstr(false);
var ConstSet577 = setConstr(false);
var ConstSet578 = setConstr(false);
var ConstSet579 = setConstr(false);
var ConstSet580 = setConstr(false);
var ConstSet581 = setConstr(false);
var ConstSet582 = setConstr(false);
var ConstSet583 = setConstr(false);
var ConstSet584 = setConstr(true);
var ConstSet585 = setConstr(true);
var ConstSet586 = setConstr(true);
var ConstSet587 = setConstr(true);
var ConstSet588 = setConstr(true);
var ConstSet589 = setConstr(true);
var ConstSet590 = setConstr(true);
var ConstSet591 = setConstr(false);
var ConstSet592 = setConstr(false);
var ConstSet593 = setConstr(false);
var ConstSet594 = setConstr(1);
var ConstSet595 = setConstr(false);
var ConstSet596 = setConstr(false);
var ConstSet597 = setConstr(false);
var ConstSet598 = setConstr(false);
var ConstSet599 = setConstr(false);
var ConstSet600 = setConstr(false);
var ConstSet601 = setConstr(false);
var ConstSet602 = setConstr(3);
var ConstSet603 = setConstr(true);
var ConstSet604 = setConstr(true);
var ConstSet605 = setConstr(true);
var ConstSet606 = setConstr(true);
var ConstSet607 = setConstr(true);
var ConstSet608 = setConstr(true);
var ConstSet609 = setConstr(true);
var ConstSet610 = setConstr(false);
var ConstSet611 = setConstr(false);
var ConstSet612 = setConstr(false);
var ConstSet613 = setConstr(1);
var ConstSet614 = setConstr(false);
var ConstSet615 = setConstr(false);
var ConstSet616 = setConstr(false);
var ConstSet617 = setConstr(false);
var ConstSet618 = setConstr(false);
var ConstSet619 = setConstr(false);
var ConstSet620 = setConstr(false);
var ConstSet621 = setConstr(true);
var ConstSet622 = setConstr(true);
var ConstSet623 = setConstr(0);
var ConstSet624 = setConstr(true);
var ConstSet625 = setConstr(1);
var ConstSet626 = setConstr(true);
var ConstSet627 = setConstr(2);
var ConstSet628 = setConstr(true);
var ConstSet629 = setConstr(true);
var ConstSet630 = setConstr(true);
var ConstSet631 = setConstr(true);
var ConstSet632 = setConstr(true);
var ConstSet633 = setConstr(true);
var ConstSet634 = setConstr(true);
var ConstSet635 = setConstr(true);
var ConstSet636 = setConstr(true);
var ConstSet637 = setConstr(true);
var ConstSet638 = setConstr(true);
var ConstSet639 = setConstr(true);
var ConstSet640 = setConstr(true);
var ConstSet641 = setConstr(true);
var ConstSet642 = setConstr(true);
var ConstSet643 = setConstr(false);
var ConstSet644 = setConstr(0);
var ConstSet645 = setConstr(false);
var ConstSet646 = setConstr(1);
var ConstSet647 = setConstr(1);
var ConstSet648 = setConstr(false);
var ConstSet649 = setConstr(1);
var ConstSet650 = setConstr(2);
var ConstSet651 = setConstr(false);
var ConstSet652 = setConstr(2, 3);
var ConstSet653 = setConstr(2, 3);
var ConstSet654 = setConstr(3);
var ConstSet655 = setConstr(false);
var ConstSet656 = setConstr(3);
var ConstSet657 = setConstr(false);
var ConstSet658 = setConstr(3);
var ConstSet659 = setConstr(false);
var ConstSet660 = setConstr(2, 3);
var ConstSet661 = setConstr(false);
var ConstSet662 = setConstr(false);
var ConstSet663 = setConstr(false);
var ConstSet664 = setConstr(false);
var ConstSet665 = setConstr(false);
var ConstSet666 = setConstr(false);
var ConstSet667 = setConstr(false);
var ConstSet668 = setConstr(false);
var ConstSet669 = setConstr(false);
var ConstSet670 = setConstr(false);
var ConstSet671 = setConstr(false);
var ConstSet672 = setConstr(false);
var ConstSet673 = setConstr(false);
var ConstSet674 = setConstr(false);
var ConstSet675 = setConstr(false);
var ConstSet676 = setConstr(false);
var ConstSet677 = setConstr(false);
var ConstSet678 = setConstr(false);
var ConstSet679 = setConstr(false);
var ConstSet680 = setConstr(true);
var ConstSet681 = setConstr(true);
var ConstSet682 = setConstr(true);
var ConstSet683 = setConstr(true);
var ConstSet684 = setConstr(true);
var ConstSet685 = setConstr(true);
var ConstSet686 = setConstr(true);
var ConstSet687 = setConstr(false);
var ConstSet688 = setConstr(false);
var ConstSet689 = setConstr(false);
var ConstSet690 = setConstr(1);
var ConstSet691 = setConstr(false);
var ConstSet692 = setConstr(false);
var ConstSet693 = setConstr(false);
var ConstSet694 = setConstr(false);
var ConstSet695 = setConstr(false);
var ConstSet696 = setConstr(false);
var ConstSet697 = setConstr(false);
var ConstSet698 = setConstr(true);
var ConstSet699 = setConstr(true);
var ConstSet700 = setConstr(0);
var ConstSet701 = setConstr(true);
var ConstSet702 = setConstr(1);
var ConstSet703 = setConstr(true);
var ConstSet704 = setConstr(2);
var ConstSet705 = setConstr(true);
var ConstSet706 = setConstr(true);
var ConstSet707 = setConstr(true);
var ConstSet708 = setConstr(true);
var ConstSet709 = setConstr(true);
var ConstSet710 = setConstr(true);
var ConstSet711 = setConstr(true);
var ConstSet712 = setConstr(true);
var ConstSet713 = setConstr(true);
var ConstSet714 = setConstr(true);
var ConstSet715 = setConstr(true);
var ConstSet716 = setConstr(true);
var ConstSet717 = setConstr(true);
var ConstSet718 = setConstr(true);
var ConstSet719 = setConstr(true);
var ConstSet720 = setConstr(false);
var ConstSet721 = setConstr(0);
var ConstSet722 = setConstr(false);
var ConstSet723 = setConstr(1);
var ConstSet724 = setConstr(1);
var ConstSet725 = setConstr(false);
var ConstSet726 = setConstr(1);
var ConstSet727 = setConstr(2);
var ConstSet728 = setConstr(false);
var ConstSet729 = setConstr(2, 3);
var ConstSet730 = setConstr(2, 3);
var ConstSet731 = setConstr(3);
var ConstSet732 = setConstr(false);
var ConstSet733 = setConstr(3);
var ConstSet734 = setConstr(false);
var ConstSet735 = setConstr(3);
var ConstSet736 = setConstr(false);
var ConstSet737 = setConstr(2, 3);
var ConstSet738 = setConstr(false);
var ConstSet739 = setConstr(false);
var ConstSet740 = setConstr(false);
var ConstSet741 = setConstr(false);
var ConstSet742 = setConstr(false);
var ConstSet743 = setConstr(false);
var ConstSet744 = setConstr(false);
var ConstSet745 = setConstr(false);
var ConstSet746 = setConstr(false);
var ConstSet747 = setConstr(false);
var ConstSet748 = setConstr(false);
var ConstSet749 = setConstr(false);
var ConstSet750 = setConstr(false);
var ConstSet751 = setConstr(false);
var ConstSet752 = setConstr(false);
var ConstSet753 = setConstr(false);
var ConstSet754 = setConstr(false);
var ConstSet755 = setConstr(false);
var ConstSet756 = setConstr(false);
var ConstSet757 = setConstr(0, 2, 1);
var ConstSet758 = setConstr(0, 2, 1);
var ConstSet759 = setConstr(0, 2, 1);
var ConstSet760 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet761 = setConstr(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255);
var ConstSet762 = setConstr(true);
var ConstSet763 = setConstr(true);
var ConstSet764 = setConstr(true);
var ConstSet765 = setConstr(true);
var ConstSet766 = setConstr(true);
var ConstSet767 = setConstr(true);
var ConstSet768 = setConstr(true);
var ConstSet769 = setConstr(false);
var ConstSet770 = setConstr(false);
var ConstSet771 = setConstr(false);
var ConstSet772 = setConstr(1);
var ConstSet773 = setConstr(false);
var ConstSet774 = setConstr(false);
var ConstSet775 = setConstr(false);
var ConstSet776 = setConstr(false);
var ConstSet777 = setConstr(false);
var ConstSet778 = setConstr(false);
var ConstSet779 = setConstr(false);
var ConstSet780 = setConstr(true);
var ConstSet781 = setConstr(false);
var ConstSet782 = setConstr(true);
var ConstSet783 = setConstr(true);
var ConstSet784 = setConstr(true);
var ConstSet785 = setConstr(true);
var ConstSet786 = setConstr(true);
var ConstSet787 = setConstr(true);
var ConstSet788 = setConstr(true);
var ConstSet789 = setConstr(false);
var ConstSet790 = setConstr(false);
var ConstSet791 = setConstr(false);
var ConstSet792 = setConstr(1);
var ConstSet793 = setConstr(false);
var ConstSet794 = setConstr(false);
var ConstSet795 = setConstr(false);
var ConstSet796 = setConstr(false);
var ConstSet797 = setConstr(false);
var ConstSet798 = setConstr(false);
var ConstSet799 = setConstr(false);
var ConstSet800 = setConstr(true);
var ConstSet801 = setConstr(true);
var ConstSet802 = setConstr(0);
var ConstSet803 = setConstr(true);
var ConstSet804 = setConstr(1);
var ConstSet805 = setConstr(true);
var ConstSet806 = setConstr(2);
var ConstSet807 = setConstr(true);
var ConstSet808 = setConstr(true);
var ConstSet809 = setConstr(true);
var ConstSet810 = setConstr(true);
var ConstSet811 = setConstr(true);
var ConstSet812 = setConstr(true);
var ConstSet813 = setConstr(true);
var ConstSet814 = setConstr(true);
var ConstSet815 = setConstr(true);
var ConstSet816 = setConstr(true);
var ConstSet817 = setConstr(true);
var ConstSet818 = setConstr(true);
var ConstSet819 = setConstr(true);
var ConstSet820 = setConstr(true);
var ConstSet821 = setConstr(true);
var ConstSet822 = setConstr(false);
var ConstSet823 = setConstr(0);
var ConstSet824 = setConstr(false);
var ConstSet825 = setConstr(1);
var ConstSet826 = setConstr(1);
var ConstSet827 = setConstr(false);
var ConstSet828 = setConstr(1);
var ConstSet829 = setConstr(2);
var ConstSet830 = setConstr(false);
var ConstSet831 = setConstr(2, 3);
var ConstSet832 = setConstr(2, 3);
var ConstSet833 = setConstr(3);
var ConstSet834 = setConstr(false);
var ConstSet835 = setConstr(3);
var ConstSet836 = setConstr(false);
var ConstSet837 = setConstr(3);
var ConstSet838 = setConstr(false);
var ConstSet839 = setConstr(2, 3);
var ConstSet840 = setConstr(false);
var ConstSet841 = setConstr(false);
var ConstSet842 = setConstr(false);
var ConstSet843 = setConstr(false);
var ConstSet844 = setConstr(false);
var ConstSet845 = setConstr(false);
var ConstSet846 = setConstr(false);
var ConstSet847 = setConstr(false);
var ConstSet848 = setConstr(false);
var ConstSet849 = setConstr(false);
var ConstSet850 = setConstr(false);
var ConstSet851 = setConstr(false);
var ConstSet852 = setConstr(false);
var ConstSet853 = setConstr(false);
var ConstSet854 = setConstr(false);
var ConstSet855 = setConstr(false);
var ConstSet856 = setConstr(false);
var ConstSet857 = setConstr(false);
var ConstSet858 = setConstr(false);
    var npeg_ret_stack_size_10296126 = 1024;
    var npeg_back_stack_size_10296128 = 1024;
var ConstSet859 = setConstr(true);
var ConstSet860 = setConstr(true);
var ConstSet861 = setConstr(true);
var ConstSet862 = setConstr(true);
var ConstSet863 = setConstr(true);
var ConstSet864 = setConstr(true);
var ConstSet865 = setConstr(true);
var ConstSet866 = setConstr(false);
var ConstSet867 = setConstr(false);
var ConstSet868 = setConstr(false);
var ConstSet869 = setConstr(1);
var ConstSet870 = setConstr(false);
var ConstSet871 = setConstr(false);
var ConstSet872 = setConstr(false);
var ConstSet873 = setConstr(false);
var ConstSet874 = setConstr(false);
var ConstSet875 = setConstr(false);
var ConstSet876 = setConstr(false);
var ConstSet877 = setConstr(true);
var ConstSet878 = setConstr(true);
var ConstSet879 = setConstr(0);
var ConstSet880 = setConstr(true);
var ConstSet881 = setConstr(1);
var ConstSet882 = setConstr(true);
var ConstSet883 = setConstr(2);
var ConstSet884 = setConstr(true);
var ConstSet885 = setConstr(true);
var ConstSet886 = setConstr(true);
var ConstSet887 = setConstr(true);
var ConstSet888 = setConstr(true);
var ConstSet889 = setConstr(true);
var ConstSet890 = setConstr(true);
var ConstSet891 = setConstr(true);
var ConstSet892 = setConstr(true);
var ConstSet893 = setConstr(true);
var ConstSet894 = setConstr(true);
var ConstSet895 = setConstr(true);
var ConstSet896 = setConstr(true);
var ConstSet897 = setConstr(true);
var ConstSet898 = setConstr(true);
var ConstSet899 = setConstr(false);
var ConstSet900 = setConstr(0);
var ConstSet901 = setConstr(false);
var ConstSet902 = setConstr(1);
var ConstSet903 = setConstr(1);
var ConstSet904 = setConstr(false);
var ConstSet905 = setConstr(1);
var ConstSet906 = setConstr(2);
var ConstSet907 = setConstr(false);
var ConstSet908 = setConstr(2, 3);
var ConstSet909 = setConstr(2, 3);
var ConstSet910 = setConstr(3);
var ConstSet911 = setConstr(false);
var ConstSet912 = setConstr(3);
var ConstSet913 = setConstr(false);
var ConstSet914 = setConstr(3);
var ConstSet915 = setConstr(false);
var ConstSet916 = setConstr(2, 3);
var ConstSet917 = setConstr(false);
var ConstSet918 = setConstr(false);
var ConstSet919 = setConstr(false);
var ConstSet920 = setConstr(false);
var ConstSet921 = setConstr(false);
var ConstSet922 = setConstr(false);
var ConstSet923 = setConstr(false);
var ConstSet924 = setConstr(false);
var ConstSet925 = setConstr(false);
var ConstSet926 = setConstr(false);
var ConstSet927 = setConstr(false);
var ConstSet928 = setConstr(false);
var ConstSet929 = setConstr(false);
var ConstSet930 = setConstr(false);
var ConstSet931 = setConstr(false);
var ConstSet932 = setConstr(false);
var ConstSet933 = setConstr(false);
var ConstSet934 = setConstr(false);
var ConstSet935 = setConstr(false);
var ConstSet936 = setConstr(true);
var ConstSet937 = setConstr(true);
var ConstSet938 = setConstr(0);
var ConstSet939 = setConstr(true);
var ConstSet940 = setConstr(1);
var ConstSet941 = setConstr(true);
var ConstSet942 = setConstr(2);
var ConstSet943 = setConstr(true);
var ConstSet944 = setConstr(true);
var ConstSet945 = setConstr(true);
var ConstSet946 = setConstr(true);
var ConstSet947 = setConstr(true);
var ConstSet948 = setConstr(true);
var ConstSet949 = setConstr(true);
var ConstSet950 = setConstr(true);
var ConstSet951 = setConstr(true);
var ConstSet952 = setConstr(true);
var ConstSet953 = setConstr(true);
var ConstSet954 = setConstr(true);
var ConstSet955 = setConstr(true);
var ConstSet956 = setConstr(true);
var ConstSet957 = setConstr(true);
var ConstSet958 = setConstr(false);
var ConstSet959 = setConstr(0);
var ConstSet960 = setConstr(false);
var ConstSet961 = setConstr(1);
var ConstSet962 = setConstr(1);
var ConstSet963 = setConstr(false);
var ConstSet964 = setConstr(1);
var ConstSet965 = setConstr(2);
var ConstSet966 = setConstr(false);
var ConstSet967 = setConstr(2, 3);
var ConstSet968 = setConstr(2, 3);
var ConstSet969 = setConstr(3);
var ConstSet970 = setConstr(false);
var ConstSet971 = setConstr(3);
var ConstSet972 = setConstr(false);
var ConstSet973 = setConstr(3);
var ConstSet974 = setConstr(false);
var ConstSet975 = setConstr(2, 3);
var ConstSet976 = setConstr(false);
var ConstSet977 = setConstr(false);
var ConstSet978 = setConstr(false);
var ConstSet979 = setConstr(false);
var ConstSet980 = setConstr(false);
var ConstSet981 = setConstr(false);
var ConstSet982 = setConstr(false);
var ConstSet983 = setConstr(false);
var ConstSet984 = setConstr(false);
var ConstSet985 = setConstr(false);
var ConstSet986 = setConstr(false);
var ConstSet987 = setConstr(false);
var ConstSet988 = setConstr(false);
var ConstSet989 = setConstr(false);
var ConstSet990 = setConstr(false);
var ConstSet991 = setConstr(false);
var ConstSet992 = setConstr(false);
var ConstSet993 = setConstr(false);
var ConstSet994 = setConstr(false);
var ConstSet995 = setConstr(true);
var ConstSet996 = setConstr(false);
var ConstSet997 = setConstr(3);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_855031 = [0];
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
var empty_data_path_10270512 = [];
var refresh_all_10270524 = {paths: [nimCopy(null, empty_data_path_10270512, NTI10206031)]};
var components_10273124 = [{Field0: null}];
var state_12582005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_12845231 = [null];
var local_instance_12845232 = [null];
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__13373111 = 0;
      colontmp__13373111 = (i_160051 - 1);
      var res_13373116 = colontmp__13373111;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_13373116)) break L8;
            j_175236 = res_13373116;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_13373116 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function rotl_12582230(x_12582232, k_12582233) {
  var result_12582234 = 0;

  var F={procname:"random.rotl",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 122;
    result_12582234 = ((x_12582232 << k_12582233) | ((x_12582232 >>> 0) >>> ((64 - k_12582233) >>> 0)));
  framePtr = F.prev;

  return result_12582234;

}
function next_12582258(r_12582261) {
  var result_12582262 = 0;

  var F={procname:"random.next",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 139;
    var s0_12582263 = r_12582261.a0;
    F.line = 140;
    var s1_12582264 = r_12582261.a1;
    F.line = 141;
    result_12582262 = ((s0_12582263 + s1_12582264) >>> 0);
    F.line = 142;
    s1_12582264 = (s1_12582264 ^ s0_12582263);
    F.line = 143;
    r_12582261.a0 = ((rotl_12582230(s0_12582263, 55) ^ s1_12582264) ^ (s1_12582264 << 14));
    F.line = 144;
    r_12582261.a1 = rotl_12582230(s1_12582264, 36);
  framePtr = F.prev;

  return result_12582262;

}
function init_rand_12585612(seed_12585614) {
  var result_12585615 = [({a0: 0, a1: 0})];

  var F={procname:"random.initRand",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    if (!(!((seed_12585614 == 0)))) {
    F.line = 572;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/random.nim(572, 12) `seed != 0` "));
    }
    
    F.line = 573;
    result_12585615[0].a0 = (seed_12585614 >> 16);
    F.line = 574;
    result_12585615[0].a1 = (seed_12585614 & 65535);
    F.line = 575;
    next_12582258(result_12585615[0]);
  framePtr = F.prev;

  return result_12585615[0];

}
var rand_13373092 = [init_rand_12585612(1)];
var groups_component_13676195 = [null];
function set_text_13685072() {
    function HEX3Aanonymous_13685081(node_13685083, text_13685084) {
      var F={procname:"setText.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 249;
        node_13685083.textContent = toJSStr(text_13685084);
      framePtr = F.prev;

      
    }

  var result_13685080 = null;

  var F={procname:"setText.setText",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 249;
    result_13685080 = HEX3Aanonymous_13685081;
  framePtr = F.prev;

  return result_13685080;

}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function is_changed_10240207(set_10240209) {
    var Tmp1;

  var result_10240210 = false;

  var F={procname:"nclearseam.is_changed",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 316;
    if ((set_10240209 == null)) Tmp1 = true; else {      Tmp1 = (0 < (set_10240209.paths != null ? set_10240209.paths.length : 0));    }    result_10240210 = Tmp1;
  framePtr = F.prev;

  return result_10240210;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function HEX26_13760256(x_13760260, y_13760262) {
  var result_13760264 = null;

  var F={procname:"&.&",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1599;
    result_13760264 = new Array(chckRange(addInt((x_13760260 != null ? x_13760260.length : 0), (y_13760262 != null ? y_13760262.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_13760260 != null ? x_13760260.length : 0), (y_13760262 != null ? y_13760262.length : 0)), 0, 2147483647);++i) {result_13760264[i]=null;}    L1: do {
      F.line = 1600;
      var i_13760295 = 0;
      F.line = 66;
      var colontmp__14194577 = 0;
      F.line = 1600;
      colontmp__14194577 = subInt((x_13760260 != null ? x_13760260.length : 0), 1);
      F.line = 77;
      var res_14194578 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14194578 <= colontmp__14194577)) break L3;
            F.line = 1600;
            i_13760295 = res_14194578;
            F.line = 1601;
            result_13760264[chckIndx(i_13760295, 0, (result_13760264 != null ? result_13760264.length : 0)+0-1)-0] = nimCopy(null, x_13760260[chckIndx(i_13760295, 0, (x_13760260 != null ? x_13760260.length : 0)+0-1)-0], NTI112);
            F.line = 80;
            res_14194578 = addInt(res_14194578, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 1602;
      var i_13760309 = 0;
      F.line = 66;
      var colontmp__14194584 = 0;
      F.line = 1602;
      colontmp__14194584 = subInt((y_13760262 != null ? y_13760262.length : 0), 1);
      F.line = 77;
      var res_14194585 = 0;
      L5: do {
        F.line = 78;
          L6: while (true) {
          if (!(res_14194585 <= colontmp__14194584)) break L6;
            F.line = 1602;
            i_13760309 = res_14194585;
            F.line = 1603;
            result_13760264[chckIndx(addInt(i_13760309, (x_13760260 != null ? x_13760260.length : 0)), 0, (result_13760264 != null ? result_13760264.length : 0)+0-1)-0] = nimCopy(null, y_13760262[chckIndx(i_13760309, 0, (y_13760262 != null ? y_13760262.length : 0)+0-1)-0], NTI112);
            F.line = 80;
            res_14194585 = addInt(res_14194585, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_13760264;

}
function sub_14165394(ts_14165399, val_14165401, val_14165401_Idx, set_val_14165403, update_14165404) {
    function HEX3Aanonymous_14165417(new_value_14165419, changed_path_14165421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_14165399.set(val_14165401, val_14165401_Idx, new_value_14165419);
        F.line = 360;
        var new_paths_14165423 = null;
        L1: do {
          F.line = 361;
          var p_14165430 = null;
          F.line = 184;
          var i_14194572 = 0;
          F.line = 185;
          var l_14194573 = (changed_path_14165421 != null ? changed_path_14165421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14194572 < l_14194573)) break L3;
                F.line = 361;
                p_14165430 = changed_path_14165421[chckIndx(i_14194572, 0, (changed_path_14165421 != null ? changed_path_14165421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_14165423 != null) { new_paths_14165423.push(HEX26_13760256(ts_14165399.id, p_14165430)); } else { new_paths_14165423 = [HEX26_13760256(ts_14165399.id, p_14165430)]; };
                F.line = 188;
                i_14194572 = addInt(i_14194572, 1);
                if (!(((changed_path_14165421 != null ? changed_path_14165421.length : 0) == l_14194573))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_14165403 == null))) {
        F.line = 364;
        set_val_14165403(val_14165401[val_14165401_Idx], new_paths_14165423);
        }
        else {
        if (!((update_14165404 == null))) {
        F.line = 367;
        update_14165404({paths: nimCopy(null, new_paths_14165423, NTI14165422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_14165406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_14165403 == null) && (update_14165404 == null))) {
    F.line = 357;
    result_14165406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_14165406 = HEX3Aanonymous_14165417;
  } while (false);
  framePtr = F.prev;

  return result_14165406;

}
function HEX5BHEX5D_10270021(s_10270027, x_10270029) {
  var result_10270031 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2492;
    var a_10270201 = x_10270029.a;
    F.line = 2493;
    var l_10270405 = addInt(subInt(subInt((s_10270027 != null ? s_10270027.length : 0), x_10270029.b), a_10270201), 1);
    F.line = 2494;
    result_10270031 = new Array(chckRange(l_10270405, 0, 2147483647)); for (var i=0;i<chckRange(l_10270405, 0, 2147483647);++i) {result_10270031[i]=null;}    L1: do {
      F.line = 2495;
      var i_10270420 = 0;
      F.line = 106;
      var i_14194608 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14194608 < l_10270405)) break L3;
            F.line = 2495;
            i_10270420 = i_14194608;
            F.line = 2495;
            result_10270031[chckIndx(i_10270420, 0, (result_10270031 != null ? result_10270031.length : 0)+0-1)-0] = nimCopy(null, s_10270027[chckIndx(addInt(i_10270420, a_10270201), 0, (s_10270027 != null ? s_10270027.length : 0)+0-1)-0], NTI112);
            F.line = 109;
            i_14194608 = addInt(i_14194608, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10270031;

}
function HEX2EHEX2E_4860001(a_4860006, b_4860008) {
  var result_4860014 = ({a: 0, b: 0});

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4860014, {a: a_4860006, b: b_4860008}, NTI4860011);
  framePtr = F.prev;

  return result_4860014;

}
function walk_10245019(set_10245021, path_10245022) {
  var result_10245023 = null;

  var F={procname:"nclearseam.walk",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((set_10245021 == null)) {
    F.line = 321;
    result_10245023 = null;
    break BeforeRet;
    }
    
    F.line = 322;
    result_10245023 = {paths: []};
    L1: do {
      F.line = 323;
      var old_path_10245053 = null;
      F.line = 184;
      var i_14194602 = 0;
      F.line = 185;
      var l_14194603 = (set_10245021.paths != null ? set_10245021.paths.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14194602 < l_14194603)) break L3;
            F.line = 323;
            old_path_10245053 = set_10245021.paths[chckIndx(i_14194602, 0, (set_10245021.paths != null ? set_10245021.paths.length : 0)+0-1)-0];
            L4: do {
              F.line = 325;
              var new_path_10245070 = [];
              L5: do {
                F.line = 326;
                var i_10245084 = 0;
                F.line = 66;
                var colontmp__14194595 = 0;
                F.line = 326;
                colontmp__14194595 = subInt((path_10245022 != null ? path_10245022.length : 0), 1);
                F.line = 77;
                var res_14194596 = 0;
                L6: do {
                  F.line = 78;
                    L7: while (true) {
                    if (!(res_14194596 <= colontmp__14194595)) break L7;
                      F.line = 326;
                      i_10245084 = res_14194596;
                      if (((old_path_10245053 != null ? old_path_10245053.length : 0) <= i_10245084)) {
                      F.line = 328;
                      break L5;
                      }
                      
                      if (!(eqStrings(path_10245022[chckIndx(i_10245084, 0, (path_10245022 != null ? path_10245022.length : 0)+0-1)-0], old_path_10245053[chckIndx(i_10245084, 0, (old_path_10245053 != null ? old_path_10245053.length : 0)+0-1)-0]))) {
                      F.line = 330;
                      break L4;
                      }
                      
                      F.line = 80;
                      res_14194596 = addInt(res_14194596, 1);
                    }
                } while(false);
              } while(false);
              if (((path_10245022 != null ? path_10245022.length : 0) < (old_path_10245053 != null ? old_path_10245053.length : 0))) {
              F.line = 332;
              new_path_10245070 = nimCopy(null, HEX5BHEX5D_10270021(old_path_10245053, HEX2EHEX2E_4860001((path_10245022 != null ? path_10245022.length : 0), 1)), NTI10270030);
              }
              
              F.line = 333;
              var Tmp8 = nimCopy(null, new_path_10245070, NTI10206031);
              if (result_10245023.paths != null) { result_10245023.paths.push(Tmp8); } else { result_10245023.paths = [Tmp8]; };
            } while(false);
            F.line = 188;
            i_14194602 = addInt(i_14194602, 1);
            if (!(((set_10245021.paths != null ? set_10245021.paths.length : 0) == l_14194603))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  } while (false);
  framePtr = F.prev;

  return result_10245023;

}
function add_14115218(x_14115223, x_14115223_Idx, y_14115225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_14115231 = (x_14115223[x_14115223_Idx] != null ? x_14115223[x_14115223_Idx].length : 0);
    F.line = 1209;
    if (x_14115223[x_14115223_Idx] === null) x_14115223[x_14115223_Idx] = [];
               if (x_14115223[x_14115223_Idx].length < (Tmp1 = chckRange(addInt(xl_14115231, (y_14115225 != null ? y_14115225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_14115223[x_14115223_Idx].length;i<Tmp1;++i) x_14115223[x_14115223_Idx].push(null); }
               else { x_14115223[x_14115223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_14115256 = 0;
      F.line = 66;
      var colontmp__14194619 = 0;
      F.line = 1210;
      colontmp__14194619 = (y_14115225 != null ? (y_14115225.length-1) : -1);
      F.line = 77;
      var res_14194620 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_14194620 <= colontmp__14194619)) break L4;
            F.line = 1210;
            i_14115256 = res_14194620;
            F.line = 1210;
            x_14115223[x_14115223_Idx][chckIndx(addInt(xl_14115231, i_14115256), 0, (x_14115223[x_14115223_Idx] != null ? x_14115223[x_14115223_Idx].length : 0)+0-1)-0] = y_14115225[chckIndx(i_14115256, 0, (y_14115225 != null ? y_14115225.length : 0)+0-1)-0];
            F.line = 80;
            res_14194620 = addInt(res_14194620, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_14165586(cfgs_14165591, node_14165592) {
  var result_14165595 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_14165595[0] = nimCopy(null, [], NTI14165610);
    L1: do {
      F.line = 658;
      var cfg_14165617 = null;
      F.line = 184;
      var i_14194615 = 0;
      F.line = 185;
      var l_14194616 = (cfgs_14165591 != null ? cfgs_14165591.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14194615 < l_14194616)) break L3;
            F.line = 658;
            cfg_14165617 = cfgs_14165591[chckIndx(i_14194615, 0, (cfgs_14165591 != null ? cfgs_14165591.length : 0)+0-1)-0];
            F.line = 659;
            add_14115218(result_14165595, 0, cfg_14165617.compile(node_14165592));
            F.line = 188;
            i_14194615 = addInt(i_14194615, 1);
            if (!(((cfgs_14165591 != null ? cfgs_14165591.length : 0) == l_14194616))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14165595[0];

}
function create_iter_item_14165520(match_14165525, parent_node_14165526) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_14165528 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_14165533 = null;
    F.line = 683;
    var node_14165534 = null;
      var Tmp1 = match_14165525;
      if (ConstSet15[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_14165525;
    if (ConstSet16[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_14165533 = Tmp2.mount_template.clone();
    F.line = 686;
    node_14165534 = comp_14165533.node();
    }
    else {
      F.line = 688;
      node_14165534 = match_14165525.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_14165525;
    if (ConstSet17[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_14165528 = {serial: 0, mount: comp_14165533, node: node_14165534, matches: compile_14165586(Tmp3.match_templates, node_14165534), skip: false};
    F.line = 694;
    var Tmp4 = match_14165525;
    if (ConstSet18[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_14165526.insertBefore(node_14165534, Tmp4.anchor);
  framePtr = F.prev;

  return result_14165528;

}
function is_changed_10270456(set_10270458, criteria_10270459) {
  var result_10270460 = false;

  var F={procname:"nclearseam.is_changed",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((set_10270458 == null)) {
    F.line = 339;
    result_10270460 = is_changed_10240207(criteria_10270459);
    break BeforeRet;
    }
    
    if ((criteria_10270459 == null)) {
    F.line = 341;
    result_10270460 = is_changed_10240207(set_10270458);
    break BeforeRet;
    }
    
    L1: do {
      F.line = 343;
      var crit_path_10270483 = null;
      F.line = 184;
      var i_14194626 = 0;
      F.line = 185;
      var l_14194627 = (criteria_10270459.paths != null ? criteria_10270459.paths.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14194626 < l_14194627)) break L3;
            F.line = 343;
            crit_path_10270483 = criteria_10270459.paths[chckIndx(i_14194626, 0, (criteria_10270459.paths != null ? criteria_10270459.paths.length : 0)+0-1)-0];
            if (is_changed_10240207(walk_10245019(set_10270458, crit_path_10270483))) {
            F.line = 345;
            result_10270460 = true;
            break BeforeRet;
            }
            
            F.line = 188;
            i_14194626 = addInt(i_14194626, 1);
            if (!(((criteria_10270459.paths != null ? criteria_10270459.paths.length : 0) == l_14194627))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 347;
    result_10270460 = false;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10270460;

}
function detach_14185493(iter_item_14185497, parent_node_14185498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_14185498.removeChild(iter_item_14185497.node);
  framePtr = F.prev;

  
}
function pop_14185243(s_14185248, s_14185248_Idx) {
  var result_14185249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_14185255 = subInt((s_14185248[s_14185248_Idx] != null ? s_14185248[s_14185248_Idx].length : 0), 1);
    F.line = 1784;
    result_14185249 = s_14185248[s_14185248_Idx][chckIndx(l_14185255, 0, (s_14185248[s_14185248_Idx] != null ? s_14185248[s_14185248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_14185248[s_14185248_Idx] === null) s_14185248[s_14185248_Idx] = [];
               if (s_14185248[s_14185248_Idx].length < chckRange(l_14185255, 0, 2147483647)) { for (var i=s_14185248[s_14185248_Idx].length;i<chckRange(l_14185255, 0, 2147483647);++i) s_14185248[s_14185248_Idx].push(null); }
               else { s_14185248[s_14185248_Idx].length = chckRange(l_14185255, 0, 2147483647); };
  framePtr = F.prev;

  return result_14185249;

}
function update_do_14136216(match_14136221, init_val_14136222, set_val_14136224, refresh_list_14136225) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_14145261() {
            var result_14145263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_14145263 = nimCopy(null, item_14145252, NTI13586042);
            framePtr = F.prev;

            return result_14145263;

          }
          var Tmp16;
            function HEX3Aanonymous_14145281(new_value_14145283, path_14145300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_14145301 = mnewString(0);
                F.line = 747;
                if (fmt_res_14145301 != null) { fmt_res_14145301 = (fmt_res_14145301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_14145301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_14145301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14155017(new_value_14155019, path_14155036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_14155037 = mnewString(0);
                F.line = 754;
                if (fmt_res_14155037 != null) { fmt_res_14155037 = (fmt_res_14155037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_14155037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_14155037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14165050(refresh_list_14165052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_14135886(match_14136221, val_14145201[0], set_val_14136224, refresh_list_14165052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_14185524() {
        var result_14185526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_14185526 = nimCopy(null, converted_val_14185515, NTI13586042);
        framePtr = F.prev;

        return result_14185526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_14185606(refresh_list_14185608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_14135886(match_14136221, val_14145201[0], set_val_14136224, refresh_list_14185608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_14136224 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_14145201 = [nimCopy(null, init_val_14136222, NTI13586042)];
    if (match_14136221.iter) {
    F.line = 720;
    var i_14145203 = 0;
    F.line = 721;
    var Tmp1 = match_14136221;
    if (ConstSet2[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_14145206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_14145207 = null;
    F.line = 723;
    var it_simple_14145212 = null;
    F.line = 724;
    var it_serial_14145217 = null;
    F.line = 725;
    var it_select_14145225 = null;
    F.line = 726;
    var Tmp2 = match_14136221;
    if (ConstSet3[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_14136221;
      if (ConstSet5[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet4[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_14145212 = Tmp4.simple(val_14145201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_14136221;
      if (ConstSet7[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet6[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_14145217 = Tmp6.serial(val_14145201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_14136221;
      if (ConstSet9[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet8[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_14145225 = Tmp8.selector(val_14145201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_14136221;
            if (ConstSet10[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14145203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_14136221;
          if (ConstSet11[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_14145203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_14145250 = [Tmp11];
          F.line = 736;
          var changed_14145251 = is_changed_10240207(refresh_list_14136225);
          F.line = 737;
          var item_14145252 = null;
          F.line = 738;
          var accessor_14145277 = {get: HEX3Aanonymous_14145261, set: null, m_type: NTI13685014};
          F.line = 741;
          var Tmp16 = match_14136221;
          if (ConstSet12[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_14145280 = it_simple_14145212();
            if ((it_14145280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_14145252 = nimCopy(null, it_14145280["Field1"], NTI13586042);
            F.line = 746;
            accessor_14145277.set = HEX3Aanonymous_14145281;
            break;
          case 1:
            F.line = 750;
            var it_14155016 = it_serial_14145217(serial_14145250, 0);
            if ((it_14155016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_14145252 = nimCopy(null, it_14155016["Field1"], NTI13586042);
            F.line = 753;
            accessor_14145277.set = HEX3Aanonymous_14155017;
            break;
          case 2:
            F.line = 757;
            var it_14165015 = it_select_14145225();
            if ((it_14165015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_14145252 = nimCopy(null, it_14165015.get(val_14145201[0]), NTI13586042);
            F.line = 760;
            accessor_14145277.set = sub_14165394(it_14165015, val_14145201, 0, set_val_14136224, HEX3Aanonymous_14165050);
            F.line = 762;
            sub_list_14145207 = walk_10245019(refresh_list_14136225, it_14165015.id);
            F.line = 763;
            changed_14145251 = is_changed_10240207(sub_list_14145207);
            break;
          }
          F.line = 766;
          var iter_item_14165503 = null;
          F.line = 767;
          var inited_14165504 = false;
            var Tmp17 = match_14136221;
            if (ConstSet13[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14145203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_14136221;
          if (ConstSet14[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_14165503 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_14145203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_14165504 = true;
          F.line = 773;
          changed_14145251 = true;
          }
          else {
            F.line = 775;
            iter_item_14165503 = create_iter_item_14165520(match_14136221, parent_node_14145206);
            F.line = 776;
            var Tmp21 = match_14136221;
            if (ConstSet19[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_14165503); } else { Tmp22 = [iter_item_14165503]; };
            F.line = 777;
            inited_14165504 = false;
            if (!((serial_14145250[0] == iter_item_14165503.serial))) {
            F.line = 779;
            changed_14145251 = true;
            }
            
          }
          
          F.line = 782;
          var e_14165687 = {get: accessor_14145277.get, set: accessor_14145277.set, node: iter_item_14165503.node, data: nimCopy(null, item_14145252, NTI13586042), init: !(inited_14165504), before: true, skip: iter_item_14165503.skip, m_type: NTI13685010};
          L23: do {
            F.line = 790;
            var refresh_14175214 = null;
            F.line = 184;
            var i_14194537 = 0;
            F.line = 185;
            var l_14194538 = (match_14136221.refresh != null ? match_14136221.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_14194537 < l_14194538)) break L25;
                  F.line = 790;
                  refresh_14175214 = match_14136221.refresh[chckIndx(i_14194537, 0, (match_14136221.refresh != null ? match_14136221.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_14175215 = refresh_14175214.before;
                    if (!exec_14175215) Tmp26 = false; else {                      var Tmp27 = match_14136221;
                      if (ConstSet20[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_14175215 = is_changed_10270456(sub_list_14145207, refresh_14175214.reads);
                  }
                  
                    if (exec_14175215) Tmp28 = true; else {                      if (!!(inited_14165504)) Tmp29 = false; else {                        Tmp29 = refresh_14175214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_14165687.data = nimCopy(null, item_14145252, NTI13586042);
                  F.line = 796;
                  refresh_14175214.refresh(e_14165687);
                  F.line = 797;
                  iter_item_14165503.skip = e_14165687.skip;
                  }
                  
                  F.line = 188;
                  i_14194537 = addInt(i_14194537, 1);
                  if (!(((match_14136221.refresh != null ? match_14136221.refresh.length : 0) == l_14194538))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_14165503.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_14165503.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_14165503.mount.update(item_14145252, accessor_14145277.set, sub_list_14145207);
          }
          
          if (!(iter_item_14165503.skip)) {
          L31: do {
            F.line = 805;
            var submatch_14185214 = null;
            F.line = 184;
            var i_14194542 = 0;
            F.line = 185;
            var l_14194543 = (iter_item_14165503.matches != null ? iter_item_14165503.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_14194542 < l_14194543)) break L33;
                  F.line = 805;
                  submatch_14185214 = iter_item_14165503.matches[chckIndx(i_14194542, 0, (iter_item_14165503.matches != null ? iter_item_14165503.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_14185214.update(item_14145252, accessor_14145277.set, sub_list_14145207);
                  F.line = 188;
                  i_14194542 = addInt(i_14194542, 1);
                  if (!(((iter_item_14165503.matches != null ? iter_item_14165503.matches.length : 0) == l_14194543))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_14165687 = {get: accessor_14145277.get, set: accessor_14145277.set, node: iter_item_14165503.node, data: nimCopy(null, item_14145252, NTI13586042), init: !(inited_14165504), before: false, skip: iter_item_14165503.skip, m_type: NTI13685010};
          L34: do {
            F.line = 817;
            var refresh_14185225 = null;
            F.line = 184;
            var i_14194547 = 0;
            F.line = 185;
            var l_14194548 = (match_14136221.refresh != null ? match_14136221.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_14194547 < l_14194548)) break L36;
                  F.line = 817;
                  refresh_14185225 = match_14136221.refresh[chckIndx(i_14194547, 0, (match_14136221.refresh != null ? match_14136221.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_14185226 = refresh_14185225.after;
                    if (!exec_14185226) Tmp37 = false; else {                      var Tmp38 = match_14136221;
                      if (ConstSet21[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_14185226 = is_changed_10270456(sub_list_14145207, refresh_14185225.reads);
                  }
                  
                  if (exec_14185226) {
                  F.line = 822;
                  e_14165687.data = nimCopy(null, item_14145252, NTI13586042);
                  F.line = 823;
                  refresh_14185225.refresh(e_14165687);
                  F.line = 824;
                  iter_item_14165503.skip = e_14165687.skip;
                  }
                  
                  F.line = 188;
                  i_14194547 = addInt(i_14194547, 1);
                  if (!(((match_14136221.refresh != null ? match_14136221.refresh.length : 0) == l_14194548))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_14145203 = addInt(i_14145203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_14136221;
          if (ConstSet22[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_14145203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_14136221;
          if (ConstSet23[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_14185493(pop_14185243(Tmp43, "items"), parent_node_14145206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_14185512 = is_changed_10240207(refresh_list_14136225);
      F.line = 833;
      var sub_list_14185513 = null;
      F.line = 834;
      var node_14185514 = match_14136221.node;
      F.line = 835;
      var converted_val_14185515 = null;
      F.line = 836;
      var accessor_14185540 = {get: HEX3Aanonymous_14185524, set: null, m_type: NTI13685014};
      F.line = 840;
      var Tmp44 = match_14136221;
      if (ConstSet24[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_14136221;
        if (ConstSet26[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet25[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14185515 = nimCopy(null, Tmp46.simple(val_14145201[0]), NTI13586042);
        F.line = 843;
        changed_14185512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_14136221;
        if (ConstSet27[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_14185548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_14136221;
        if (ConstSet29[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet28[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14185515 = nimCopy(null, Tmp49.serial(val_14145201[0], serial_14185548, 0), NTI13586042);
          var Tmp50 = match_14136221;
          if (ConstSet30[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_14185548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_14185512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_14136221;
        if (ConstSet32[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet31[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_14136221;
        if (ConstSet33[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_14185560 = Tmp52.compare(val_14145201[0], Tmp53.value);
        F.line = 853;
        converted_val_14185515 = nimCopy(null, res_14185560.Field0, NTI13586042);
        var Tmp54 = match_14136221;
        if (ConstSet34[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = nimCopy(null, res_14185560.Field0, NTI13586042);
        if (res_14185560.Field1) {
        F.line = 856;
        changed_14185512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_14136221;
        if (ConstSet36[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet35[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_14185566 = Tmp56.obj;
        F.line = 860;
        converted_val_14185515 = nimCopy(null, obj_14185566.get(val_14145201[0]), NTI13586042);
        F.line = 861;
        sub_list_14185513 = walk_10245019(refresh_list_14136225, obj_14185566.id);
        F.line = 862;
        changed_14185512 = is_changed_10240207(sub_list_14185513);
          if (!changed_14185512) Tmp57 = false; else {            var Tmp58 = match_14136221;
            if (ConstSet38[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet37[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_14136221;
        if (ConstSet40[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet39[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_14136221;
        if (ConstSet41[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_14185512 = !(Tmp61.eql(converted_val_14185515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_14185540.set = sub_14165394(obj_14185566, val_14145201, 0, set_val_14136224, HEX3Aanonymous_14185606);
        break;
      }
        var Tmp64 = match_14136221;
        if (ConstSet42[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_14136221;
          if (ConstSet43[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_14136221;
      if (ConstSet44[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_14136221;
      if (ConstSet45[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_14136221;
      if (ConstSet46[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14185514.parentNode.replaceChild(Tmp68.mount.node(), node_14185514);
      }
      
      F.line = 875;
      var Tmp69 = match_14136221;
      if (ConstSet47[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_14185991 = Tmp69.inited;
      if (!(inited_14185991)) {
      F.line = 876;
      changed_14185512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_14136221;
      if (ConstSet48[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14185998 = {get: accessor_14185540.get, set: accessor_14185540.set, node: node_14185514, data: nimCopy(null, converted_val_14185515, NTI13586042), init: !(inited_14185991), before: changed_14185512, skip: Tmp70.skip, m_type: NTI13685010};
      L71: do {
        F.line = 885;
        var refresh_14186005 = null;
        F.line = 184;
        var i_14194554 = 0;
        F.line = 185;
        var l_14194555 = (match_14136221.refresh != null ? match_14136221.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_14194554 < l_14194555)) break L73;
              F.line = 885;
              refresh_14186005 = match_14136221.refresh[chckIndx(i_14194554, 0, (match_14136221.refresh != null ? match_14136221.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_14186006 = changed_14185512;
                if (!exec_14186006) Tmp74 = false; else {                  var Tmp75 = match_14136221;
                  if (ConstSet49[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_14186006 = is_changed_10270456(sub_list_14185513, refresh_14186005.reads);
              }
              
              F.line = 891;
              if (!refresh_14186005.before) Tmp77 = false; else {                Tmp77 = (exec_14186006 || !(inited_14185991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_14186005.init) Tmp78 = false; else {                  Tmp78 = !(inited_14185991);                }                Tmp76 = Tmp78;              }              exec_14186006 = Tmp76;
              if (exec_14186006) {
              F.line = 893;
              e_14185998.data = nimCopy(null, converted_val_14185515, NTI13586042);
              F.line = 894;
              refresh_14186005.refresh(e_14185998);
              var Tmp79 = match_14136221;
              if (ConstSet50[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_14185998.skip;
              }
              
              F.line = 188;
              i_14194554 = addInt(i_14194554, 1);
              if (!(((match_14136221.refresh != null ? match_14136221.refresh.length : 0) == l_14194555))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_14185991)) {
      var Tmp80 = match_14136221;
      if (ConstSet51[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_14185512) Tmp82 = false; else {          var Tmp83 = match_14136221;
          if (ConstSet52[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_14136221;
          if (ConstSet53[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_14136221;
      if (ConstSet54[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14185514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_14136221;
      if (ConstSet55[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_14185515, accessor_14185540.set, sub_list_14185513);
      }
      
        if (!changed_14185512) Tmp87 = false; else {          var Tmp88 = match_14136221;
          if (ConstSet56[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_14186044 = null;
        F.line = 182;
        var colontmp__14194558 = null;
        F.line = 906;
        var Tmp90 = match_14136221;
        if (ConstSet57[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__14194558 = Tmp90.matches;
        F.line = 184;
        var i_14194559 = 0;
        F.line = 185;
        var l_14194560 = (colontmp__14194558 != null ? colontmp__14194558.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_14194559 < l_14194560)) break L92;
              F.line = 906;
              submatch_14186044 = colontmp__14194558[chckIndx(i_14194559, 0, (colontmp__14194558 != null ? colontmp__14194558.length : 0)+0-1)-0];
              F.line = 907;
              submatch_14186044.update(converted_val_14185515, accessor_14185540.set, sub_list_14185513);
              F.line = 188;
              i_14194559 = addInt(i_14194559, 1);
              if (!(((colontmp__14194558 != null ? colontmp__14194558.length : 0) == l_14194560))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_14185512) {
      F.line = 910;
      var Tmp93 = match_14136221;
      if (ConstSet58[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14186051 = {get: accessor_14185540.get, set: accessor_14185540.set, node: node_14185514, data: nimCopy(null, converted_val_14185515, NTI13586042), init: !(inited_14185991), before: false, skip: Tmp93.skip, m_type: NTI13685010};
      L94: do {
        F.line = 918;
        var refresh_14186058 = null;
        F.line = 184;
        var i_14194564 = 0;
        F.line = 185;
        var l_14194565 = (match_14136221.refresh != null ? match_14136221.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_14194564 < l_14194565)) break L96;
              F.line = 918;
              refresh_14186058 = match_14136221.refresh[chckIndx(i_14194564, 0, (match_14136221.refresh != null ? match_14136221.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_14186059 = refresh_14186058.after;
                if (!exec_14186059) Tmp97 = false; else {                  var Tmp98 = match_14136221;
                  if (ConstSet59[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_14186059 = is_changed_10270456(sub_list_14185513, refresh_14186058.reads);
              }
              
              if (exec_14186059) {
              F.line = 923;
              e_14186051.data = nimCopy(null, converted_val_14185515, NTI13586042);
              F.line = 924;
              refresh_14186058.refresh(e_14186051);
              var Tmp99 = match_14136221;
              if (ConstSet60[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_14186051.skip;
              }
              
              F.line = 188;
              i_14194564 = addInt(i_14194564, 1);
              if (!(((match_14136221.refresh != null ? match_14136221.refresh.length : 0) == l_14194565))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function is_power_of_two_955029(x_955031) {
    var Tmp1;

  var result_955032 = false;

  BeforeRet: do {
    if (!(0 < x_955031)) Tmp1 = false; else {      Tmp1 = ((x_955031 & (x_955031 - 1)) == 0);    }    result_955032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_955032;

}
function new_seq_13930602(len_13930605) {
  var result_13930607 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_13930607 = new Array(len_13930605); for (var i=0;i<len_13930605;++i) {result_13930607[i]=null;}  framePtr = F.prev;

  return result_13930607;

}
function expand_if_needed_13906278(deq_13906283) {
              var Tmp5;
    var Tmp6;

  var F={procname:"expandIfNeeded.expandIfNeeded",prev:framePtr,filename:"deques.nim",line:0};
  framePtr = F;
    if ((deq_13906283.mask == 0)) {
    if (!(is_power_of_two_955029(4))) {
    F.line = 69;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/deques.nim(69, 10) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 70;
    deq_13906283.mask = 3;
    F.line = 76;
    deq_13906283.data = new Array(4); for (var i=0;i<4;++i) {deq_13906283.data[i]=null;}    }
    
    F.line = 273;
    var cap_13925401 = addInt(deq_13906283.mask, 1);
    if ((cap_13925401 <= deq_13906283.count)) {
    F.line = 275;
    var n_13930658 = new_seq_13930602(chckRange(mulInt(cap_13925401, 2), 0, 2147483647));
    F.line = 276;
    var i_13930660 = 0;
    L1: do {
      F.line = 277;
      var x_13930695 = null;
      var x_13930695_Idx = 0;
      F.line = 231;
      var i_14194633 = deq_13906283.head;
      L2: do {
        F.line = 232;
        var c_14194635 = 0;
        F.line = 106;
        var i_14194636 = 0;
        L3: do {
          F.line = 107;
            L4: while (true) {
            if (!(i_14194636 < deq_13906283.count)) break L4;
              F.line = 232;
              c_14194635 = i_14194636;
              F.line = 277;
              x_13930695 = deq_13906283.data; x_13930695_Idx = chckIndx(i_14194633, 0, (deq_13906283.data != null ? deq_13906283.data.length : 0)+0-1)-0;
              F.line = 279;
              Tmp5 = x_13930695[x_13930695_Idx];
              x_13930695[x_13930695_Idx] = genericReset(x_13930695[x_13930695_Idx], NTI10206392);
              n_13930658[chckIndx(i_13930660, 0, (n_13930658 != null ? n_13930658.length : 0)+0-1)-0] = Tmp5;
              F.line = 280;
              i_13930660 = addInt(i_13930660, 1);
              F.line = 234;
              i_14194633 = (addInt(i_14194633, 1) & deq_13906283.mask);
              F.line = 109;
              i_14194636 = addInt(i_14194636, 1);
            }
        } while(false);
      } while(false);
    } while(false);
    F.line = 281;
    Tmp6 = n_13930658;
    n_13930658 = genericReset(n_13930658, NTI13930606);
    deq_13906283.data = nimCopy(null, Tmp6, NTI13930606);
    F.line = 282;
    deq_13906283.mask = subInt(mulInt(cap_13925401, 2), 1);
    F.line = 283;
    deq_13906283.tail = deq_13906283.count;
    F.line = 284;
    deq_13906283.head = 0;
    }
    
  framePtr = F.prev;

  
}
function add_last_13906260(deq_13906265, item_13906266) {
  var F={procname:"addLast.addLast",prev:framePtr,filename:"deques.nim",line:0};
  framePtr = F;
    F.line = 321;
    expand_if_needed_13906278(deq_13906265);
    F.line = 322;
    deq_13906265.count = addInt(deq_13906265.count, 1);
    F.line = 323;
    deq_13906265.data[chckIndx(deq_13906265.tail, 0, (deq_13906265.data != null ? deq_13906265.data.length : 0)+0-1)-0] = item_13906266;
    F.line = 324;
    deq_13906265.tail = (addInt(deq_13906265.tail, 1) & deq_13906265.mask);
  framePtr = F.prev;

  
}
function init_deque_13931106(initial_size_13931109) {
  var result_13931111 = ({data: null, head: 0, tail: 0, count: 0, mask: 0});

  var F={procname:"initDeque.initDeque",prev:framePtr,filename:"deques.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_955029(initial_size_13931109))) {
    F.line = 69;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/deques.nim(69, 10) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 70;
    result_13931111.mask = subInt(initial_size_13931109, 1);
    F.line = 89;
    result_13931111.data = new Array(chckRange(initial_size_13931109, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_13931109, 0, 2147483647);++i) {result_13931111.data[i]=null;}  framePtr = F.prev;

  return result_13931111;

}
function len_13945268(deq_13945272) {
  var result_13945273 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"deques.nim",line:0};
  framePtr = F;
    F.line = 93;
    result_13945273 = deq_13945272.count;
  framePtr = F.prev;

  return result_13945273;

}
function reset_13960016(obj_13960020, obj_13960020_Idx) {
  var F={procname:"reset.reset",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 919;
    obj_13960020[obj_13960020_Idx] = null;
  framePtr = F.prev;

  
}
function pop_first_13950047(deq_13950052) {
  var result_13950053 = null;

  var F={procname:"popFirst.popFirst",prev:framePtr,filename:"deques.nim",line:0};
  framePtr = F;
    if ((deq_13950052.count < 1)) {
    F.line = 99;
    raiseException({message: makeNimstrLit("Empty deque."), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");
    }
    
    F.line = 389;
    deq_13950052.count = subInt(deq_13950052.count, 1);
    F.line = 390;
    result_13950053 = deq_13950052.data[chckIndx(deq_13950052.head, 0, (deq_13950052.data != null ? deq_13950052.data.length : 0)+0-1)-0];
    F.line = 391;
    reset_13960016(deq_13950052.data, chckIndx(deq_13950052.head, 0, (deq_13950052.data != null ? deq_13950052.data.length : 0)+0-1)-0);
    F.line = 392;
    deq_13950052.head = (addInt(deq_13950052.head, 1) & deq_13950052.mask);
  framePtr = F.prev;

  return result_13950053;

}
function update_14135886(match_14135891, init_val_14135892, set_val_14135894, refresh_list_14135895) {
    init_val_14135892 = nimCopy(null, init_val_14135892, NTI13586042);
    function HEX3Aanonymous_14135896() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_14136216(match_14135891, init_val_14135892, set_val_14135894, refresh_list_14135895);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_14186240 = HEX3Aanonymous_14135896;
    if (!((match_14135891.runner == null))) {
    F.line = 706;
    add_last_13906260(match_14135891.runner.fifo, run_14186240);
    }
    else {
      F.line = 708;
      match_14135891.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_14135891.runner.fifo, run_14186240);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_14135891.runner.fifo))) break L3;
            F.line = 712;
            var run_item_14190054 = pop_first_13950047(match_14135891.runner.fifo);
            F.line = 713;
            run_item_14190054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_14135891.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function update_14125750(t_14125754, init_val_14125755, set_val_14125757, refresh_list_14125758) {
function set_14125762(new_val_14125764, changed_path_14125766) {
  var F={procname:"update.set",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 958;
    t_14125754.data = nimCopy(null, new_val_14125764, NTI13586042);
    if (!((set_val_14125757 == null))) {
    F.line = 960;
    set_val_14125757(new_val_14125764, changed_path_14125766);
    }
    else {
      F.line = 962;
    upd_14125759({paths: nimCopy(null, changed_path_14125766, NTI14125765)});
    }
    
  framePtr = F.prev;

  
}
    function upd_14125759(refresh_list_14125761) {
      var F={procname:"update.upd",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        L1: do {
          F.line = 965;
          var match_14135214 = null;
          F.line = 184;
          var i_14194518 = 0;
          F.line = 185;
          var l_14194519 = (t_14125754.cmatches != null ? t_14125754.cmatches.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14194518 < l_14194519)) break L3;
                F.line = 965;
                match_14135214 = t_14125754.cmatches[chckIndx(i_14194518, 0, (t_14125754.cmatches != null ? t_14125754.cmatches.length : 0)+0-1)-0];
                F.line = 966;
                update_14135886(match_14135214, t_14125754.data, set_14125762, refresh_list_14125761);
                F.line = 188;
                i_14194518 = addInt(i_14194518, 1);
                if (!(((t_14125754.cmatches != null ? t_14125754.cmatches.length : 0) == l_14194519))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 954;
    t_14125754.data = nimCopy(null, init_val_14125755, NTI13586042);
    F.line = 968;
    upd_14125759(refresh_list_14125758);
  framePtr = F.prev;

  
}
function id_type_selector_14090245() {
    function HEX3Aanonymous_14090257(data_14090259) {
      var result_14090260 = null;

      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 303;
        result_14090260 = nimCopy(null, data_14090259, NTI13586042);
      framePtr = F.prev;

      return result_14090260;

    }
    function HEX3Aanonymous_14090274(data_14090277, data_14090277_Idx, value_14090278) {
      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 304;
        data_14090277[data_14090277_Idx] = nimCopy(null, value_14090278, NTI13586042);
      framePtr = F.prev;

      
    }

  var result_14090249 = null;

  var F={procname:"idTypeSelector.idTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 302;
    result_14090249 = {get: HEX3Aanonymous_14090257, set: HEX3Aanonymous_14090274, id: []};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14090249;

}
function id_multi_type_selector_14090228(equal_14090234) {
  var result_14090236 = ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null});

  var F={procname:"idMultiTypeSelector.idMultiTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 308;
    nimCopy(result_14090236, {kind: 3, eql: equal_14090234, obj: id_type_selector_14090245(), simple: null, serial: null, compare: null}, NTI13685581);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14090236;

}
function create_14090203(config_14090209, equal_14090213) {
  var result_14090222 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 398;
    result_14090222 = {iter: false, convert: id_multi_type_selector_14090228(equal_14090213), config: config_14090209, m_type: NTI14090217, selector: null, refresh: null, cmatches: null, mount: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14090222;

}
function new_14090490() {
  var result_14090494 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_14090601 = null;
    F.line = 851;
    r_14090601 = ({cmatches: null, config: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), original_node: null, node: null, data: null});
    F.line = 852;
    result_14090494 = r_14090601;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14090494;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1450017(s_1450019, b_1450021, b_1450021_Idx, start_1450022) {
      var Tmp1;
          var Tmp4;

  var result_1450024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1450025 = start_1450022;
    if (((i_1450025 < (s_1450019 != null ? s_1450019.length : 0)) && (s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1450025 = addInt(i_1450025, 1);
    }
    
      if (!(i_1450025 < (s_1450019 != null ? s_1450019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet65[s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1450021[b_1450021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1450025 < (s_1450019 != null ? s_1450019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet66[s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1460016 = subInt(s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0], 48);
          if ((b_1450021[b_1450021_Idx] <= divInt(subInt(2147483647, c_1460016), 10))) {
          F.line = 483;
          b_1450021[b_1450021_Idx] = addInt(mulInt(b_1450021[b_1450021_Idx], 10), c_1460016);
          }
          else {
            F.line = 485;
            b_1450021[b_1450021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1450025 = addInt(i_1450025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1450025 < (s_1450019 != null ? s_1450019.length : 0)) && (s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1450025 = addInt(i_1450025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1450024 = subInt(i_1450025, start_1450022);
    }
    
  framePtr = F.prev;

  return result_1450024;

}
function HEX5BHEX5D_4860068(s_4860072, x_4860074) {
  var result_4860075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4860201 = x_4860074.a;
    F.line = 2437;
    var l_4860401 = addInt(subInt(subInt((s_4860072 != null ? s_4860072.length : 0), x_4860074.b), a_4860201), 1);
    F.line = 2438;
    result_4860075 = nimCopy(null, mnewString(chckRange(l_4860401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4860409 = 0;
      F.line = 106;
      var i_14194673 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_14194673 < l_4860401)) break L3;
            F.line = 2439;
            i_4860409 = i_14194673;
            F.line = 2439;
            result_4860075[chckIndx(i_4860409, 0, (result_4860075 != null ? result_4860075.length : 0)+0-1)-0] = s_4860072[chckIndx(addInt(i_4860409, a_4860201), 0, (s_4860072 != null ? s_4860072.length : 0)+0-1)-0];
            F.line = 109;
            i_14194673 = addInt(i_14194673, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4860075;

}
function parse_standard_format_specifier_10085322(s_10085324, start_10085325, ignore_unknown_suffix_10085327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10085328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_10085328.fill = 32;
    F.line = 380;
    result_10085328.align = 0;
    F.line = 381;
    result_10085328.sign = 45;
    F.line = 382;
    var i_10085331 = start_10085325;
    if (((addInt(i_10085331, 1) < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet61[s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_10085328.fill = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 385;
    result_10085328.align = s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 386;
    i_10085331 = addInt(i_10085331, 2);
    }
    else {
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet62[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_10085328.align = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 389;
    i_10085331 = addInt(i_10085331, 1);
    }
    }
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet63[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_10085328.sign = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 393;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_10085328.alternateForm = true;
    F.line = 397;
    i_10085331 = addInt(i_10085331, 1);
    }
    
      if (!((addInt(i_10085331, 1) < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet64[s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_10085328.padWithZero = true;
    F.line = 401;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    F.line = 403;
    var parsed_length_10105015 = parse_saturated_natural_1450017(s_10085324, result_10085328, "minimumWidth", i_10085331);
    F.line = 404;
    i_10085331 = addInt(i_10085331, parsed_length_10105015);
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_10085331 = addInt(i_10085331, 1);
    F.line = 407;
    var parsed_length_b_10105029 = parse_saturated_natural_1450017(s_10085324, result_10085328, "precision", i_10085331);
    F.line = 408;
    i_10085331 = addInt(i_10085331, parsed_length_b_10105029);
    }
    else {
      F.line = 410;
      result_10085328.precision = -1;
    }
    
      if (!(i_10085331 < (s_10085324 != null ? s_10085324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet67[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_10085328.typ = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 414;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    F.line = 415;
    result_10085328.endPosition = i_10085331;
      if (!!((i_10085331 == (s_10085324 != null ? s_10085324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_10085327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4860068(s_10085324, HEX2EHEX2E_4860001(i_10085331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_10085328;

}
function nucruneLen(s_1531829) {
  var result_1531830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1531832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1531832 < (s_1531829 != null ? s_1531829.length : 0))) break L2;
          if ((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1531832 = addInt(i_1531832, 1);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1531832 = addInt(i_1531832, 2);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1531832 = addInt(i_1531832, 3);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1531832 = addInt(i_1531832, 4);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1531832 = addInt(i_1531832, 5);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1531832 = addInt(i_1531832, 6);
          }
          else {
            F.line = 49;
          i_1531832 = addInt(i_1531832, 1);
          }
          }}}}}
          F.line = 50;
          result_1531830 = addInt(result_1531830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1531830;

}
function rune_len_at_1531931(s_1531933, i_1531934) {
  var result_1531935 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1531935 = 1;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1531935 = 2;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1531935 = 3;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1531935 = 4;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1531935 = 5;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1531935 = 6;
    }
    else {
      F.line = 68;
      result_1531935 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1531935;

}
function rune_offset_2155244(s_2155246, pos_2155247, start_2155248) {
  var result_2155249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_2155251 = 0;
    F.line = 320;
    var o_2155252 = start_2155248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_2155251 < pos_2155247)) break L2;
          F.line = 322;
          o_2155252 = addInt(o_2155252, chckRange(rune_len_at_1531931(s_2155246, o_2155252), 0, 2147483647));
          if (((s_2155246 != null ? s_2155246.length : 0) <= o_2155252)) {
          F.line = 324;
          result_2155249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_2155251 = addInt(i_2155251, 1);
        }
    } while(false);
    F.line = 326;
    result_2155249 = o_2155252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_2155249;

}
function validate_utf8_1775229(s_1775231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1775232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1775234 = 0;
    F.line = 173;
    var l_1775235 = (s_1775231 != null ? s_1775231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1775234 < l_1775235)) break L2;
          if ((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1775234 = addInt(i_1775234, 1);
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1775232 = i_1775234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1775234, 1) < l_1775235)) Tmp3 = false; else {              Tmp3 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1775234 = addInt(i_1775234, 2);
          }
          else {
            F.line = 180;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1775234, 2) < l_1775235)) Tmp5 = false; else {              Tmp5 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1775231[chckIndx(addInt(i_1775234, 2), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1775234 = addInt(i_1775234, 3);
          }
          else {
            F.line = 184;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1775234, 3) < l_1775235)) Tmp8 = false; else {              Tmp8 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1775231[chckIndx(addInt(i_1775234, 2), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1775231[chckIndx(addInt(i_1775234, 3), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1775234 = addInt(i_1775234, 4);
          }
          else {
            F.line = 190;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1775232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1775232;

}
function nsuRepeatChar(c_9630048, count_9630049) {
  var result_9630050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9630050 = nimCopy(null, mnewString(count_9630049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9630059 = 0;
      F.line = 66;
      var colontmp__14194702 = 0;
      F.line = 1283;
      colontmp__14194702 = subInt(count_9630049, 1);
      F.line = 77;
      var res_14194703 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14194703 <= colontmp__14194702)) break L3;
            F.line = 1283;
            i_9630059 = res_14194703;
            F.line = 1283;
            result_9630050[chckIndx(i_9630059, 0, (result_9630050 != null ? result_9630050.length : 0)+0-1)-0] = c_9630048;
            F.line = 80;
            res_14194703 = addInt(res_14194703, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9630050;

}
function align_string_10085222(s_10085224, minimum_width_10085225, align_10085226, fill_10085227) {
      var Tmp1;

  var result_10085228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_10085225 == 0)) {
    F.line = 282;
    result_10085228 = nimCopy(null, s_10085224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1775229(s_10085224) == -1)) {
      Tmp1 = nucruneLen(s_10085224);
      }
      else {
      Tmp1 = (s_10085224 != null ? s_10085224.length : 0);
      }
      
      var s_rune_len_10085229 = Tmp1;
      F.line = 285;
      var to_fill_10085230 = subInt(minimum_width_10085225, s_rune_len_10085229);
      if ((to_fill_10085230 <= 0)) {
      F.line = 287;
      result_10085228 = nimCopy(null, s_10085224, NTI112);
      }
      else {
      if (((align_10085226 == 60) || (align_10085226 == 0))) {
      F.line = 289;
      result_10085228 = nimCopy(null, (s_10085224 || []).concat(nsuRepeatChar(fill_10085227, chckRange(to_fill_10085230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_10085226 == 94)) {
      F.line = 291;
      var half_10085231 = divInt(to_fill_10085230, 2);
      F.line = 292;
      result_10085228 = nimCopy(null, (nsuRepeatChar(fill_10085227, chckRange(half_10085231, 0, 2147483647)) || []).concat(s_10085224 || [],nsuRepeatChar(fill_10085227, chckRange(subInt(to_fill_10085230, half_10085231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_10085228 = nimCopy(null, (nsuRepeatChar(fill_10085227, chckRange(to_fill_10085230, 0, 2147483647)) || []).concat(s_10085224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_10085228;

}
function format_value_10130080(result_10130083, result_10130083_Idx, value_10130084, specifier_10130085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_10130086 = parse_standard_format_specifier_10085322(specifier_10130085, 0, false);
    F.line = 503;
    var value_10130087 = nimCopy(null, value_10130084, NTI112);
    F.line = 504;
    switch (spec_10130086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10130086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_10130086.precision == -1))) {
    if ((spec_10130086.precision < nucruneLen(value_10130087))) {
    F.line = 512;
    (value_10130087 == null ? value_10130087 = mnewString(chckRange(rune_offset_2155244(value_10130087, chckRange(spec_10130086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_10130087.length = chckRange(rune_offset_2155244(value_10130087, chckRange(spec_10130086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_10130083[result_10130083_Idx] != null) { result_10130083[result_10130083_Idx] = (result_10130083[result_10130083_Idx]).concat(align_string_10085222(value_10130087, spec_10130086.minimumWidth, spec_10130086.align, spec_10130086.fill)); } else { result_10130083[result_10130083_Idx] = align_string_10085222(value_10130087, spec_10130086.minimumWidth, spec_10130086.align, spec_10130086.fill).slice(); };
  framePtr = F.prev;

  
}
function owner_document_10201067(n_10201069) {
  var result_10201070 = null;

  var F={procname:"extradom.ownerDocument",prev:framePtr,filename:"extradom.nim",line:0};
  framePtr = F;
    F.line = 5;
    result_10201070 = ((n_10201069).ownerDocument);
  framePtr = F.prev;

  return result_10201070;

}
function compile_14091163(cfg_14091168, node_14091169) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_14091172 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_14091172 = nimCopy(null, [], NTI14091187);
    F.line = 620;
    if (eqStrings(cfg_14091168.selector, [])) {
    Tmp1 = [node_14091169];
    }
    else {
    Tmp1 = node_14091169.querySelectorAll(toJSStr(cfg_14091168.selector));
    }
    
    var matched_nodes_14091201 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_14091201 != null ? matched_nodes_14091201.length : 0) == 0)) {
    F.line = 622;
    var selector_14091207 = nimCopy(null, cfg_14091168.selector, NTI112);
    F.line = 623;
    var fmt_res_14091208 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_14091208[0] != null) { fmt_res_14091208[0] = (fmt_res_14091208[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_14091208[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_14091208, 0, selector_14091207, []);
    F.line = 623;
    if (fmt_res_14091208[0] != null) { fmt_res_14091208[0] = (fmt_res_14091208[0]).concat(makeNimstrLit("\'")); } else { fmt_res_14091208[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_14091208[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_14100008 = null;
      F.line = 184;
      var i_14194656 = 0;
      F.line = 185;
      var l_14194657 = (matched_nodes_14091201 != null ? matched_nodes_14091201.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_14194656 < l_14194657)) break L4;
            F.line = 625;
            matched_node_14100008 = matched_nodes_14091201[chckIndx(i_14194656, 0, (matched_nodes_14091201 != null ? matched_nodes_14091201.length : 0)+0-1)-0];
            F.line = 626;
            var match_14100016 = {refresh: nimCopy(null, cfg_14091168.refresh, NTI13685783), iter: cfg_14091168.iter, node: matched_node_14100008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_14100016.node = matched_node_14100008;
            if (match_14100016.iter) {
            var Tmp5 = match_14100016;
            if (ConstSet68[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_14091168;
            if (ConstSet69[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI13685676);
            var Tmp7 = match_14100016;
            if (ConstSet70[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_14100008).createComment(toJSStr(cstrToNimstr(((matched_node_14100008).outerHTML))));
            var Tmp8 = match_14100016;
            if (ConstSet71[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_14091168.mount;
            var Tmp9 = match_14100016;
            if (ConstSet72[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_14091168.cmatches, NTI13685788);
            var Tmp10 = match_14100016;
            if (ConstSet73[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI14105029);
            F.line = 637;
            var Tmp11 = match_14100016;
            if (ConstSet74[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_14100008.parentNode.replaceChild(Tmp11.anchor, matched_node_14100008);
            }
            else {
              var Tmp12 = match_14100016;
              if (ConstSet75[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_14091168;
              if (ConstSet76[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_14100016;
              if (ConstSet77[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_14100016;
                if (ConstSet78[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_14100016;
              if (ConstSet79[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_14091168;
              if (ConstSet80[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI13685581);
              var Tmp18 = match_14100016;
              if (ConstSet81[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI14105056);
              var Tmp19 = match_14100016;
              if (ConstSet82[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_14100016;
              if (ConstSet83[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_14091168.mount == null))) {
              var Tmp21 = match_14100016;
              if (ConstSet84[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_14091168.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_14115214 = null;
                  F.line = 184;
                  var i_14194652 = 0;
                  F.line = 185;
                  var l_14194653 = (cfg_14091168.cmatches != null ? cfg_14091168.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_14194652 < l_14194653)) break L24;
                        F.line = 652;
                        submatch_14115214 = cfg_14091168.cmatches[chckIndx(i_14194652, 0, (cfg_14091168.cmatches != null ? cfg_14091168.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_14100016;
                        if (ConstSet85[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_14115218(Tmp25, "matches", submatch_14115214.compile(matched_node_14100008));
                        F.line = 188;
                        i_14194652 = addInt(i_14194652, 1);
                        if (!(((cfg_14091168.cmatches != null ? cfg_14091168.cmatches.length : 0) == l_14194653))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_14091172 != null) { result_14091172.push(match_14100016); } else { result_14091172 = [match_14100016]; };
            F.line = 188;
            i_14194656 = addInt(i_14194656, 1);
            if (!(((matched_nodes_14091201 != null ? matched_nodes_14091201.length : 0) == l_14194657))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14091172;

}
function compile_14080611(node_14080616, configurator_14080618, equal_14080622) {
  var result_14080624 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_14080616 == null)))) {
    F.line = 664;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(664, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 665;
    var cfg_14090483 = create_14090203(configurator_14080618, equal_14080622);
    F.line = 666;
    cfg_14090483.config(cfg_14090483);
    F.line = 668;
    result_14080624 = new_14090490();
    F.line = 669;
    result_14080624.config = configurator_14080618;
    F.line = 670;
    nimCopy(result_14080624.convert, id_multi_type_selector_14090228(equal_14080622), NTI13685581);
    F.line = 671;
    result_14080624.original_node = node_14080616;
    F.line = 672;
    result_14080624.node = node_14080616.cloneNode(true);
    F.line = 673;
    result_14080624.cmatches = nimCopy(null, compile_14091163(cfg_14090483, result_14080624.node), NTI14091170);
  framePtr = F.prev;

  return result_14080624;

}
function clone_14190465(comp_14190469) {
    var Tmp1;

  var result_14190471 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 949;
    var Tmp1 = comp_14190469.convert;
    if (ConstSet86[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
    result_14190471 = compile_14080611(comp_14190469.original_node, comp_14190469.config, Tmp1.eql);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14190471;

}
function as_interface_14191809(comp_14191813) {
    function HEX3Aanonymous_14191820() {
      var result_14191822 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1005;
        result_14191822 = comp_14191813.node;
      framePtr = F.prev;

      return result_14191822;

    }
    function HEX3Aanonymous_14191836(data_14191838, set_14191843, refresh_list_14191844) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1007;
        update_14125750(comp_14191813, data_14191838, set_14191843, refresh_list_14191844);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14192536() {
      var result_14192542 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1009;
        result_14192542 = as_interface_14191809(clone_14190465(comp_14191813));
      framePtr = F.prev;

      return result_14192542;

    }

  var result_14191815 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1003;
    result_14191815 = {node: HEX3Aanonymous_14191820, update: HEX3Aanonymous_14191836, clone: HEX3Aanonymous_14192536};
  framePtr = F.prev;

  return result_14191815;

}
function late_14116221(late_comp_14116227) {
function resolve_comp_14116235() {
  var result_14116241 = null;

  var F={procname:"late.resolveComp",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((comp_14116234 == null)) {
    F.line = 1045;
    var late_14116250 = late_comp_14116227();
    if ((late_14116250 == null)) {
    F.line = 1047;
    var fmt_res_14116259 = mnewString(0);
    F.line = 1047;
    if (fmt_res_14116259 != null) { fmt_res_14116259 = (fmt_res_14116259).concat(makeNimstrLit("Late component not resolved in time")); } else { fmt_res_14116259 = makeNimstrLit("Late component not resolved in time"); };
    F.line = 1047;
    raiseException({message: nimCopy(null, fmt_res_14116259, NTI112), parent: null, m_type: NTI10206021, name: null, trace: null, up: null}, "CompileLateError");
    }
    
    F.line = 1048;
    comp_14116234 = late_14116250;
    }
    
    F.line = 1049;
    result_14116241 = comp_14116234;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14116241;

}
    function create_14125045() {
        function HEX3Aanonymous_14125056() {
          var result_14125058 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1054;
            result_14125058 = resolve_comp_14116235().node;
          framePtr = F.prev;

          return result_14125058;

        }
        function HEX3Aanonymous_14125072(data_14125074, set_14125079, refresh_list_14125080) {
          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1056;
            update_14125750(resolve_comp_14116235(), data_14125074, set_14125079, refresh_list_14125080);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_14190107() {
          var result_14190113 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1058;
            result_14190113 = as_interface_14191809(clone_14190465(resolve_comp_14116235()));
          framePtr = F.prev;

          return result_14190113;

        }

      var result_14125051 = null;

      var F={procname:"late.create",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1052;
        result_14125051 = {node: HEX3Aanonymous_14125056, update: HEX3Aanonymous_14125072, clone: HEX3Aanonymous_14190107};
      framePtr = F.prev;

      return result_14125051;

    }

  var result_14116229 = null;

  var F={procname:"late.late",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1041;
    var comp_14116234 = null;
    F.line = 1061;
    result_14116229 = create_14125045();
  framePtr = F.prev;

  return result_14116229;

}
async function init_comp_14194369(set_component_14194377, node_14194379, creator_14194381) {
  var result_14194383 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var n_14194405 = (await node_14194379);
    F.line = 22;
    set_component_14194377(creator_14194381(n_14194405));
    F.line = 131;
    result_14194383 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14194383;

}
function declare_14115813(registry_14115816, component_14115819, component_14115819_Idx, node_14115821, creator_14115823) {
    function HEX3Aanonymous_14115829(c_14115835) {
      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 30;
        comp_14115828 = c_14115835;
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14115850() {
      var result_14115856 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 31;
        result_14115856 = comp_14115828;
      framePtr = F.prev;

      return result_14115856;

    }
    function HEX3Aanonymous_14194362() {
      var result_14194367 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 32;
        result_14194367 = init_comp_14194369(set_component_14115849, node_14115821, creator_14115823);
      framePtr = F.prev;

      return result_14194367;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 29;
    var comp_14115828 = null;
    F.line = 30;
    var set_component_14115849 = HEX3Aanonymous_14115829;
    F.line = 31;
    component_14115819[component_14115819_Idx] = late_14116221(HEX3Aanonymous_14115850);
    F.line = 32;
    if (registry_14115816.Field0 != null) { registry_14115816.Field0.push(HEX3Aanonymous_14194362); } else { registry_14115816.Field0 = [HEX3Aanonymous_14194362]; };
  framePtr = F.prev;

  
}
async function fetch_template_13495001(rel_path_13495003) {
  var result_13495008 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 9;
    var response_13520032 = (await (window.fetch((toJSStr(rel_path_13495003)))));
    F.line = 10;
    var text_13525026 = (await (response_13520032.text()));
    F.line = 11;
    result_13495008 = (window.document.createRange().createContextualFragment((text_13525026)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_13495008;

}
function nsuToHex(x_9455243, len_9455244) {
  var result_9455245 = null;

  var F={procname:"strutils.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 936;
    var n_9455247 = x_9455243;
    F.line = 937;
    result_9455245 = nimCopy(null, mnewString(len_9455244), NTI112);
    L1: do {
      F.line = 938;
      var j_9455254 = 0;
      F.line = 6;
      var colontmp__14194722 = 0;
      F.line = 938;
      colontmp__14194722 = subInt(len_9455244, 1);
      F.line = 28;
      var res_14194723 = colontmp__14194722;
      L2: do {
        F.line = 29;
          L3: while (true) {
          if (!(0 <= res_14194723)) break L3;
            F.line = 938;
            j_9455254 = res_14194723;
            F.line = 939;
            result_9455245[chckIndx(j_9455254, 0, (result_9455245 != null ? result_9455245.length : 0)+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9455247 & 15), 0, (makeNimstrLit("0123456789ABCDEF") != null ? makeNimstrLit("0123456789ABCDEF").length : 0)+0-1)-0];
            F.line = 940;
            n_9455247 = (n_9455247 >> 4);
            if (((n_9455247 == 0) && (x_9455243 < 0))) {
            F.line = 942;
            n_9455247 = -1;
            }
            
            F.line = 31;
            res_14194723 = subInt(res_14194723, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9455245;

}
function to_hex_13373128(x_13373131) {
  var result_13373132 = null;

  var F={procname:"toHex.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 945;
    result_13373132 = nimCopy(null, nsuToHex(chckRange(x_13373131, -9223372036854775808, 9223372036854775807), 16), NTI112);
  framePtr = F.prev;

  return result_13373132;

}
function nsuFindChar(s_9775216, sub_9775217, start_9775218, last_9775219) {
    var Tmp1;

  var result_9775221 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    if ((last_9775219 == 0)) {
    Tmp1 = (s_9775216 != null ? (s_9775216.length-1) : -1);
    }
    else {
    Tmp1 = last_9775219;
    }
    
    var last_9775223 = Tmp1;
    L2: do {
      F.line = 1867;
      var i_9775606 = 0;
      F.line = 66;
      var colontmp__14194740 = 0;
      F.line = 1867;
      colontmp__14194740 = start_9775218;
      F.line = 77;
      var res_14194741 = colontmp__14194740;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_14194741 <= last_9775223)) break L4;
            F.line = 1867;
            i_9775606 = res_14194741;
            if ((sub_9775217 == s_9775216[chckIndx(i_9775606, 0, (s_9775216 != null ? s_9775216.length : 0)+0-1)-0])) {
            F.line = 1868;
            result_9775221 = i_9775606;
            break BeforeRet;
            }
            
            F.line = 80;
            res_14194741 = addInt(res_14194741, 1);
          }
      } while(false);
    } while(false);
    F.line = 1869;
    result_9775221 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9775221;

}
function substr_341022(s_341024, first_341025, last_341026) {
  var result_341027 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2943;
    var first_341028 = nimMax(first_341025, 0);
    F.line = 2944;
    var l_341030 = nimMax(addInt(subInt(nimMin(last_341026, (s_341024 != null ? (s_341024.length-1) : -1)), first_341028), 1), 0);
    F.line = 2945;
    result_341027 = nimCopy(null, mnewString(chckRange(l_341030, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2946;
      var i_341039 = 0;
      F.line = 66;
      var colontmp__14194747 = 0;
      F.line = 2946;
      colontmp__14194747 = subInt(l_341030, 1);
      F.line = 77;
      var res_14194748 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14194748 <= colontmp__14194747)) break L3;
            F.line = 2946;
            i_341039 = res_14194748;
            F.line = 2947;
            result_341027[chckIndx(i_341039, 0, (result_341027 != null ? result_341027.length : 0)+0-1)-0] = s_341024[chckIndx(addInt(i_341039, first_341028), 0, (s_341024 != null ? s_341024.length : 0)+0-1)-0];
            F.line = 80;
            res_14194748 = addInt(res_14194748, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_341027;

}
function substr_341053(s_341055, first_341056) {
  var result_341058 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2950;
    result_341058 = nimCopy(null, substr_341022(s_341055, first_341056, (s_341055 != null ? (s_341055.length-1) : -1)), NTI112);
  framePtr = F.prev;

  return result_341058;

}
function nsuInitSkipTable(a_9770081, sub_9770082) {
  var F={procname:"strutils.initSkipTable",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1791;
    var m_9770083 = (sub_9770082 != null ? sub_9770082.length : 0);
    F.line = 1792;
    var i_9770085 = 0;
    L1: do {
      F.line = 1793;
        L2: while (true) {
        if (!(i_9770085 <= 248)) break L2;
          F.line = 1794;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 0), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1795;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 1), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1796;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 2), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1797;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 3), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1798;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 4), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1799;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 5), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1800;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 6), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1801;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 7), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1802;
          i_9770085 = addInt(i_9770085, 8);
        }
    } while(false);
    L3: do {
      F.line = 1804;
      var i_9770101 = 0;
      F.line = 104;
      var colontmp__14194755 = 0;
      F.line = 1804;
      colontmp__14194755 = subInt(m_9770083, 1);
      F.line = 106;
      var i_14194756 = 0;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_14194756 < colontmp__14194755)) break L5;
            F.line = 1804;
            i_9770101 = i_14194756;
            F.line = 1805;
            a_9770081[chckIndx(sub_9770082[chckIndx(i_9770101, 0, (sub_9770082 != null ? sub_9770082.length : 0)+0-1)-0], 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = subInt(subInt(m_9770083, 1), i_9770101);
            F.line = 109;
            i_14194756 = addInt(i_14194756, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function nsuFindStrA(a_9770117, s_9770118, sub_9770119, start_9770120, last_9770121) {
    var Tmp1;

  var result_9770123 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1815;
    if ((last_9770121 == 0)) {
    Tmp1 = (s_9770118 != null ? (s_9770118.length-1) : -1);
    }
    else {
    Tmp1 = last_9770121;
    }
    
    var last_9770125 = Tmp1;
    F.line = 1816;
    var sub_last_9770126 = subInt((sub_9770119 != null ? sub_9770119.length : 0), 1);
    if ((sub_last_9770126 == -1)) {
    F.line = 1821;
    result_9770123 = start_9770120;
    break BeforeRet;
    }
    
    F.line = 1825;
    var skip_9770127 = start_9770120;
    L2: do {
      F.line = 1827;
        L3: while (true) {
        if (!(sub_last_9770126 <= subInt(last_9770125, skip_9770127))) break L3;
          F.line = 1828;
          var i_9775001 = sub_last_9770126;
          L4: do {
            F.line = 1829;
              L5: while (true) {
              if (!(s_9770118[chckIndx(addInt(skip_9770127, i_9775001), 0, (s_9770118 != null ? s_9770118.length : 0)+0-1)-0] == sub_9770119[chckIndx(i_9775001, 0, (sub_9770119 != null ? sub_9770119.length : 0)+0-1)-0])) break L5;
                if ((i_9775001 == 0)) {
                F.line = 1831;
                result_9770123 = skip_9770127;
                break BeforeRet;
                }
                
                F.line = 1832;
                i_9775001 = subInt(i_9775001, 1);
              }
          } while(false);
          F.line = 1833;
          skip_9770127 = addInt(skip_9770127, a_9770117[chckIndx(s_9770118[chckIndx(addInt(skip_9770127, sub_last_9770126), 0, (s_9770118 != null ? s_9770118.length : 0)+0-1)-0], 0, (a_9770117 != null ? a_9770117.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 1834;
    result_9770123 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9770123;

}
function nsuReplaceStr(s_9845016, sub_9845017, by_9845018) {
  var result_9845019 = null;

  var F={procname:"strutils.replace",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2056;
    result_9845019 = nimCopy(null, [], NTI112);
    F.line = 2057;
    var sub_len_9845020 = (sub_9845017 != null ? sub_9845017.length : 0);
    if ((sub_len_9845020 == 0)) {
    F.line = 2059;
    result_9845019 = nimCopy(null, s_9845016, NTI112);
    }
    else {
    if ((sub_len_9845020 == 1)) {
    F.line = 2063;
    var c_9845021 = sub_9845017[chckIndx(0, 0, (sub_9845017 != null ? sub_9845017.length : 0)+0-1)-0];
    F.line = 2064;
    var last_9845023 = (s_9845016 != null ? (s_9845016.length-1) : -1);
    F.line = 2065;
    var i_9845025 = 0;
    L1: do {
      F.line = 2066;
        L2: while (true) {
        if (!true) break L2;
          F.line = 2067;
          var j_9845026 = nsuFindChar(s_9845016, c_9845021, chckRange(i_9845025, 0, 2147483647), last_9845023);
          if ((j_9845026 < 0)) {
          F.line = 2068;
          break L1;
          }
          
          F.line = 2069;
          if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341022(s_9845016, i_9845025, subInt(j_9845026, 1))); } else { result_9845019 = substr_341022(s_9845016, i_9845025, subInt(j_9845026, 1)).slice(); };
          F.line = 2070;
          if (result_9845019 != null) { result_9845019 = (result_9845019).concat(by_9845018); } else { result_9845019 = by_9845018.slice(); };
          F.line = 2071;
          i_9845025 = addInt(j_9845026, sub_len_9845020);
        }
    } while(false);
    F.line = 2073;
    if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341053(s_9845016, i_9845025)); } else { result_9845019 = substr_341053(s_9845016, i_9845025).slice(); };
    }
    else {
      F.line = 2075;
      var a_9845027 = [new Int32Array(256)];
      F.line = 2076;
      nsuInitSkipTable(a_9845027[0], sub_9845017);
      F.line = 2077;
      var last_9845030 = (s_9845016 != null ? (s_9845016.length-1) : -1);
      F.line = 2078;
      var i_9845032 = 0;
      L3: do {
        F.line = 2079;
          L4: while (true) {
          if (!true) break L4;
            F.line = 2080;
            var j_9845033 = nsuFindStrA(a_9845027[0], s_9845016, sub_9845017, chckRange(i_9845032, 0, 2147483647), last_9845030);
            if ((j_9845033 < 0)) {
            F.line = 2081;
            break L3;
            }
            
            F.line = 2082;
            if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341022(s_9845016, i_9845032, subInt(j_9845033, 1))); } else { result_9845019 = substr_341022(s_9845016, i_9845032, subInt(j_9845033, 1)).slice(); };
            F.line = 2083;
            if (result_9845019 != null) { result_9845019 = (result_9845019).concat(by_9845018); } else { result_9845019 = by_9845018.slice(); };
            F.line = 2084;
            i_9845032 = addInt(j_9845033, sub_len_9845020);
          }
      } while(false);
      F.line = 2086;
      if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341053(s_9845016, i_9845032)); } else { result_9845019 = substr_341053(s_9845016, i_9845032).slice(); };
    }
    }
  framePtr = F.prev;

  return result_9845019;

}
function scope_13373123(node_13373126) {
  var F={procname:"css.scope",prev:framePtr,filename:"css.nim",line:0};
  framePtr = F;
    F.line = 12;
    var comp_13373151 = to_hex_13373128(next_12582258(rand_13373092[0]));
    L1: do {
      F.line = 13;
      var element_13395005 = null;
      F.line = 359;
      var colontmp__14194714 = null;
      F.line = 13;
      colontmp__14194714 = (node_13373126).querySelectorAll(("*"));
      F.line = 361;
      var v_14194715 = null;
      F.line = 362;
      for (var k in colontmp__14194714) {
      F.line = 363;
        if (!colontmp__14194714.hasOwnProperty(k)) continue;
      F.line = 364;
        v_14194715=colontmp__14194714[k];
      F.line = 13;
      element_13395005 = v_14194715;
      F.line = 14;
      var fmt_res_13400004 = [mnewString(0)];
      F.line = 14;
      if (fmt_res_13400004[0] != null) { fmt_res_13400004[0] = (fmt_res_13400004[0]).concat(makeNimstrLit("component-")); } else { fmt_res_13400004[0] = makeNimstrLit("component-"); };
      F.line = 14;
      format_value_10130080(fmt_res_13400004, 0, comp_13373151, []);
      element_13395005.classList.add((toJSStr(fmt_res_13400004[0])));
      F.line = 366;
      }
    } while(false);
    L2: do {
      F.line = 15;
      var style_13440214 = null;
      F.line = 182;
      var colontmp__14194717 = null;
      F.line = 15;
      colontmp__14194717 = node_13373126.querySelectorAll("style[scope]");
      F.line = 184;
      var i_14194718 = 0;
      F.line = 185;
      var l_14194719 = (colontmp__14194717 != null ? colontmp__14194717.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_14194718 < l_14194719)) break L4;
            F.line = 15;
            style_13440214 = colontmp__14194717[chckIndx(i_14194718, 0, (colontmp__14194717 != null ? colontmp__14194717.length : 0)+0-1)-0];
            F.line = 16;
            var scope_13440220 = to_hex_13373128(next_12582258(rand_13373092[0]));
            F.line = 17;
            var fmt_res_13445004 = [mnewString(0)];
            F.line = 17;
            if (fmt_res_13445004[0] != null) { fmt_res_13445004[0] = (fmt_res_13445004[0]).concat(makeNimstrLit("scope-")); } else { fmt_res_13445004[0] = makeNimstrLit("scope-"); };
            F.line = 17;
            format_value_10130080(fmt_res_13445004, 0, scope_13440220, []);
            (style_13440214.parentNode).classList.add((toJSStr(fmt_res_13445004[0])));
            F.line = 22;
            F.line = 21;
            var fmt_res_13475005 = [mnewString(0)];
            F.line = 21;
            if (fmt_res_13475005[0] != null) { fmt_res_13475005[0] = (fmt_res_13475005[0]).concat(makeNimstrLit(".scope-")); } else { fmt_res_13475005[0] = makeNimstrLit(".scope-"); };
            F.line = 21;
            format_value_10130080(fmt_res_13475005, 0, scope_13440220, []);
            F.line = 22;
            var fmt_res_13480002 = [mnewString(0)];
            F.line = 22;
            if (fmt_res_13480002[0] != null) { fmt_res_13480002[0] = (fmt_res_13480002[0]).concat(makeNimstrLit(".component-")); } else { fmt_res_13480002[0] = makeNimstrLit(".component-"); };
            F.line = 22;
            format_value_10130080(fmt_res_13480002, 0, comp_13373151, []);
            style_13440214.textContent = toJSStr(nsuReplaceStr(nsuReplaceStr(cstrToNimstr(style_13440214.textContent), makeNimstrLit(":scope"), fmt_res_13475005[0]), makeNimstrLit(":component"), fmt_res_13480002[0]));
            F.line = 188;
            i_14194718 = addInt(i_14194718, 1);
            if (!(((colontmp__14194717 != null ? colontmp__14194717.length : 0) == l_14194719))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
async function fetch_template_13555001(rel_path_13555003, template_selector_13555004, css_13555005) {
  var result_13555010 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 14;
    var tmpl_13555035 = (await fetch_template_13495001(rel_path_13555003));
    F.line = 15;
    var node_13585010 = ((tmpl_13555035).querySelector((toJSStr(template_selector_13555004))).content);
    if (css_13555005) {
    F.line = 17;
    scope_13373123(node_13585010);
    }
    
    F.line = 18;
    result_13555010 = node_13585010;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_13555010;

}
function refresh_13686856(c_13686861, refresh_13686863, before_13686864, after_13686865, reads_13686866) {
    var Tmp1;
      var Tmp2;

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (c_13686861.iter) {
    F.line = 511;
    var Tmp1 = c_13686861;
    if (ConstSet87[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    switch (Tmp1.iterate.kind) {
    case 0:
      F.line = 513;
      var fmt_res_13686868 = mnewString(0);
      F.line = 513;
      if (fmt_res_13686868 != null) { fmt_res_13686868 = (fmt_res_13686868).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates")); } else { fmt_res_13686868 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates"); };
      F.line = 513;
      raiseException({message: nimCopy(null, fmt_res_13686868, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 1:
      F.line = 515;
      var fmt_res_13695002 = mnewString(0);
      F.line = 515;
      if (fmt_res_13695002 != null) { fmt_res_13695002 = (fmt_res_13695002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates")); } else { fmt_res_13695002 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates"); };
      F.line = 515;
      raiseException({message: nimCopy(null, fmt_res_13695002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 2:
      break;
    }
    }
    else {
      F.line = 519;
      var Tmp2 = c_13686861;
      if (ConstSet88[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      switch (Tmp2.convert.kind) {
      case 0:
        F.line = 521;
        var fmt_res_13705003 = mnewString(0);
        F.line = 521;
        if (fmt_res_13705003 != null) { fmt_res_13705003 = (fmt_res_13705003).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates")); } else { fmt_res_13705003 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates"); };
        F.line = 521;
        raiseException({message: nimCopy(null, fmt_res_13705003, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 1:
        F.line = 523;
        var fmt_res_13715002 = mnewString(0);
        F.line = 523;
        if (fmt_res_13715002 != null) { fmt_res_13715002 = (fmt_res_13715002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates")); } else { fmt_res_13715002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates"); };
        F.line = 523;
        raiseException({message: nimCopy(null, fmt_res_13715002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 2:
        F.line = 525;
        var fmt_res_13725002 = mnewString(0);
        F.line = 525;
        if (fmt_res_13725002 != null) { fmt_res_13725002 = (fmt_res_13725002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates")); } else { fmt_res_13725002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates"); };
        F.line = 525;
        raiseException({message: nimCopy(null, fmt_res_13725002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 3:
        break;
      }
    }
    
    F.line = 528;
    if (c_13686861.refresh != null) { c_13686861.refresh.push({refresh: refresh_13686863, before: before_13686864, after: (after_13686865 || !(before_13686864)), init: false, reads: reads_13686866}); } else { c_13686861.refresh = [{refresh: refresh_13686863, before: before_13686864, after: (after_13686865 || !(before_13686864)), init: false, reads: reads_13686866}]; };
  framePtr = F.prev;

  
}
function HEX3DHEX3D_12170020(x_12170024, y_12170026) {
  var result_12170027 = false;

  var F={procname:"==.==",prev:framePtr,filename:"comparisons.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 301;
    var same_object_12170601 = false;
    F.line = 302;
    same_object_12170601 = x_12170024 === y_12170026
    if (same_object_12170601) {
    F.line = 303;
    result_12170027 = true;
    break BeforeRet;
    }
    
    if (!(((x_12170024 != null ? x_12170024.length : 0) == (y_12170026 != null ? y_12170026.length : 0)))) {
    F.line = 310;
    result_12170027 = false;
    break BeforeRet;
    }
    
    L1: do {
      F.line = 312;
      var i_12171024 = 0;
      F.line = 66;
      var colontmp__14194786 = 0;
      F.line = 312;
      colontmp__14194786 = subInt((x_12170024 != null ? x_12170024.length : 0), 1);
      F.line = 77;
      var res_14194787 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_14194787 <= colontmp__14194786)) break L3;
            F.line = 312;
            i_12171024 = res_14194787;
            if (!(HEX3DHEX3D_12165491(x_12170024[chckIndx(i_12171024, 0, (x_12170024 != null ? x_12170024.length : 0)+0-1)-0], y_12170026[chckIndx(i_12171024, 0, (y_12170026 != null ? y_12170026.length : 0)+0-1)-0]))) {
            F.line = 314;
            result_12170027 = false;
            break BeforeRet;
            }
            
            F.line = 80;
            res_14194787 = addInt(res_14194787, 1);
          }
      } while(false);
    } while(false);
    F.line = 316;
    result_12170027 = true;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12170027;

}
function len_12175128(t_12175133) {
  var result_12175134 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1471;
    result_12175134 = t_12175133.counter;
  framePtr = F.prev;

  return result_12175134;

}
function is_filled_1004018(hcode_1004020) {
  var result_1004021 = false;

  var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_1004021 = !((hcode_1004020 == 0));
  framePtr = F.prev;

  return result_1004021;

}
function imul_855517(a_855519, b_855520) {
  var result_855521 = 0;

  var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 133;
    var mask_855522 = 65535;
    F.line = 135;
    var a_hi_855531 = (((a_855519 >>> 0) >>> 16) & mask_855522);
    F.line = 136;
    var a_lo_855532 = (a_855519 & mask_855522);
    F.line = 137;
    var b_hi_855541 = (((b_855520 >>> 0) >>> 16) & mask_855522);
    F.line = 138;
    var b_lo_855542 = (b_855520 & mask_855522);
    F.line = 139;
    result_855521 = ((((a_lo_855532 * b_lo_855542) >>> 0) + (((((a_hi_855531 * b_lo_855542) >>> 0) + ((a_lo_855532 * b_hi_855541) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_855521;

}
function rotl32_855601(x_855603, r_855604) {
  var result_855605 = 0;

  var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_855605 = ((x_855603 << r_855604) | ((x_855603 >>> 0) >>> subInt(32, r_855604)));
  framePtr = F.prev;

  return result_855605;

}
function murmur_hash_855629(x_855632) {
  var result_855633 = 0;

  var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 155;
    var size_855643 = (x_855632 != null ? x_855632.length : 0);
    F.line = 156;
    var step_size_855645 = 4;
    F.line = 157;
    var n_855646 = divInt(size_855643, step_size_855645);
    F.line = 159;
    var h1_855647 = 0;
    F.line = 160;
    var i_855649 = 0;
    L1: do {
      F.line = 163;
        L2: while (true) {
        if (!(i_855649 < mulInt(n_855646, step_size_855645))) break L2;
          F.line = 164;
          var k1_855650 = 0;
          F.line = 166;
          var j_855651 = step_size_855645;
          L3: do {
            F.line = 167;
              L4: while (true) {
              if (!(0 < j_855651)) break L4;
                F.line = 168;
                j_855651 = subInt(j_855651, 1);
                F.line = 169;
                k1_855650 = ((k1_855650 << 8) | x_855632[chckIndx(addInt(i_855649, j_855651), 0, (x_855632 != null ? x_855632.length : 0)+0-1)-0]);
              }
          } while(false);
          F.line = 172;
          i_855649 = addInt(i_855649, step_size_855645);
          F.line = 174;
          k1_855650 = imul_855517(k1_855650, 3432918353);
          F.line = 175;
          k1_855650 = rotl32_855601(k1_855650, 15);
          F.line = 176;
          k1_855650 = imul_855517(k1_855650, 461845907);
          F.line = 178;
          h1_855647 = (h1_855647 ^ k1_855650);
          F.line = 179;
          h1_855647 = rotl32_855601(h1_855647, 13);
          F.line = 180;
          h1_855647 = ((((h1_855647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    F.line = 183;
    var k1_860208 = 0;
    F.line = 184;
    var rem_860209 = modInt(size_855643, step_size_855645);
    L5: do {
      F.line = 185;
        L6: while (true) {
        if (!(0 < rem_860209)) break L6;
          F.line = 186;
          rem_860209 = subInt(rem_860209, 1);
          F.line = 187;
          k1_860208 = ((k1_860208 << 8) | x_855632[chckIndx(addInt(i_855649, rem_860209), 0, (x_855632 != null ? x_855632.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 188;
    k1_860208 = imul_855517(k1_860208, 3432918353);
    F.line = 189;
    k1_860208 = rotl32_855601(k1_860208, 15);
    F.line = 190;
    k1_860208 = imul_855517(k1_860208, 461845907);
    F.line = 191;
    h1_855647 = (h1_855647 ^ k1_860208);
    F.line = 194;
    h1_855647 = (h1_855647 ^ size_855643);
    F.line = 195;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 16));
    F.line = 196;
    h1_855647 = imul_855517(h1_855647, 2246822507);
    F.line = 197;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 13));
    F.line = 198;
    h1_855647 = imul_855517(h1_855647, 3266489909);
    F.line = 199;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 16));
    F.line = 200;
    result_855633 = (h1_855647|0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_855633;

}
function hash_895214(x_895216) {
  var result_895217 = 0;

  var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_895217 = murmur_hash_855629((x_895216.slice(0, (x_895216 != null ? (x_895216.length-1) : -1)+1)));
  framePtr = F.prev;

  return result_895217;

}
function next_try_1005014(h_1005016, max_hash_1005017) {
  var result_1005018 = 0;

  var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_1005018 = (addInt(h_1005016, 1) & max_hash_1005017);
  framePtr = F.prev;

  return result_1005018;

}
function raw_get_12090621(t_12090626, key_12090627, hc_12090628, hc_12090628_Idx) {
            var Tmp3;

  var result_12090629 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_12090628[hc_12090628_Idx] = hash_895214(key_12090627);
    if ((hc_12090628[hc_12090628_Idx] == 0)) {
    F.line = 65;
    hc_12090628[hc_12090628_Idx] = 314159265;
    }
    
    if (((t_12090626.data != null ? t_12090626.data.length : 0) == 0)) {
    F.line = 47;
    result_12090629 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_12100138 = (hc_12090628[hc_12090628_Idx] & (t_12090626.data != null ? (t_12090626.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_12090626.data[chckIndx(h_12100138, 0, (t_12090626.data != null ? t_12090626.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_12090626.data[chckIndx(h_12100138, 0, (t_12090626.data != null ? t_12090626.data.length : 0)+0-1)-0].Field0 == hc_12090628[hc_12090628_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_12090626.data[chckIndx(h_12100138, 0, (t_12090626.data != null ? t_12090626.data.length : 0)+0-1)-0].Field2, key_12090627);            }          if (Tmp3) {
          F.line = 55;
          result_12090629 = h_12100138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_12100138 = next_try_1005014(h_12100138, (t_12090626.data != null ? (t_12090626.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_12090629 = subInt(-1, h_12100138);
  } while (false);
  framePtr = F.prev;

  return result_12090629;

}
function has_key_12185326(t_12185331, key_12185332) {
  var result_12185333 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1375;
    var hc_12185334 = [0];
    F.line = 1376;
    result_12185333 = (0 <= raw_get_12090621(t_12185331, key_12185332, hc_12185334, 0));
  framePtr = F.prev;

  return result_12185333;

}
function raw_get_12190157(t_12190161, key_12190162, hc_12190163, hc_12190163_Idx) {
            var Tmp3;

  var result_12190164 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_12190163[hc_12190163_Idx] = hash_895214(key_12190162);
    if ((hc_12190163[hc_12190163_Idx] == 0)) {
    F.line = 65;
    hc_12190163[hc_12190163_Idx] = 314159265;
    }
    
    if (((t_12190161.data != null ? t_12190161.data.length : 0) == 0)) {
    F.line = 47;
    result_12190164 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_12200138 = (hc_12190163[hc_12190163_Idx] & (t_12190161.data != null ? (t_12190161.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_12190161.data[chckIndx(h_12200138, 0, (t_12190161.data != null ? t_12190161.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_12190161.data[chckIndx(h_12200138, 0, (t_12190161.data != null ? t_12190161.data.length : 0)+0-1)-0].Field0 == hc_12190163[hc_12190163_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_12190161.data[chckIndx(h_12200138, 0, (t_12190161.data != null ? t_12190161.data.length : 0)+0-1)-0].Field2, key_12190162);            }          if (Tmp3) {
          F.line = 55;
          result_12190164 = h_12200138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_12200138 = next_try_1005014(h_12200138, (t_12190161.data != null ? (t_12190161.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_12190164 = subInt(-1, h_12200138);
  } while (false);
  framePtr = F.prev;

  return result_12190164;

}
function HEX5BHEX5D_12190146(t_12190152, key_12190153) {
  var result_12190155 = null;
  var result_12190155_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym1020595_12190156 = [0];
    F.line = 258;
    var indexHEX60gensym1020596_12200605 = raw_get_12190157(t_12190152, key_12190153, hcHEX60gensym1020595_12190156, 0);
    if ((0 <= indexHEX60gensym1020596_12200605)) {
    F.line = 259;
    result_12190155 = t_12190152.data[chckIndx(indexHEX60gensym1020596_12200605, 0, (t_12190152.data != null ? t_12190152.data.length : 0)+0-1)-0]; result_12190155_Idx = "Field3";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_12190153 || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_12190155, result_12190155_Idx];

}
function HEX3DHEX3D_12165491(a_12165493, b_12165494) {
      var Tmp1;
        var Tmp2;
        var Tmp3;
        var Tmp4;
        var Tmp5;
        var Tmp6;
        var Tmp7;
        var Tmp8;
        var Tmp9;
        var Tmp10;
        var Tmp11;
          var Tmp12;
          var Tmp13;
          var Tmp15;
                  var Tmp18;
                  var Tmp19;
                  var Tmp20;

  var result_12165495 = false;

  var F={procname:"json.==",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((a_12165493 == null)) {
    if ((b_12165494 == null)) {
    F.line = 400;
    result_12165495 = true;
    break BeforeRet;
    }
    
    F.line = 401;
    result_12165495 = false;
    break BeforeRet;
    }
    else {
      if ((b_12165494 == null)) Tmp1 = true; else {        Tmp1 = !((a_12165493.kind == b_12165494.kind));      }    if (Tmp1) {
    F.line = 403;
    result_12165495 = false;
    break BeforeRet;
    }
    else {
      F.line = 405;
      switch (a_12165493.kind) {
      case 4:
        F.line = 407;
        var Tmp2 = a_12165493;
        if (ConstSet89[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp3 = b_12165494;
        if (ConstSet90[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_12165495 = eqStrings(Tmp2.str, Tmp3.str);
        break;
      case 2:
        F.line = 409;
        var Tmp4 = a_12165493;
        if (ConstSet91[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp5 = b_12165494;
        if (ConstSet92[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_12165495 = (Tmp4.num == Tmp5.num);
        break;
      case 3:
        F.line = 411;
        var Tmp6 = a_12165493;
        if (ConstSet93[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp7 = b_12165494;
        if (ConstSet94[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_12165495 = (Tmp6.fnum == Tmp7.fnum);
        break;
      case 1:
        F.line = 413;
        var Tmp8 = a_12165493;
        if (ConstSet95[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp9 = b_12165494;
        if (ConstSet96[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_12165495 = (Tmp8.bval == Tmp9.bval);
        break;
      case 0:
        F.line = 415;
        result_12165495 = true;
        break;
      case 6:
        F.line = 417;
        var Tmp10 = a_12165493;
        if (ConstSet97[Tmp10.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp11 = b_12165494;
        if (ConstSet98[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_12165495 = HEX3DHEX3D_12170020(Tmp10.elems, Tmp11.elems);
        break;
      case 5:
          var Tmp12 = a_12165493;
          if (ConstSet99[Tmp12.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          var Tmp13 = b_12165494;
          if (ConstSet100[Tmp13.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        if (!((len_12175128(Tmp12.fields) == len_12175128(Tmp13.fields)))) {
        F.line = 421;
        result_12165495 = false;
        break BeforeRet;
        }
        
        L14: do {
          F.line = 422;
          var key_12185214 = null;
          F.line = 422;
          var val_12185215 = null;
          F.line = 1650;
          var colontmp__14194779 = ({data: null, counter: 0, first: 0, last: 0});
          F.line = 422;
          var Tmp15 = a_12165493;
          if (ConstSet101[Tmp15.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          nimCopy(colontmp__14194779, Tmp15.fields, NTI11996067);
          F.line = 1676;
          var l_14194781 = len_12175128(colontmp__14194779);
          if ((0 < colontmp__14194779.counter)) {
          F.line = 1255;
          var h_14194782 = colontmp__14194779.first;
          L16: do {
            F.line = 1256;
              L17: while (true) {
              if (!(0 <= h_14194782)) break L17;
                F.line = 1257;
                var nxt_14194784 = colontmp__14194779.data[chckIndx(h_14194782, 0, (colontmp__14194779.data != null ? colontmp__14194779.data.length : 0)+0-1)-0].Field1;
                if (is_filled_1004018(colontmp__14194779.data[chckIndx(h_14194782, 0, (colontmp__14194779.data != null ? colontmp__14194779.data.length : 0)+0-1)-0].Field0)) {
                F.line = 422;
                key_12185214 = colontmp__14194779.data[chckIndx(h_14194782, 0, (colontmp__14194779.data != null ? colontmp__14194779.data.length : 0)+0-1)-0].Field2;
                F.line = 1678;
                val_12185215 = colontmp__14194779.data[chckIndx(h_14194782, 0, (colontmp__14194779.data != null ? colontmp__14194779.data.length : 0)+0-1)-0].Field3;
                  var Tmp18 = b_12165494;
                  if (ConstSet102[Tmp18.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(has_key_12185326(Tmp18.fields, key_12185214))) {
                F.line = 423;
                result_12165495 = false;
                break BeforeRet;
                }
                
                  var Tmp19 = b_12165494;
                  if (ConstSet103[Tmp19.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(HEX3DHEX3D_12165491((Tmp20 = HEX5BHEX5D_12190146(Tmp19.fields, key_12185214), Tmp20)[0][Tmp20[1]], val_12185215))) {
                F.line = 424;
                result_12165495 = false;
                break BeforeRet;
                }
                
                if (!((len_12175128(colontmp__14194779) == l_14194781))) {
                F.line = 1679;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tables.nim(1679, 11) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 1260;
                h_14194782 = nxt_14194784;
              }
          } while(false);
          }
          
        } while(false);
        F.line = 425;
        result_12165495 = true;
        break;
      }
    }
    }
  } while (false);
  framePtr = F.prev;

  return result_12165495;

}
function invalid_format_string_9975046() {
  var F={procname:"strutils.invalidFormatString",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2620;
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
  framePtr = F.prev;

  
}
function nsuToLowerAsciiChar(c_9125023) {
  var result_9125024 = 0;

  var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet108[c_9125023] != undefined)) {
    F.line = 209;
    result_9125024 = chckRange(addInt(c_9125023, 32), 0, 255);
    }
    else {
      F.line = 211;
      result_9125024 = c_9125023;
    }
    
  framePtr = F.prev;

  return result_9125024;

}
function nsuCmpIgnoreStyle(a_9185022, b_9185023) {
          var Tmp7;
          var Tmp8;

  var result_9185024 = 0;

  BeforeRet: do {
    var i_9185026 = 0;
    var j_9185028 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          L3: do {
              L4: while (true) {
              if (!((i_9185026 < (a_9185022 != null ? a_9185022.length : 0)) && (a_9185022[i_9185026] == 95))) break L4;
                i_9185026 += 1;
              }
          } while(false);
          L5: do {
              L6: while (true) {
              if (!((j_9185028 < (b_9185023 != null ? b_9185023.length : 0)) && (b_9185023[j_9185028] == 95))) break L6;
                j_9185028 += 1;
              }
          } while(false);
          if ((i_9185026 < (a_9185022 != null ? a_9185022.length : 0))) {
          Tmp7 = nsuToLowerAsciiChar(a_9185022[i_9185026]);
          }
          else {
          Tmp7 = 0;
          }
          
          var aa_9185041 = Tmp7;
          if ((j_9185028 < (b_9185023 != null ? b_9185023.length : 0))) {
          Tmp8 = nsuToLowerAsciiChar(b_9185023[j_9185028]);
          }
          else {
          Tmp8 = 0;
          }
          
          var bb_9185042 = Tmp8;
          result_9185024 = (aa_9185041 - bb_9185042);
          if (!((result_9185024 == 0))) {
          break BeforeRet;
          }
          
          if (((a_9185022 != null ? a_9185022.length : 0) <= i_9185026)) {
          if (((b_9185023 != null ? b_9185023.length : 0) <= j_9185028)) {
          result_9185024 = 0;
          break BeforeRet;
          }
          
          result_9185024 = -1;
          break BeforeRet;
          }
          else {
          if (((b_9185023 != null ? b_9185023.length : 0) <= j_9185028)) {
          result_9185024 = 1;
          break BeforeRet;
          }
          }
          i_9185026 += 1;
          j_9185028 += 1;
        }
    } while(false);
  } while (false);

  return result_9185024;

}
function find_normalized_9975014(x_9975016, in_array_9975018) {
  var result_9975019 = 0;

  var F={procname:"strutils.findNormalized",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 2612;
    var i_9975021 = 0;
    L1: do {
      F.line = 2613;
        L2: while (true) {
        if (!(i_9975021 < (in_array_9975018 != null ? (in_array_9975018.length-1) : -1))) break L2;
          if ((nsuCmpIgnoreStyle(x_9975016, in_array_9975018[chckIndx(i_9975021, 0, (in_array_9975018 != null ? in_array_9975018.length : 0)+0-1)-0]) == 0)) {
          F.line = 2614;
          result_9975019 = i_9975021;
          break BeforeRet;
          }
          
          F.line = 2615;
          i_9975021 = addInt(i_9975021, 2);
        }
    } while(false);
    F.line = 2617;
    result_9975019 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9975019;

}
function nsuAddf(s_9980018, s_9980018_Idx, formatstr_9980019, a_9980021) {
                  var Tmp5;
            var Tmp6;
              var Tmp7;
            var Tmp10;
              var Tmp11;
                var Tmp12;
                  var Tmp15;
              var Tmp16;

  var F={procname:"strutils.addf",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2626;
    var i_9980025 = 0;
    F.line = 2627;
    var num_9980027 = 0;
    L1: do {
      F.line = 2628;
        L2: while (true) {
        if (!(i_9980025 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) break L2;
          if (((formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 36) && (addInt(i_9980025, 1) < (formatstr_9980019 != null ? formatstr_9980019.length : 0)))) {
          F.line = 2630;
          switch (formatstr_9980019[chckIndx(addInt(i_9980025, 1), 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]) {
          case 35:
            if (((a_9980021 != null ? (a_9980021.length-1) : -1) < num_9980027)) {
            F.line = 2632;
            invalid_format_string_9975046();
            }
            
            F.line = 2633;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(num_9980027, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(num_9980027, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            F.line = 2634;
            i_9980025 = addInt(i_9980025, 2);
            F.line = 2635;
            num_9980027 = addInt(num_9980027, 1);
            break;
          case 36:
            F.line = 2637;
            if (s_9980018[s_9980018_Idx] != null) { addChar(s_9980018[s_9980018_Idx], 36); } else { s_9980018[s_9980018_Idx] = [36]; };
            F.line = 2638;
            i_9980025 = addInt(i_9980025, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            F.line = 2640;
            var j_9985025 = 0;
            F.line = 2641;
            i_9980025 = addInt(i_9980025, 1);
            F.line = 2642;
            var negative_9985032 = (formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 45);
            if (negative_9985032) {
            F.line = 2643;
            i_9980025 = addInt(i_9980025, 1);
            }
            
            L3: do {
              F.line = 2644;
                L4: while (true) {
                  if (!(i_9980025 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) Tmp5 = false; else {                    Tmp5 = (ConstSet105[formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined);                  }                if (!Tmp5) break L4;
                  F.line = 2645;
                  j_9985025 = subInt(addInt(mulInt(j_9985025, 10), formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]), 48);
                  F.line = 2646;
                  i_9980025 = addInt(i_9980025, 1);
                }
            } while(false);
            F.line = 2647;
            if (!(negative_9985032)) {
            Tmp6 = subInt(j_9985025, 1);
            }
            else {
            Tmp6 = subInt((a_9980021 != null ? a_9980021.length : 0), j_9985025);
            }
            
            var idx_9990025 = Tmp6;
              if ((idx_9990025 < 0)) Tmp7 = true; else {                Tmp7 = ((a_9980021 != null ? (a_9980021.length-1) : -1) < idx_9990025);              }            if (Tmp7) {
            F.line = 2648;
            invalid_format_string_9975046();
            }
            
            F.line = 2649;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(idx_9990025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(idx_9990025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            break;
          case 123:
            F.line = 2651;
            var j_9995006 = addInt(i_9980025, 2);
            F.line = 2652;
            var k_9995008 = 0;
            F.line = 2653;
            var negative_9995009 = (formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 45);
            if (negative_9995009) {
            F.line = 2654;
            j_9995006 = addInt(j_9995006, 1);
            }
            
            F.line = 2655;
            var is_number_9995017 = 0;
            L8: do {
              F.line = 2656;
                L9: while (true) {
                if (!((j_9995006 < (formatstr_9980019 != null ? formatstr_9980019.length : 0)) && !((ConstSet106[formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined)))) break L9;
                  if ((ConstSet107[formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined)) {
                  F.line = 2658;
                  k_9995008 = subInt(addInt(mulInt(k_9995008, 10), formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]), 48);
                  if ((is_number_9995017 == 0)) {
                  F.line = 2659;
                  is_number_9995017 = 1;
                  }
                  
                  }
                  else {
                    F.line = 2661;
                    is_number_9995017 = -1;
                  }
                  
                  F.line = 2662;
                  j_9995006 = addInt(j_9995006, 1);
                }
            } while(false);
            if ((is_number_9995017 == 1)) {
            F.line = 2664;
            if (!(negative_9995009)) {
            Tmp10 = subInt(k_9995008, 1);
            }
            else {
            Tmp10 = subInt((a_9980021 != null ? a_9980021.length : 0), k_9995008);
            }
            
            var idx_10005025 = Tmp10;
              if ((idx_10005025 < 0)) Tmp11 = true; else {                Tmp11 = ((a_9980021 != null ? (a_9980021.length-1) : -1) < idx_10005025);              }            if (Tmp11) {
            F.line = 2665;
            invalid_format_string_9975046();
            }
            
            F.line = 2666;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(idx_10005025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(idx_10005025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            }
            else {
              F.line = 2668;
              var x_10010006 = find_normalized_9975014(substr_341022(formatstr_9980019, addInt(i_9980025, 2), subInt(j_9995006, 1)), a_9980021);
                if (!(0 <= x_10010006)) Tmp12 = false; else {                  Tmp12 = (x_10010006 < (a_9980021 != null ? (a_9980021.length-1) : -1));                }              if (Tmp12) {
              F.line = 2669;
              if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(addInt(x_10010006, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(addInt(x_10010006, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
              }
              else {
                F.line = 2670;
              invalid_format_string_9975046();
              }
              
            }
            
            F.line = 2671;
            i_9980025 = addInt(j_9995006, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            F.line = 2673;
            var j_10015006 = addInt(i_9980025, 1);
            L13: do {
              F.line = 2674;
                L14: while (true) {
                  if (!(j_10015006 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) Tmp15 = false; else {                    Tmp15 = (ConstSet109[formatstr_9980019[chckIndx(j_10015006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined);                  }                if (!Tmp15) break L14;
                  F.line = 2674;
                  j_10015006 = addInt(j_10015006, 1);
                }
            } while(false);
            F.line = 2675;
            var x_10020013 = find_normalized_9975014(substr_341022(formatstr_9980019, addInt(i_9980025, 1), subInt(j_10015006, 1)), a_9980021);
              if (!(0 <= x_10020013)) Tmp16 = false; else {                Tmp16 = (x_10020013 < (a_9980021 != null ? (a_9980021.length-1) : -1));              }            if (Tmp16) {
            F.line = 2676;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(addInt(x_10020013, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(addInt(x_10020013, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            }
            else {
              F.line = 2677;
            invalid_format_string_9975046();
            }
            
            F.line = 2678;
            i_9980025 = j_10015006;
            break;
          default: 
            F.line = 2680;
            invalid_format_string_9975046();
            break;
          }
          }
          else {
            F.line = 2682;
            if (s_9980018[s_9980018_Idx] != null) { addChar(s_9980018[s_9980018_Idx], formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = [formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]]; };
            F.line = 2683;
            i_9980025 = addInt(i_9980025, 1);
          }
          
        }
    } while(false);
  framePtr = F.prev;

  
}
function nsuFormatOpenArray(formatstr_10025027, a_10025029) {
  var result_10025030 = [null];

  var F={procname:"strutils.%",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2730;
    result_10025030[0] = nimCopy(null, mnewString(0), NTI112);
    F.line = 2731;
    nsuAddf(result_10025030, 0, formatstr_10025027, a_10025029);
  framePtr = F.prev;

  return result_10025030[0];

}
function is_undefined_315483(x_315486) {
  var result_315487 = false;

  var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_315487 = x_315486 === undefined;
  framePtr = F.prev;

  return result_315487;

}
function add_quoted_12525201(s_12525204, s_12525204_Idx, x_12525205) {
  var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2807;
    if (s_12525204[s_12525204_Idx] != null) { s_12525204[s_12525204_Idx] = (s_12525204[s_12525204_Idx]).concat(reprEnum(x_12525205, NTI11996041)); } else { s_12525204[s_12525204_Idx] = reprEnum(x_12525205, NTI11996041).slice(); };
  framePtr = F.prev;

  
}
function collection_to_string_12525015(x_12525018, prefix_12525019, separator_12525020, suffix_12525021) {
  var result_12525022 = [null];

  var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"dollars.nim",line:0};
  framePtr = F;
    F.line = 106;
    result_12525022[0] = nimCopy(null, prefix_12525019, NTI112);
    F.line = 107;
    var first_element_12525023 = true;
    L1: do {
      F.line = 108;
      var value_12525069 = 0;
      F.line = 37;
      var i_14194814 = 0;
      L2: do {
        F.line = 38;
          L3: while (true) {
          if (!(i_14194814 <= 6)) break L3;
            if ((x_12525018[i_14194814] != undefined)) {
            F.line = 108;
            value_12525069 = i_14194814;
            if (first_element_12525023) {
            F.line = 110;
            first_element_12525023 = false;
            }
            else {
              F.line = 112;
            if (result_12525022[0] != null) { result_12525022[0] = (result_12525022[0]).concat(separator_12525020); } else { result_12525022[0] = separator_12525020.slice(); };
            }
            
            F.line = 121;
            add_quoted_12525201(result_12525022, 0, value_12525069);
            }
            
            F.line = 40;
            i_14194814 += 1;
          }
      } while(false);
    } while(false);
    F.line = 122;
    if (result_12525022[0] != null) { result_12525022[0] = (result_12525022[0]).concat(suffix_12525021); } else { result_12525022[0] = suffix_12525021.slice(); };
  framePtr = F.prev;

  return result_12525022[0];

}
function HEX24_12525009(x_12525013) {
  var result_12525014 = null;

  var F={procname:"$.$",prev:framePtr,filename:"dollars.nim",line:0};
  framePtr = F;
    F.line = 125;
    result_12525014 = nimCopy(null, collection_to_string_12525015(x_12525013, makeNimstrLit("{"), makeNimstrLit(", "), makeNimstrLit("}")), NTI112);
  framePtr = F.prev;

  return result_12525014;

}
function len_12205341(n_12205343) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_12205344 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 456;
    switch (n_12205343.kind) {
    case 6:
      F.line = 457;
      var Tmp1 = n_12205343;
      if (ConstSet111[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_12205344 = ((Tmp2 = Tmp1.elems, Tmp2) != null ? Tmp2.length : 0);
      break;
    case 5:
      F.line = 458;
      var Tmp3 = n_12205343;
      if (ConstSet112[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_12205344 = len_12175128(Tmp3.fields);
      break;
    default: 
      break;
    }
  framePtr = F.prev;

  return result_12205344;

}
function add_int_325201(result_325204, result_325204_Idx, x_325205) {
  var F={procname:"system.addInt",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2347;
    if (result_325204[result_325204_Idx] != null) { result_325204[result_325204_Idx] = (result_325204[result_325204_Idx]).concat(cstrToNimstr((x_325205)+"")); } else { result_325204[result_325204_Idx] = cstrToNimstr((x_325205)+"").slice(); };
  framePtr = F.prev;

  
}
function new_13660008() {
  var result_13660012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_13660202 = null;
    F.line = 851;
    r_13660202 = ({name: null, description: null});
    F.line = 852;
    result_13660012 = r_13660202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_13660012;

}
function init_from_json_12510865(dst_12510868, dst_12510868_Idx, json_node_12510869, json_path_12510871, json_path_12510871_Idx) {
      var Tmp1;

  var F={procname:"json.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_12510869, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12510871[json_path_12510871_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet115[json_node_12510869.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12511012_12525465 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet116), nimCopy(null, json_path_12510871[json_path_12510871_Idx], NTI112), reprEnum(json_node_12510869.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12511012_12525465, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_12510869.kind == 0)) {
    F.line = 992;
    dst_12510868[dst_12510868_Idx] = nimCopy(null, [], NTI112);
    }
    else {
      F.line = 994;
      var Tmp1 = json_node_12510869;
      if (ConstSet117[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      dst_12510868[dst_12510868_Idx] = nimCopy(null, Tmp1.str, NTI112);
    }
    
  framePtr = F.prev;

  
}
function get_or_default_12295192(t_12295197, key_12295198) {
  var result_12295199 = null;

  var F={procname:"getOrDefault.getOrDefault",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 181;
    var hcHEX60gensym12295200_12300001 = [0];
    F.line = 182;
    var indexHEX60gensym12295201_12300010 = raw_get_12190157(t_12295197, key_12295198, hcHEX60gensym12295200_12300001, 0);
    if ((0 <= indexHEX60gensym12295201_12300010)) {
    F.line = 183;
    result_12295199 = t_12295197.data[chckIndx(indexHEX60gensym12295201_12300010, 0, (t_12295197.data != null ? t_12295197.data.length : 0)+0-1)-0].Field3;
    }
    
  framePtr = F.prev;

  return result_12295199;

}
function get_or_default_12315016(node_12315018, key_12315019) {
      var Tmp1;
    var Tmp2;

  var result_12315020 = null;

  var F={procname:"json.getOrDefault",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
      if (!!((node_12315018 == null))) Tmp1 = false; else {        Tmp1 = (node_12315018.kind == 5);      }    if (Tmp1) {
    F.line = 524;
    var Tmp2 = node_12315018;
    if (ConstSet118[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    result_12315020 = get_or_default_12295192(Tmp2.fields, key_12315019);
    }
    
  framePtr = F.prev;

  return result_12315020;

}
function init_from_json_13660252(dst_13660256, json_node_13660257, json_path_13660258, json_path_13660258_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_13660261 = (json_path_13660258[json_path_13660258_Idx] != null ? json_path_13660258[json_path_13660258_Idx].length : 0);
    F.line = 1114;
    if (json_path_13660258[json_path_13660258_Idx] != null) { json_path_13660258[json_path_13660258_Idx] = (json_path_13660258[json_path_13660258_Idx]).concat(makeNimstrLit(".name")); } else { json_path_13660258[json_path_13660258_Idx] = makeNimstrLit(".name"); };
    F.line = 1124;
    init_from_json_12510865(dst_13660256, "name", get_or_default_12315016(json_node_13660257, makeNimstrLit("name")), json_path_13660258, json_path_13660258_Idx);
    F.line = 1125;
    (json_path_13660258[json_path_13660258_Idx] == null ? json_path_13660258[json_path_13660258_Idx] = mnewString(chckRange(original_json_path_len_13660261, 0, 2147483647)) : json_path_13660258[json_path_13660258_Idx].length = chckRange(original_json_path_len_13660261, 0, 2147483647));
    F.line = 1114;
    if (json_path_13660258[json_path_13660258_Idx] != null) { json_path_13660258[json_path_13660258_Idx] = (json_path_13660258[json_path_13660258_Idx]).concat(makeNimstrLit(".description")); } else { json_path_13660258[json_path_13660258_Idx] = makeNimstrLit(".description"); };
    F.line = 1124;
    init_from_json_12510865(dst_13660256, "description", get_or_default_12315016(json_node_13660257, makeNimstrLit("description")), json_path_13660258, json_path_13660258_Idx);
    F.line = 1125;
    (json_path_13660258[json_path_13660258_Idx] == null ? json_path_13660258[json_path_13660258_Idx] = mnewString(chckRange(original_json_path_len_13660261, 0, 2147483647)) : json_path_13660258[json_path_13660258_Idx].length = chckRange(original_json_path_len_13660261, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_13640024(dst_13640029, dst_13640029_Idx, json_node_13640030, json_path_13640031, json_path_13640031_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_13640030, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_13640031[json_path_13640031_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet113[json_node_13640030.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym13640033_13655019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet114), nimCopy(null, json_path_13640031[json_path_13640031_Idx], NTI112), reprEnum(json_node_13640030.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym13640033_13655019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_13640030.kind == 0)) {
    F.line = 1062;
    dst_13640029[dst_13640029_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_13640029[dst_13640029_Idx] = new_13660008();
      F.line = 1065;
      init_from_json_13660252(dst_13640029[dst_13640029_Idx], json_node_13640030, json_path_13640031, json_path_13640031_Idx);
    }
    
  framePtr = F.prev;

  
}
function HEX5BHEX5D_12225569(node_12225571, index_12225572) {
    var Tmp1;
    var Tmp2;

  var result_12225573 = null;

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(!((node_12225571 == null)))) {
    F.line = 474;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/json.nim(474, 9) `not isNil(node)` "));
    }
    
    if (!((node_12225571.kind == 6))) {
    F.line = 475;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/json.nim(475, 9) `node.kind == JArray` "));
    }
    
    F.line = 476;
    var Tmp1 = node_12225571;
    if (ConstSet119[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    result_12225573 = (Tmp2 = Tmp1.elems, Tmp2)[chckIndx(index_12225572, 0, (Tmp2 != null ? Tmp2.length : 0)+0-1)-0];
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12225573;

}
function init_from_json_13620046(dst_13620051, dst_13620051_Idx, json_node_13620052, json_path_13620053, json_path_13620053_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_13620052, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_13620053[json_path_13620053_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet104[json_node_13620052.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym13620055_13635019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet110), nimCopy(null, json_path_13620053[json_path_13620053_Idx], NTI112), reprEnum(json_node_13620052.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym13620055_13635019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1020;
    if (dst_13620051[dst_13620051_Idx] === null) dst_13620051[dst_13620051_Idx] = [];
               if (dst_13620051[dst_13620051_Idx].length < (Tmp1 = chckRange(len_12205341(json_node_13620052), 0, 2147483647), Tmp1)) { for (var i=dst_13620051[dst_13620051_Idx].length;i<Tmp1;++i) dst_13620051[dst_13620051_Idx].push(null); }
               else { dst_13620051[dst_13620051_Idx].length = Tmp1; };
    F.line = 1021;
    var orignal_json_path_len_13640010 = (json_path_13620053[json_path_13620053_Idx] != null ? json_path_13620053[json_path_13620053_Idx].length : 0);
    L2: do {
      F.line = 1022;
      var i_13640019 = 0;
      F.line = 104;
      var colontmp__14194775 = 0;
      F.line = 1022;
      colontmp__14194775 = len_12205341(json_node_13620052);
      F.line = 106;
      var i_14194776 = 0;
      L3: do {
        F.line = 107;
          L4: while (true) {
          if (!(i_14194776 < colontmp__14194775)) break L4;
            F.line = 1022;
            i_13640019 = i_14194776;
            F.line = 1023;
            if (json_path_13620053[json_path_13620053_Idx] != null) { addChar(json_path_13620053[json_path_13620053_Idx], 91); } else { json_path_13620053[json_path_13620053_Idx] = [91]; };
            F.line = 1024;
            add_int_325201(json_path_13620053, json_path_13620053_Idx, i_13640019);
            F.line = 1025;
            if (json_path_13620053[json_path_13620053_Idx] != null) { addChar(json_path_13620053[json_path_13620053_Idx], 93); } else { json_path_13620053[json_path_13620053_Idx] = [93]; };
            F.line = 1026;
            init_from_json_13640024(dst_13620051[dst_13620051_Idx], chckIndx(i_13640019, 0, (dst_13620051[dst_13620051_Idx] != null ? dst_13620051[dst_13620051_Idx].length : 0)+0-1)-0, HEX5BHEX5D_12225569(json_node_13620052, i_13640019), json_path_13620053, json_path_13620053_Idx);
            F.line = 1027;
            (json_path_13620053[json_path_13620053_Idx] == null ? json_path_13620053[json_path_13620053_Idx] = mnewString(chckRange(orignal_json_path_len_13640010, 0, 2147483647)) : json_path_13620053[json_path_13620053_Idx].length = chckRange(orignal_json_path_len_13640010, 0, 2147483647));
            F.line = 109;
            i_14194776 = addInt(i_14194776, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function to_13620038(node_13620042) {
  var result_13620044 = [null];

  var F={procname:"to.to",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1230;
    var json_path_13620045 = [[]];
    F.line = 1231;
    init_from_json_13620046(result_13620044, 0, node_13620042, json_path_13620045, 0);
  framePtr = F.prev;

  return result_13620044[0];

}
function get_var_type_12470050(x_12470052) {
  var result_12470053 = 0;

  var F={procname:"json.getVarType",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 860;
    result_12470053 = 0;
    F.line = 863;
    switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_12470052)))) {
    case "[object Array]":
      F.line = 864;
      result_12470053 = 6;
      break BeforeRet;
      break;
    case "[object Object]":
      F.line = 865;
      result_12470053 = 5;
      break BeforeRet;
      break;
    case "[object Number]":
      if ((x_12470052 % 1.0000000000000000e+00 == 0.0)) {
      F.line = 868;
      result_12470053 = 2;
      break BeforeRet;
      }
      else {
        F.line = 870;
        result_12470053 = 3;
        break BeforeRet;
      }
      
      break;
    case "[object Boolean]":
      F.line = 871;
      result_12470053 = 1;
      break BeforeRet;
      break;
    case "[object Null]":
      F.line = 872;
      result_12470053 = 0;
      break BeforeRet;
      break;
    case "[object String]":
      F.line = 873;
      result_12470053 = 4;
      break BeforeRet;
      break;
    default: 
      if (true) {
      F.line = 874;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/json.nim(874, 18) `false` "));
      }
      
      break;
    }
  } while (false);
  framePtr = F.prev;

  return result_12470053;

}
function new_jarray_12015657() {
  var result_12015659 = null;

  var F={procname:"json.newJArray",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 214;
    result_12015659 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: ({data: null, counter: 0, first: 0, last: 0})};
  framePtr = F.prev;

  return result_12015659;

}
function len_12480214(x_12480216) {
  var result_12480217 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_12470050(x_12480216) == 6))) {
    F.line = 877;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/json.nim(877, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 878;
          result_12480217 = x_12480216.length;
    
  framePtr = F.prev;

  return result_12480217;

}
function add_12045020(father_12045022, child_12045023) {
    var Tmp1;
    var Tmp2;

  var F={procname:"json.add",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((father_12045022.kind == 6))) {
    F.line = 272;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/json.nim(272, 10) `father.kind == JArray` "));
    }
    
    F.line = 273;
    var Tmp1 = father_12045022;
    if (ConstSet120[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_12045023); } else { Tmp2 = [child_12045023]; };
  framePtr = F.prev;

  
}
function HEX5BHEX5D_12500214(x_12500216, y_12500217) {
  var result_12500218 = ({});

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_12470050(x_12500216) == 6))) {
    F.line = 889;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/json.nim(889, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 890;
          result_12500218 = x_12500216[y_12500217];
    
  framePtr = F.prev;

  return result_12500218;

}
function init_ordered_table_11996240(initial_size_11996244) {
  var result_11996246 = ({data: null, counter: 0, first: 0, last: 0});

  var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_955029(initial_size_11996244))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 167;
    result_11996246.counter = 0;
    F.line = 168;
    result_11996246.data = new Array(chckRange(initial_size_11996244, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11996244, 0, 2147483647);++i) {result_11996246.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 170;
    result_11996246.first = -1;
    F.line = 171;
    result_11996246.last = -1;
  framePtr = F.prev;

  return result_11996246;

}
function new_jobject_11996235() {
  var result_11996237 = null;

  var F={procname:"json.newJObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_11996237 = {kind: 5, fields: init_ordered_table_11996240(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
  framePtr = F.prev;

  return result_11996237;

}
function must_rehash_12125601(t_12125604) {
  var result_12125605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_12125604.counter < (t_12125604.data != null ? t_12125604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_12125605 = ((mulInt((t_12125604.data != null ? t_12125604.data.length : 0), 2) < mulInt(t_12125604.counter, 3)) || (subInt((t_12125604.data != null ? t_12125604.data.length : 0), t_12125604.counter) < 4));
  framePtr = F.prev;

  return result_12125605;

}
function raw_insert_12151349(t_12151355, data_12151358, data_12151358_Idx, key_12151359, val_12151360, hc_12151361, h_12151362) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_12151358[data_12151358_Idx][chckIndx(h_12151362, 0, (data_12151358[data_12151358_Idx] != null ? data_12151358[data_12151358_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, key_12151359, NTI112);
    F.line = 23;
    data_12151358[data_12151358_Idx][chckIndx(h_12151362, 0, (data_12151358[data_12151358_Idx] != null ? data_12151358[data_12151358_Idx].length : 0)+0-1)-0].Field3 = val_12151360;
    F.line = 24;
    data_12151358[data_12151358_Idx][chckIndx(h_12151362, 0, (data_12151358[data_12151358_Idx] != null ? data_12151358[data_12151358_Idx].length : 0)+0-1)-0].Field0 = hc_12151361;
    F.line = 1231;
    data_12151358[data_12151358_Idx][chckIndx(h_12151362, 0, (data_12151358[data_12151358_Idx] != null ? data_12151358[data_12151358_Idx].length : 0)+0-1)-0].Field1 = -1;
    if ((t_12151355.first < 0)) {
    F.line = 1232;
    t_12151355.first = h_12151362;
    }
    
    if ((0 <= t_12151355.last)) {
    F.line = 1233;
    data_12151358[data_12151358_Idx][chckIndx(t_12151355.last, 0, (data_12151358[data_12151358_Idx] != null ? data_12151358[data_12151358_Idx].length : 0)+0-1)-0].Field1 = h_12151362;
    }
    
    F.line = 1234;
    t_12151355.last = h_12151362;
  framePtr = F.prev;

  
}
function enlarge_12150180(t_12150186) {
          var Tmp6;
          var Tmp7;

  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1237;
    var n_12150194 = null;
    F.line = 1238;
    n_12150194 = new Array(chckRange(mulInt((t_12150186.data != null ? t_12150186.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_12150186.data != null ? t_12150186.data.length : 0), 2), 0, 2147483647);++i) {n_12150194[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 1239;
    var h_12150333 = t_12150186.first;
    F.line = 1240;
    t_12150186.first = -1;
    F.line = 1241;
    t_12150186.last = -1;
    F.line = 1242;
    var Tmp1 = t_12150186.data; t_12150186.data = n_12150194; n_12150194 = Tmp1;    L2: do {
      F.line = 1243;
        L3: while (true) {
        if (!(0 <= h_12150333)) break L3;
          F.line = 1244;
          var nxt_12150489 = n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field1;
          F.line = 1245;
          var eh_12150638 = n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field0;
          if (is_filled_1004018(eh_12150638)) {
          F.line = 1247;
          var j_12150645 = (eh_12150638 & (t_12150186.data != null ? (t_12150186.data.length-1) : -1));
          L4: do {
            F.line = 1248;
              L5: while (true) {
              if (!is_filled_1004018(t_12150186.data[chckIndx(j_12150645, 0, (t_12150186.data != null ? t_12150186.data.length : 0)+0-1)-0].Field0)) break L5;
                F.line = 1249;
                j_12150645 = next_try_1005014(j_12150645, (t_12150186.data != null ? (t_12150186.data.length-1) : -1));
              }
          } while(false);
          F.line = 1250;
          Tmp6 = n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field2;
          n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field2 = genericReset(n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field2, NTI112);
          Tmp7 = n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field3;
          n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field3 = genericReset(n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field3, NTI11996043);
          raw_insert_12151349(t_12150186, t_12150186, "data", Tmp6, Tmp7, n_12150194[chckIndx(h_12150333, 0, (n_12150194 != null ? n_12150194.length : 0)+0-1)-0].Field0, j_12150645);
          }
          
          F.line = 1251;
          h_12150333 = nxt_12150489;
        }
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_12152149(t_12152154, key_12152155, hc_12152156) {
  var result_12152157 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_12152154.data != null ? t_12152154.data.length : 0) == 0)) {
    F.line = 47;
    result_12152157 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_12155138 = (hc_12152156 & (t_12152154.data != null ? (t_12152154.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_12152154.data[chckIndx(h_12155138, 0, (t_12152154.data != null ? t_12152154.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_12152154.data[chckIndx(h_12155138, 0, (t_12152154.data != null ? t_12152154.data.length : 0)+0-1)-0].Field0 == hc_12152156) && eqStrings(t_12152154.data[chckIndx(h_12155138, 0, (t_12152154.data != null ? t_12152154.data.length : 0)+0-1)-0].Field2, key_12152155))) {
          F.line = 55;
          result_12152157 = h_12155138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_12155138 = next_try_1005014(h_12155138, (t_12152154.data != null ? (t_12152154.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_12152157 = subInt(-1, h_12155138);
  } while (false);
  framePtr = F.prev;

  return result_12152157;

}
function HEX5BHEX5DHEX3D_12065311(t_12065317, key_12065318, val_12065319) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_12065317.data != null ? t_12065317.data.length : 0) == 0)) {
    if (!(is_power_of_two_955029(64))) {
    F.line = 166;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 167;
    t_12065317.counter = 0;
    F.line = 168;
    t_12065317.data = new Array(64); for (var i=0;i<64;++i) {t_12065317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 170;
    t_12065317.first = -1;
    F.line = 171;
    t_12065317.last = -1;
    }
    
    F.line = 57;
    var hc_12090601 = [0];
    F.line = 58;
    var index_12100620 = raw_get_12090621(t_12065317, key_12065318, hc_12090601, 0);
    if ((0 <= index_12100620)) {
    F.line = 59;
    t_12065317.data[chckIndx(index_12100620, 0, (t_12065317.data != null ? t_12065317.data.length : 0)+0-1)-0].Field3 = val_12065319;
    }
    else {
      if (((t_12065317.data != null ? t_12065317.data.length : 0) == 0)) {
      if (!(is_power_of_two_955029(64))) {
      F.line = 166;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/collections/tableimpl.nim(166, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 167;
      t_12065317.counter = 0;
      F.line = 168;
      t_12065317.data = new Array(64); for (var i=0;i<64;++i) {t_12065317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}      F.line = 170;
      t_12065317.first = -1;
      F.line = 171;
      t_12065317.last = -1;
      }
      
      if (must_rehash_12125601(t_12065317)) {
      F.line = 49;
      enlarge_12150180(t_12065317);
      F.line = 50;
      index_12100620 = raw_get_known_hc_12152149(t_12065317, key_12065318, hc_12090601[0]);
      }
      
      F.line = 51;
      index_12100620 = subInt(-1, index_12100620);
      F.line = 52;
      raw_insert_12151349(t_12065317, t_12065317, "data", key_12065318, val_12065319, hc_12090601[0], index_12100620);
      F.line = 60;
      t_12065317.counter = addInt(t_12065317.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function HEX5BHEX5DHEX3D_12156214(obj_12156216, key_12156217, val_12156218) {
    var Tmp1;

  var F={procname:"json.[]=",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((obj_12156216.kind == 5))) {
    F.line = 346;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/pure/json.nim(346, 9) `obj.kind == JObject` "));
    }
    
    F.line = 347;
    var Tmp1 = obj_12156216;
    if (ConstSet121[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    HEX5BHEX5DHEX3D_12065311(Tmp1.fields, key_12156217, val_12156218);
  framePtr = F.prev;

  
}
function new_jint_11996168(n_11996170) {
  var result_11996171 = null;

  var F={procname:"json.newJInt",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 194;
    result_11996171 = {kind: 2, num: n_11996170, str: null, fnum: 0.0, bval: false, fields: ({data: null, counter: 0, first: 0, last: 0}), elems: null};
  framePtr = F.prev;

  return result_11996171;

}
function new_jfloat_11996185(n_11996187) {
  var result_11996188 = null;

  var F={procname:"json.newJFloat",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 198;
    result_11996188 = {kind: 3, fnum: n_11996187, str: null, num: 0, bval: false, fields: ({data: null, counter: 0, first: 0, last: 0}), elems: null};
  framePtr = F.prev;

  return result_11996188;

}
function new_jstring_11996086(s_11996088) {
  var result_11996089 = null;

  var F={procname:"json.newJString",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 186;
    result_11996089 = {kind: 4, str: nimCopy(null, s_11996088, NTI112), num: 0, fnum: 0.0, bval: false, fields: ({data: null, counter: 0, first: 0, last: 0}), elems: null};
  framePtr = F.prev;

  return result_11996089;

}
function new_jbool_11996202(b_11996204) {
  var result_11996205 = null;

  var F={procname:"json.newJBool",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 202;
    result_11996205 = {kind: 1, bval: b_11996204, str: null, num: 0, fnum: 0.0, fields: ({data: null, counter: 0, first: 0, last: 0}), elems: null};
  framePtr = F.prev;

  return result_11996205;

}
function new_jnull_11996219() {
  var result_11996221 = null;

  var F={procname:"json.newJNull",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 206;
    result_11996221 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: ({data: null, counter: 0, first: 0, last: 0}), elems: null};
  framePtr = F.prev;

  return result_11996221;

}
function convert_object_12510214(x_12510216) {
  var result_12510217 = null;

  var F={procname:"json.convertObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 895;
    switch (get_var_type_12470050(x_12510216)) {
    case 6:
      F.line = 897;
      result_12510217 = new_jarray_12015657();
      L1: do {
        F.line = 898;
        var i_12510225 = 0;
        F.line = 104;
        var colontmp__14194822 = 0;
        F.line = 898;
        colontmp__14194822 = len_12480214(x_12510216);
        F.line = 106;
        var i_14194823 = 0;
        L2: do {
          F.line = 107;
            L3: while (true) {
            if (!(i_14194823 < colontmp__14194822)) break L3;
              F.line = 898;
              i_12510225 = i_14194823;
              F.line = 899;
              add_12045020(result_12510217, convert_object_12510214(HEX5BHEX5D_12500214(x_12510216, i_12510225)));
              F.line = 109;
              i_14194823 = addInt(i_14194823, 1);
            }
        } while(false);
      } while(false);
      break;
    case 5:
      F.line = 901;
      result_12510217 = new_jobject_11996235();
      F.line = 902;
      for (var property in x_12510216) {
        if (x_12510216.hasOwnProperty(property)) {
      
      F.line = 905;
      var nim_property_12510227 = null;
      F.line = 906;
      var nim_value_12510228 = ({});
      F.line = 907;
      nim_property_12510227 = property; nim_value_12510228 = x_12510216[property];
      F.line = 908;
      HEX5BHEX5DHEX3D_12156214(result_12510217, cstrToNimstr(nim_property_12510227), convert_object_12510214(nim_value_12510228));
      F.line = 909;
      }}
      break;
    case 2:
      F.line = 911;
      result_12510217 = new_jint_11996168(x_12510216);
      break;
    case 3:
      F.line = 913;
      result_12510217 = new_jfloat_11996185(x_12510216);
      break;
    case 4:
      F.line = 915;
      result_12510217 = new_jstring_11996086(cstrToNimstr(x_12510216));
      break;
    case 1:
      F.line = 917;
      result_12510217 = new_jbool_11996202(x_12510216);
      break;
    case 0:
      F.line = 919;
      result_12510217 = new_jnull_11996219();
      break;
    }
  framePtr = F.prev;

  return result_12510217;

}
function parse_json_12510257(buffer_12510259) {
  var result_12510260 = null;

  var F={procname:"json.parseJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 925;
    result_12510260 = convert_object_12510214(JSON.parse(toJSStr(buffer_12510259)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12510260;

}
async function request_groups_13590001() {
  var result_13590012 = null;

  var F={procname:"groups.request_groups",prev:framePtr,filename:"groups.nim",line:0};
  framePtr = F;
    F.line = 8;
    var res_13615027 = (await (window.fetch(("/group.json"))));
    F.line = 9;
    var text_13620026 = (await (res_13615027.text()));
    F.line = 10;
    var json_13620033 = cstrToNimstr((text_13620026));
    F.line = 11;
    result_13590012 = to_13620038(parse_json_12510257(json_13620033));
  framePtr = F.prev;

  return result_13590012;

}
async function init_13685001(ev_13685026) {
  var result_13685031 = null;

  var F={procname:"groups.init",prev:framePtr,filename:"groups.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var groups_13685053 = (await request_groups_13590001());
    F.line = 21;
    ev_13685026.set(groups_13685053, [[]]);
    F.line = 131;
    result_13685031 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_13685031;

}
function add_14015218(x_14015223, x_14015223_Idx, y_14015225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_14015231 = (x_14015223[x_14015223_Idx] != null ? x_14015223[x_14015223_Idx].length : 0);
    F.line = 1209;
    if (x_14015223[x_14015223_Idx] === null) x_14015223[x_14015223_Idx] = [];
               if (x_14015223[x_14015223_Idx].length < (Tmp1 = chckRange(addInt(xl_14015231, (y_14015225 != null ? y_14015225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_14015223[x_14015223_Idx].length;i<Tmp1;++i) x_14015223[x_14015223_Idx].push(null); }
               else { x_14015223[x_14015223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_14015256 = 0;
      F.line = 66;
      var colontmp__14194863 = 0;
      F.line = 1210;
      colontmp__14194863 = (y_14015225 != null ? (y_14015225.length-1) : -1);
      F.line = 77;
      var res_14194864 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_14194864 <= colontmp__14194863)) break L4;
            F.line = 1210;
            i_14015256 = res_14194864;
            F.line = 1210;
            x_14015223[x_14015223_Idx][chckIndx(addInt(xl_14015231, i_14015256), 0, (x_14015223[x_14015223_Idx] != null ? x_14015223[x_14015223_Idx].length : 0)+0-1)-0] = y_14015225[chckIndx(i_14015256, 0, (y_14015225 != null ? y_14015225.length : 0)+0-1)-0];
            F.line = 80;
            res_14194864 = addInt(res_14194864, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_13991312(cfg_13991317, node_13991318) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_13991382 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_13991382 = nimCopy(null, [], NTI13991397);
    F.line = 620;
    if (eqStrings(cfg_13991317.selector, [])) {
    Tmp1 = [node_13991318];
    }
    else {
    Tmp1 = node_13991318.querySelectorAll(toJSStr(cfg_13991317.selector));
    }
    
    var matched_nodes_13991411 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_13991411 != null ? matched_nodes_13991411.length : 0) == 0)) {
    F.line = 622;
    var selector_13991417 = nimCopy(null, cfg_13991317.selector, NTI112);
    F.line = 623;
    var fmt_res_13991418 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_13991418[0] != null) { fmt_res_13991418[0] = (fmt_res_13991418[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_13991418[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_13991418, 0, selector_13991417, []);
    F.line = 623;
    if (fmt_res_13991418[0] != null) { fmt_res_13991418[0] = (fmt_res_13991418[0]).concat(makeNimstrLit("\'")); } else { fmt_res_13991418[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_13991418[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_14000008 = null;
      F.line = 184;
      var i_14194859 = 0;
      F.line = 185;
      var l_14194860 = (matched_nodes_13991411 != null ? matched_nodes_13991411.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_14194859 < l_14194860)) break L4;
            F.line = 625;
            matched_node_14000008 = matched_nodes_13991411[chckIndx(i_14194859, 0, (matched_nodes_13991411 != null ? matched_nodes_13991411.length : 0)+0-1)-0];
            F.line = 626;
            var match_14000016 = {refresh: nimCopy(null, cfg_13991317.refresh, NTI13735659), iter: cfg_13991317.iter, node: matched_node_14000008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_14000016.node = matched_node_14000008;
            if (match_14000016.iter) {
            var Tmp5 = match_14000016;
            if (ConstSet122[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_13991317;
            if (ConstSet123[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI13735796);
            var Tmp7 = match_14000016;
            if (ConstSet124[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_14000008).createComment(toJSStr(cstrToNimstr(((matched_node_14000008).outerHTML))));
            var Tmp8 = match_14000016;
            if (ConstSet125[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_13991317.mount;
            var Tmp9 = match_14000016;
            if (ConstSet126[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_13991317.cmatches, NTI13735698);
            var Tmp10 = match_14000016;
            if (ConstSet127[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI14005029);
            F.line = 637;
            var Tmp11 = match_14000016;
            if (ConstSet128[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_14000008.parentNode.replaceChild(Tmp11.anchor, matched_node_14000008);
            }
            else {
              var Tmp12 = match_14000016;
              if (ConstSet129[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_13991317;
              if (ConstSet130[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_14000016;
              if (ConstSet131[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_14000016;
                if (ConstSet132[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_14000016;
              if (ConstSet133[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_13991317;
              if (ConstSet134[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI13735732);
              var Tmp18 = match_14000016;
              if (ConstSet135[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI14005056);
              var Tmp19 = match_14000016;
              if (ConstSet136[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_14000016;
              if (ConstSet137[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_13991317.mount == null))) {
              var Tmp21 = match_14000016;
              if (ConstSet138[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_13991317.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_14015214 = null;
                  F.line = 184;
                  var i_14194856 = 0;
                  F.line = 185;
                  var l_14194857 = (cfg_13991317.cmatches != null ? cfg_13991317.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_14194856 < l_14194857)) break L24;
                        F.line = 652;
                        submatch_14015214 = cfg_13991317.cmatches[chckIndx(i_14194856, 0, (cfg_13991317.cmatches != null ? cfg_13991317.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_14000016;
                        if (ConstSet139[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_14015218(Tmp25, "matches", submatch_14015214.compile(matched_node_14000008));
                        F.line = 188;
                        i_14194856 = addInt(i_14194856, 1);
                        if (!(((cfg_13991317.cmatches != null ? cfg_13991317.cmatches.length : 0) == l_14194857))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_13991382 != null) { result_13991382.push(match_14000016); } else { result_13991382 = [match_14000016]; };
            F.line = 188;
            i_14194859 = addInt(i_14194859, 1);
            if (!(((matched_nodes_13991411 != null ? matched_nodes_13991411.length : 0) == l_14194860))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_13991382;

}
function sub_14055394(ts_14055399, val_14055401, val_14055401_Idx, set_val_14055403, update_14055404) {
    function HEX3Aanonymous_14055417(new_value_14055419, changed_path_14055421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_14055399.set(val_14055401, val_14055401_Idx, new_value_14055419);
        F.line = 360;
        var new_paths_14055423 = null;
        L1: do {
          F.line = 361;
          var p_14055430 = null;
          F.line = 184;
          var i_14194910 = 0;
          F.line = 185;
          var l_14194911 = (changed_path_14055421 != null ? changed_path_14055421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14194910 < l_14194911)) break L3;
                F.line = 361;
                p_14055430 = changed_path_14055421[chckIndx(i_14194910, 0, (changed_path_14055421 != null ? changed_path_14055421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_14055423 != null) { new_paths_14055423.push(HEX26_13760256(ts_14055399.id, p_14055430)); } else { new_paths_14055423 = [HEX26_13760256(ts_14055399.id, p_14055430)]; };
                F.line = 188;
                i_14194910 = addInt(i_14194910, 1);
                if (!(((changed_path_14055421 != null ? changed_path_14055421.length : 0) == l_14194911))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_14055403 == null))) {
        F.line = 364;
        set_val_14055403(val_14055401[val_14055401_Idx], new_paths_14055423);
        }
        else {
        if (!((update_14055404 == null))) {
        F.line = 367;
        update_14055404({paths: nimCopy(null, new_paths_14055423, NTI14055422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_14055406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_14055403 == null) && (update_14055404 == null))) {
    F.line = 357;
    result_14055406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_14055406 = HEX3Aanonymous_14055417;
  } while (false);
  framePtr = F.prev;

  return result_14055406;

}
function compile_14055586(cfgs_14055591, node_14055592) {
  var result_14055595 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_14055595[0] = nimCopy(null, [], NTI14055610);
    L1: do {
      F.line = 658;
      var cfg_14055617 = null;
      F.line = 184;
      var i_14194916 = 0;
      F.line = 185;
      var l_14194917 = (cfgs_14055591 != null ? cfgs_14055591.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14194916 < l_14194917)) break L3;
            F.line = 658;
            cfg_14055617 = cfgs_14055591[chckIndx(i_14194916, 0, (cfgs_14055591 != null ? cfgs_14055591.length : 0)+0-1)-0];
            F.line = 659;
            add_14015218(result_14055595, 0, cfg_14055617.compile(node_14055592));
            F.line = 188;
            i_14194916 = addInt(i_14194916, 1);
            if (!(((cfgs_14055591 != null ? cfgs_14055591.length : 0) == l_14194917))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14055595[0];

}
function create_iter_item_14055520(match_14055525, parent_node_14055526) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_14055528 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_14055533 = null;
    F.line = 683;
    var node_14055534 = null;
      var Tmp1 = match_14055525;
      if (ConstSet153[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_14055525;
    if (ConstSet154[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_14055533 = Tmp2.mount_template.clone();
    F.line = 686;
    node_14055534 = comp_14055533.node();
    }
    else {
      F.line = 688;
      node_14055534 = match_14055525.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_14055525;
    if (ConstSet155[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_14055528 = {serial: 0, mount: comp_14055533, node: node_14055534, matches: compile_14055586(Tmp3.match_templates, node_14055534), skip: false};
    F.line = 694;
    var Tmp4 = match_14055525;
    if (ConstSet156[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_14055526.insertBefore(node_14055534, Tmp4.anchor);
  framePtr = F.prev;

  return result_14055528;

}
function detach_14075493(iter_item_14075497, parent_node_14075498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_14075498.removeChild(iter_item_14075497.node);
  framePtr = F.prev;

  
}
function pop_14075243(s_14075248, s_14075248_Idx) {
  var result_14075249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_14075255 = subInt((s_14075248[s_14075248_Idx] != null ? s_14075248[s_14075248_Idx].length : 0), 1);
    F.line = 1784;
    result_14075249 = s_14075248[s_14075248_Idx][chckIndx(l_14075255, 0, (s_14075248[s_14075248_Idx] != null ? s_14075248[s_14075248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_14075248[s_14075248_Idx] === null) s_14075248[s_14075248_Idx] = [];
               if (s_14075248[s_14075248_Idx].length < chckRange(l_14075255, 0, 2147483647)) { for (var i=s_14075248[s_14075248_Idx].length;i<chckRange(l_14075255, 0, 2147483647);++i) s_14075248[s_14075248_Idx].push(null); }
               else { s_14075248[s_14075248_Idx].length = chckRange(l_14075255, 0, 2147483647); };
  framePtr = F.prev;

  return result_14075249;

}
function update_do_14026880(match_14026885, init_val_14026886, set_val_14026888, refresh_list_14026889) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_14035261() {
            var result_14035263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_14035263 = item_14035252;
            framePtr = F.prev;

            return result_14035263;

          }
          var Tmp16;
            function HEX3Aanonymous_14035281(new_value_14035283, path_14035300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_14035301 = mnewString(0);
                F.line = 747;
                if (fmt_res_14035301 != null) { fmt_res_14035301 = (fmt_res_14035301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_14035301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_14035301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14045017(new_value_14045019, path_14045036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_14045037 = mnewString(0);
                F.line = 754;
                if (fmt_res_14045037 != null) { fmt_res_14045037 = (fmt_res_14045037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_14045037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_14045037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14055050(refresh_list_14055052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_14026550(match_14026885, val_14035201[0], set_val_14026888, refresh_list_14055052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_14075524() {
        var result_14075526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_14075526 = converted_val_14075515;
        framePtr = F.prev;

        return result_14075526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_14075606(refresh_list_14075608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_14026550(match_14026885, val_14035201[0], set_val_14026888, refresh_list_14075608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_14026888 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_14035201 = [nimCopy(null, init_val_14026886, NTI13586042)];
    if (match_14026885.iter) {
    F.line = 720;
    var i_14035203 = 0;
    F.line = 721;
    var Tmp1 = match_14026885;
    if (ConstSet140[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_14035206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_14035207 = null;
    F.line = 723;
    var it_simple_14035212 = null;
    F.line = 724;
    var it_serial_14035217 = null;
    F.line = 725;
    var it_select_14035225 = null;
    F.line = 726;
    var Tmp2 = match_14026885;
    if (ConstSet141[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_14026885;
      if (ConstSet143[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet142[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_14035212 = Tmp4.simple(val_14035201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_14026885;
      if (ConstSet145[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet144[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_14035217 = Tmp6.serial(val_14035201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_14026885;
      if (ConstSet147[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet146[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_14035225 = Tmp8.selector(val_14035201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_14026885;
            if (ConstSet148[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14035203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_14026885;
          if (ConstSet149[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_14035203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_14035250 = [Tmp11];
          F.line = 736;
          var changed_14035251 = is_changed_10240207(refresh_list_14026889);
          F.line = 737;
          var item_14035252 = null;
          F.line = 738;
          var accessor_14035277 = {get: HEX3Aanonymous_14035261, set: null, m_type: NTI13735632};
          F.line = 741;
          var Tmp16 = match_14026885;
          if (ConstSet150[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_14035280 = it_simple_14035212();
            if ((it_14035280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_14035252 = it_14035280["Field1"];
            F.line = 746;
            accessor_14035277.set = HEX3Aanonymous_14035281;
            break;
          case 1:
            F.line = 750;
            var it_14045016 = it_serial_14035217(serial_14035250, 0);
            if ((it_14045016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_14035252 = it_14045016["Field1"];
            F.line = 753;
            accessor_14035277.set = HEX3Aanonymous_14045017;
            break;
          case 2:
            F.line = 757;
            var it_14055015 = it_select_14035225();
            if ((it_14055015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_14035252 = it_14055015.get(val_14035201[0]);
            F.line = 760;
            accessor_14035277.set = sub_14055394(it_14055015, val_14035201, 0, set_val_14026888, HEX3Aanonymous_14055050);
            F.line = 762;
            sub_list_14035207 = walk_10245019(refresh_list_14026889, it_14055015.id);
            F.line = 763;
            changed_14035251 = is_changed_10240207(sub_list_14035207);
            break;
          }
          F.line = 766;
          var iter_item_14055503 = null;
          F.line = 767;
          var inited_14055504 = false;
            var Tmp17 = match_14026885;
            if (ConstSet151[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14035203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_14026885;
          if (ConstSet152[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_14055503 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_14035203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_14055504 = true;
          F.line = 773;
          changed_14035251 = true;
          }
          else {
            F.line = 775;
            iter_item_14055503 = create_iter_item_14055520(match_14026885, parent_node_14035206);
            F.line = 776;
            var Tmp21 = match_14026885;
            if (ConstSet157[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_14055503); } else { Tmp22 = [iter_item_14055503]; };
            F.line = 777;
            inited_14055504 = false;
            if (!((serial_14035250[0] == iter_item_14055503.serial))) {
            F.line = 779;
            changed_14035251 = true;
            }
            
          }
          
          F.line = 782;
          var e_14055687 = {get: accessor_14035277.get, set: accessor_14035277.set, node: iter_item_14055503.node, data: item_14035252, init: !(inited_14055504), before: true, skip: iter_item_14055503.skip, m_type: NTI13735628};
          L23: do {
            F.line = 790;
            var refresh_14065214 = null;
            F.line = 184;
            var i_14194877 = 0;
            F.line = 185;
            var l_14194878 = (match_14026885.refresh != null ? match_14026885.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_14194877 < l_14194878)) break L25;
                  F.line = 790;
                  refresh_14065214 = match_14026885.refresh[chckIndx(i_14194877, 0, (match_14026885.refresh != null ? match_14026885.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_14065215 = refresh_14065214.before;
                    if (!exec_14065215) Tmp26 = false; else {                      var Tmp27 = match_14026885;
                      if (ConstSet158[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_14065215 = is_changed_10270456(sub_list_14035207, refresh_14065214.reads);
                  }
                  
                    if (exec_14065215) Tmp28 = true; else {                      if (!!(inited_14055504)) Tmp29 = false; else {                        Tmp29 = refresh_14065214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_14055687.data = item_14035252;
                  F.line = 796;
                  refresh_14065214.refresh(e_14055687);
                  F.line = 797;
                  iter_item_14055503.skip = e_14055687.skip;
                  }
                  
                  F.line = 188;
                  i_14194877 = addInt(i_14194877, 1);
                  if (!(((match_14026885.refresh != null ? match_14026885.refresh.length : 0) == l_14194878))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_14055503.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_14055503.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_14055503.mount.update(item_14035252, accessor_14035277.set, sub_list_14035207);
          }
          
          if (!(iter_item_14055503.skip)) {
          L31: do {
            F.line = 805;
            var submatch_14075214 = null;
            F.line = 184;
            var i_14194882 = 0;
            F.line = 185;
            var l_14194883 = (iter_item_14055503.matches != null ? iter_item_14055503.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_14194882 < l_14194883)) break L33;
                  F.line = 805;
                  submatch_14075214 = iter_item_14055503.matches[chckIndx(i_14194882, 0, (iter_item_14055503.matches != null ? iter_item_14055503.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_14075214.update(item_14035252, accessor_14035277.set, sub_list_14035207);
                  F.line = 188;
                  i_14194882 = addInt(i_14194882, 1);
                  if (!(((iter_item_14055503.matches != null ? iter_item_14055503.matches.length : 0) == l_14194883))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_14055687 = {get: accessor_14035277.get, set: accessor_14035277.set, node: iter_item_14055503.node, data: item_14035252, init: !(inited_14055504), before: false, skip: iter_item_14055503.skip, m_type: NTI13735628};
          L34: do {
            F.line = 817;
            var refresh_14075225 = null;
            F.line = 184;
            var i_14194887 = 0;
            F.line = 185;
            var l_14194888 = (match_14026885.refresh != null ? match_14026885.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_14194887 < l_14194888)) break L36;
                  F.line = 817;
                  refresh_14075225 = match_14026885.refresh[chckIndx(i_14194887, 0, (match_14026885.refresh != null ? match_14026885.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_14075226 = refresh_14075225.after;
                    if (!exec_14075226) Tmp37 = false; else {                      var Tmp38 = match_14026885;
                      if (ConstSet159[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_14075226 = is_changed_10270456(sub_list_14035207, refresh_14075225.reads);
                  }
                  
                  if (exec_14075226) {
                  F.line = 822;
                  e_14055687.data = item_14035252;
                  F.line = 823;
                  refresh_14075225.refresh(e_14055687);
                  F.line = 824;
                  iter_item_14055503.skip = e_14055687.skip;
                  }
                  
                  F.line = 188;
                  i_14194887 = addInt(i_14194887, 1);
                  if (!(((match_14026885.refresh != null ? match_14026885.refresh.length : 0) == l_14194888))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_14035203 = addInt(i_14035203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_14026885;
          if (ConstSet160[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_14035203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_14026885;
          if (ConstSet161[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_14075493(pop_14075243(Tmp43, "items"), parent_node_14035206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_14075512 = is_changed_10240207(refresh_list_14026889);
      F.line = 833;
      var sub_list_14075513 = null;
      F.line = 834;
      var node_14075514 = match_14026885.node;
      F.line = 835;
      var converted_val_14075515 = null;
      F.line = 836;
      var accessor_14075540 = {get: HEX3Aanonymous_14075524, set: null, m_type: NTI13735632};
      F.line = 840;
      var Tmp44 = match_14026885;
      if (ConstSet162[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_14026885;
        if (ConstSet164[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet163[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14075515 = Tmp46.simple(val_14035201[0]);
        F.line = 843;
        changed_14075512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_14026885;
        if (ConstSet165[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_14075548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_14026885;
        if (ConstSet167[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet166[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14075515 = Tmp49.serial(val_14035201[0], serial_14075548, 0);
          var Tmp50 = match_14026885;
          if (ConstSet168[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_14075548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_14075512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_14026885;
        if (ConstSet170[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet169[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_14026885;
        if (ConstSet171[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_14075560 = Tmp52.compare(val_14035201[0], Tmp53.value);
        F.line = 853;
        converted_val_14075515 = res_14075560.Field0;
        var Tmp54 = match_14026885;
        if (ConstSet172[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = res_14075560.Field0;
        if (res_14075560.Field1) {
        F.line = 856;
        changed_14075512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_14026885;
        if (ConstSet174[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet173[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_14075566 = Tmp56.obj;
        F.line = 860;
        converted_val_14075515 = obj_14075566.get(val_14035201[0]);
        F.line = 861;
        sub_list_14075513 = walk_10245019(refresh_list_14026889, obj_14075566.id);
        F.line = 862;
        changed_14075512 = is_changed_10240207(sub_list_14075513);
          if (!changed_14075512) Tmp57 = false; else {            var Tmp58 = match_14026885;
            if (ConstSet176[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet175[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_14026885;
        if (ConstSet178[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet177[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_14026885;
        if (ConstSet179[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_14075512 = !(Tmp61.eql(converted_val_14075515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_14075540.set = sub_14055394(obj_14075566, val_14035201, 0, set_val_14026888, HEX3Aanonymous_14075606);
        break;
      }
        var Tmp64 = match_14026885;
        if (ConstSet180[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_14026885;
          if (ConstSet181[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_14026885;
      if (ConstSet182[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_14026885;
      if (ConstSet183[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_14026885;
      if (ConstSet184[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14075514.parentNode.replaceChild(Tmp68.mount.node(), node_14075514);
      }
      
      F.line = 875;
      var Tmp69 = match_14026885;
      if (ConstSet185[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_14075991 = Tmp69.inited;
      if (!(inited_14075991)) {
      F.line = 876;
      changed_14075512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_14026885;
      if (ConstSet186[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14075998 = {get: accessor_14075540.get, set: accessor_14075540.set, node: node_14075514, data: converted_val_14075515, init: !(inited_14075991), before: changed_14075512, skip: Tmp70.skip, m_type: NTI13735628};
      L71: do {
        F.line = 885;
        var refresh_14076005 = null;
        F.line = 184;
        var i_14194894 = 0;
        F.line = 185;
        var l_14194895 = (match_14026885.refresh != null ? match_14026885.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_14194894 < l_14194895)) break L73;
              F.line = 885;
              refresh_14076005 = match_14026885.refresh[chckIndx(i_14194894, 0, (match_14026885.refresh != null ? match_14026885.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_14076006 = changed_14075512;
                if (!exec_14076006) Tmp74 = false; else {                  var Tmp75 = match_14026885;
                  if (ConstSet187[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_14076006 = is_changed_10270456(sub_list_14075513, refresh_14076005.reads);
              }
              
              F.line = 891;
              if (!refresh_14076005.before) Tmp77 = false; else {                Tmp77 = (exec_14076006 || !(inited_14075991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_14076005.init) Tmp78 = false; else {                  Tmp78 = !(inited_14075991);                }                Tmp76 = Tmp78;              }              exec_14076006 = Tmp76;
              if (exec_14076006) {
              F.line = 893;
              e_14075998.data = converted_val_14075515;
              F.line = 894;
              refresh_14076005.refresh(e_14075998);
              var Tmp79 = match_14026885;
              if (ConstSet188[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_14075998.skip;
              }
              
              F.line = 188;
              i_14194894 = addInt(i_14194894, 1);
              if (!(((match_14026885.refresh != null ? match_14026885.refresh.length : 0) == l_14194895))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_14075991)) {
      var Tmp80 = match_14026885;
      if (ConstSet189[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_14075512) Tmp82 = false; else {          var Tmp83 = match_14026885;
          if (ConstSet190[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_14026885;
          if (ConstSet191[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_14026885;
      if (ConstSet192[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14075514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_14026885;
      if (ConstSet193[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_14075515, accessor_14075540.set, sub_list_14075513);
      }
      
        if (!changed_14075512) Tmp87 = false; else {          var Tmp88 = match_14026885;
          if (ConstSet194[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_14076044 = null;
        F.line = 182;
        var colontmp__14194898 = null;
        F.line = 906;
        var Tmp90 = match_14026885;
        if (ConstSet195[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__14194898 = Tmp90.matches;
        F.line = 184;
        var i_14194899 = 0;
        F.line = 185;
        var l_14194900 = (colontmp__14194898 != null ? colontmp__14194898.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_14194899 < l_14194900)) break L92;
              F.line = 906;
              submatch_14076044 = colontmp__14194898[chckIndx(i_14194899, 0, (colontmp__14194898 != null ? colontmp__14194898.length : 0)+0-1)-0];
              F.line = 907;
              submatch_14076044.update(converted_val_14075515, accessor_14075540.set, sub_list_14075513);
              F.line = 188;
              i_14194899 = addInt(i_14194899, 1);
              if (!(((colontmp__14194898 != null ? colontmp__14194898.length : 0) == l_14194900))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_14075512) {
      F.line = 910;
      var Tmp93 = match_14026885;
      if (ConstSet196[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14076051 = {get: accessor_14075540.get, set: accessor_14075540.set, node: node_14075514, data: converted_val_14075515, init: !(inited_14075991), before: false, skip: Tmp93.skip, m_type: NTI13735628};
      L94: do {
        F.line = 918;
        var refresh_14076058 = null;
        F.line = 184;
        var i_14194904 = 0;
        F.line = 185;
        var l_14194905 = (match_14026885.refresh != null ? match_14026885.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_14194904 < l_14194905)) break L96;
              F.line = 918;
              refresh_14076058 = match_14026885.refresh[chckIndx(i_14194904, 0, (match_14026885.refresh != null ? match_14026885.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_14076059 = refresh_14076058.after;
                if (!exec_14076059) Tmp97 = false; else {                  var Tmp98 = match_14026885;
                  if (ConstSet197[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_14076059 = is_changed_10270456(sub_list_14075513, refresh_14076058.reads);
              }
              
              if (exec_14076059) {
              F.line = 923;
              e_14076051.data = converted_val_14075515;
              F.line = 924;
              refresh_14076058.refresh(e_14076051);
              var Tmp99 = match_14026885;
              if (ConstSet198[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_14076051.skip;
              }
              
              F.line = 188;
              i_14194904 = addInt(i_14194904, 1);
              if (!(((match_14026885.refresh != null ? match_14026885.refresh.length : 0) == l_14194905))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_14026550(match_14026555, init_val_14026556, set_val_14026558, refresh_list_14026559) {
    init_val_14026556 = nimCopy(null, init_val_14026556, NTI13586042);
    function HEX3Aanonymous_14026560() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_14026880(match_14026555, init_val_14026556, set_val_14026558, refresh_list_14026559);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_14076240 = HEX3Aanonymous_14026560;
    if (!((match_14026555.runner == null))) {
    F.line = 706;
    add_last_13906260(match_14026555.runner.fifo, run_14076240);
    }
    else {
      F.line = 708;
      match_14026555.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_14026555.runner.fifo, run_14076240);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_14026555.runner.fifo))) break L3;
            F.line = 712;
            var run_item_14080054 = pop_first_13950047(match_14026555.runner.fifo);
            F.line = 713;
            run_item_14080054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_14026555.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_14026524(match_14026529) {
    function HEX3Aanonymous_14026536(data_14026538, set_14026543, refresh_list_14026544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_14026550(match_14026529, data_14026538, set_14026543, refresh_list_14026544);
      framePtr = F.prev;

      
    }

  var result_14026531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_14026531 = {update: HEX3Aanonymous_14026536};
  framePtr = F.prev;

  return result_14026531;

}
function as_interface_13990408(config_13990413) {
    function HEX3Aanonymous_13990420(node_13990422) {
      var result_13990428 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_13990428 = nimCopy(null, [], NTI13990443);
        L1: do {
          F.line = 997;
          var comp_match_14025214 = null;
          F.line = 182;
          var colontmp__14194844 = null;
          F.line = 997;
          colontmp__14194844 = compile_13991312(config_13990413, node_13990422);
          F.line = 184;
          var i_14194846 = 0;
          F.line = 185;
          var l_14194847 = (colontmp__14194844 != null ? colontmp__14194844.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14194846 < l_14194847)) break L3;
                F.line = 997;
                comp_match_14025214 = colontmp__14194844[chckIndx(i_14194846, 0, (colontmp__14194844 != null ? colontmp__14194844.length : 0)+0-1)-0];
                F.line = 998;
                if (result_13990428 != null) { result_13990428.push(as_interface_14026524(comp_match_14025214)); } else { result_13990428 = [as_interface_14026524(comp_match_14025214)]; };
                F.line = 188;
                i_14194846 = addInt(i_14194846, 1);
                if (!(((colontmp__14194844 != null ? colontmp__14194844.length : 0) == l_14194847))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_13990428;

    }

  var result_13990415 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_13990415 = {compile: HEX3Aanonymous_13990420};
  framePtr = F.prev;

  return result_13990415;

}
function iter_13989045(c_13989051, selector_13989052, iter_13989054, actions_13989060) {
  var result_13989062 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 593;
    result_13989062 = {selector: nimCopy(null, selector_13989052, NTI112), refresh: [], mount: null, iter: true, iterate: nimCopy(null, iter_13989054, NTI13735796), cmatches: [], m_type: NTI13735615, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null})};
    F.line = 600;
    if (c_13989051.cmatches != null) { c_13989051.cmatches.push(as_interface_13990408(result_13989062)); } else { c_13989051.cmatches = [as_interface_13990408(result_13989062)]; };
    if (!((actions_13989060 == null))) {
    F.line = 602;
    actions_13989060(result_13989062);
    }
    
  framePtr = F.prev;

  return result_13989062;

}
function iter_13988184(c_13988190, selector_13988191, it_13988193, actions_13988199) {
  var result_13988201 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 608;
    result_13988201 = iter_13989045(c_13988190, selector_13988191, {kind: 0, simple: it_13988193, serial: null, selector: null}, actions_13988199);
  framePtr = F.prev;

  return result_13988201;

}
function seq_iterator_13676241(arr_13676245) {
    arr_13676245 = nimCopy(null, arr_13676245, NTI13676244);
    function next_13676251() {
      var result_13676256 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_13676245 != null ? arr_13676245.length : 0) <= it_13676249)) {
        F.line = 278;
        var colontmp__14194919 = false;
        F.line = 278;
        var colontmp__14194920 = empty_13676250;
        F.line = 278;
        nimCopy(result_13676256, {Field0: colontmp__14194919, Field1: colontmp__14194920}, NTI13676253);
        break BeforeRet;
        }
        
        F.line = 279;
        var colontmp__14194921 = true;
        F.line = 279;
        var colontmp__14194922 = arr_13676245[chckIndx(it_13676249, 0, (arr_13676245 != null ? arr_13676245.length : 0)+0-1)-0];
        F.line = 279;
        nimCopy(result_13676256, {Field0: colontmp__14194921, Field1: colontmp__14194922}, NTI13676253);
        F.line = 280;
        it_13676249 = addInt(it_13676249, 1);
      } while (false);
      framePtr = F.prev;

      return result_13676256;

    }

  var result_13676247 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 271;
    var it_13676249 = 0;
    F.line = 272;
    var empty_13676250 = null;
    F.line = 282;
    result_13676247 = next_13676251;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_13676247;

}
function iter_groups_13676224(grps_13676226) {
  var result_13676240 = null;

  var F={procname:"groups.iterGroups",prev:framePtr,filename:"groups.nim",line:0};
  framePtr = F;
    F.line = 17;
    result_13676240 = seq_iterator_13676241(grps_13676226);
  framePtr = F.prev;

  return result_13676240;

}
function add_13845218(x_13845223, x_13845223_Idx, y_13845225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_13845231 = (x_13845223[x_13845223_Idx] != null ? x_13845223[x_13845223_Idx].length : 0);
    F.line = 1209;
    if (x_13845223[x_13845223_Idx] === null) x_13845223[x_13845223_Idx] = [];
               if (x_13845223[x_13845223_Idx].length < (Tmp1 = chckRange(addInt(xl_13845231, (y_13845225 != null ? y_13845225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_13845223[x_13845223_Idx].length;i<Tmp1;++i) x_13845223[x_13845223_Idx].push(null); }
               else { x_13845223[x_13845223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_13845256 = 0;
      F.line = 66;
      var colontmp__14194953 = 0;
      F.line = 1210;
      colontmp__14194953 = (y_13845225 != null ? (y_13845225.length-1) : -1);
      F.line = 77;
      var res_14194954 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_14194954 <= colontmp__14194953)) break L4;
            F.line = 1210;
            i_13845256 = res_14194954;
            F.line = 1210;
            x_13845223[x_13845223_Idx][chckIndx(addInt(xl_13845231, i_13845256), 0, (x_13845223[x_13845223_Idx] != null ? x_13845223[x_13845223_Idx].length : 0)+0-1)-0] = y_13845225[chckIndx(i_13845256, 0, (y_13845225 != null ? y_13845225.length : 0)+0-1)-0];
            F.line = 80;
            res_14194954 = addInt(res_14194954, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_13821719(cfg_13821724, node_13821725) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_13821789 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_13821789 = nimCopy(null, [], NTI13821804);
    F.line = 620;
    if (eqStrings(cfg_13821724.selector, [])) {
    Tmp1 = [node_13821725];
    }
    else {
    Tmp1 = node_13821725.querySelectorAll(toJSStr(cfg_13821724.selector));
    }
    
    var matched_nodes_13821818 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_13821818 != null ? matched_nodes_13821818.length : 0) == 0)) {
    F.line = 622;
    var selector_13821824 = nimCopy(null, cfg_13821724.selector, NTI112);
    F.line = 623;
    var fmt_res_13821825 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_13821825[0] != null) { fmt_res_13821825[0] = (fmt_res_13821825[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_13821825[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_13821825, 0, selector_13821824, []);
    F.line = 623;
    if (fmt_res_13821825[0] != null) { fmt_res_13821825[0] = (fmt_res_13821825[0]).concat(makeNimstrLit("\'")); } else { fmt_res_13821825[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_13821825[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_13830008 = null;
      F.line = 184;
      var i_14194949 = 0;
      F.line = 185;
      var l_14194950 = (matched_nodes_13821818 != null ? matched_nodes_13821818.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_14194949 < l_14194950)) break L4;
            F.line = 625;
            matched_node_13830008 = matched_nodes_13821818[chckIndx(i_14194949, 0, (matched_nodes_13821818 != null ? matched_nodes_13821818.length : 0)+0-1)-0];
            F.line = 626;
            var match_13830016 = {refresh: nimCopy(null, cfg_13821724.refresh, NTI13760661), iter: cfg_13821724.iter, node: matched_node_13830008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_13830016.node = matched_node_13830008;
            if (match_13830016.iter) {
            var Tmp5 = match_13830016;
            if (ConstSet199[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_13821724;
            if (ConstSet200[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI13760776);
            var Tmp7 = match_13830016;
            if (ConstSet201[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_13830008).createComment(toJSStr(cstrToNimstr(((matched_node_13830008).outerHTML))));
            var Tmp8 = match_13830016;
            if (ConstSet202[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_13821724.mount;
            var Tmp9 = match_13830016;
            if (ConstSet203[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_13821724.cmatches, NTI13760700);
            var Tmp10 = match_13830016;
            if (ConstSet204[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI13835029);
            F.line = 637;
            var Tmp11 = match_13830016;
            if (ConstSet205[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_13830008.parentNode.replaceChild(Tmp11.anchor, matched_node_13830008);
            }
            else {
              var Tmp12 = match_13830016;
              if (ConstSet206[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_13821724;
              if (ConstSet207[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_13830016;
              if (ConstSet208[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_13830016;
                if (ConstSet209[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_13830016;
              if (ConstSet210[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_13821724;
              if (ConstSet211[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI13760734);
              var Tmp18 = match_13830016;
              if (ConstSet212[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI13835056);
              var Tmp19 = match_13830016;
              if (ConstSet213[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_13830016;
              if (ConstSet214[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_13821724.mount == null))) {
              var Tmp21 = match_13830016;
              if (ConstSet215[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_13821724.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_13845214 = null;
                  F.line = 184;
                  var i_14194946 = 0;
                  F.line = 185;
                  var l_14194947 = (cfg_13821724.cmatches != null ? cfg_13821724.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_14194946 < l_14194947)) break L24;
                        F.line = 652;
                        submatch_13845214 = cfg_13821724.cmatches[chckIndx(i_14194946, 0, (cfg_13821724.cmatches != null ? cfg_13821724.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_13830016;
                        if (ConstSet216[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_13845218(Tmp25, "matches", submatch_13845214.compile(matched_node_13830008));
                        F.line = 188;
                        i_14194946 = addInt(i_14194946, 1);
                        if (!(((cfg_13821724.cmatches != null ? cfg_13821724.cmatches.length : 0) == l_14194947))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_13821789 != null) { result_13821789.push(match_13830016); } else { result_13821789 = [match_13830016]; };
            F.line = 188;
            i_14194949 = addInt(i_14194949, 1);
            if (!(((matched_nodes_13821818 != null ? matched_nodes_13821818.length : 0) == l_14194950))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_13821789;

}
function sub_13885394(ts_13885399, val_13885401, val_13885401_Idx, set_val_13885403, update_13885404) {
    function HEX3Aanonymous_13885417(new_value_13885419, changed_path_13885421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_13885399.set(val_13885401, val_13885401_Idx, new_value_13885419);
        F.line = 360;
        var new_paths_13885423 = null;
        L1: do {
          F.line = 361;
          var p_13885430 = null;
          F.line = 184;
          var i_14195000 = 0;
          F.line = 185;
          var l_14195001 = (changed_path_13885421 != null ? changed_path_13885421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14195000 < l_14195001)) break L3;
                F.line = 361;
                p_13885430 = changed_path_13885421[chckIndx(i_14195000, 0, (changed_path_13885421 != null ? changed_path_13885421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_13885423 != null) { new_paths_13885423.push(HEX26_13760256(ts_13885399.id, p_13885430)); } else { new_paths_13885423 = [HEX26_13760256(ts_13885399.id, p_13885430)]; };
                F.line = 188;
                i_14195000 = addInt(i_14195000, 1);
                if (!(((changed_path_13885421 != null ? changed_path_13885421.length : 0) == l_14195001))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_13885403 == null))) {
        F.line = 364;
        set_val_13885403(val_13885401[val_13885401_Idx], new_paths_13885423);
        }
        else {
        if (!((update_13885404 == null))) {
        F.line = 367;
        update_13885404({paths: nimCopy(null, new_paths_13885423, NTI13885422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_13885406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_13885403 == null) && (update_13885404 == null))) {
    F.line = 357;
    result_13885406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_13885406 = HEX3Aanonymous_13885417;
  } while (false);
  framePtr = F.prev;

  return result_13885406;

}
function compile_13885586(cfgs_13885591, node_13885592) {
  var result_13885595 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_13885595[0] = nimCopy(null, [], NTI13885610);
    L1: do {
      F.line = 658;
      var cfg_13885617 = null;
      F.line = 184;
      var i_14195006 = 0;
      F.line = 185;
      var l_14195007 = (cfgs_13885591 != null ? cfgs_13885591.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_14195006 < l_14195007)) break L3;
            F.line = 658;
            cfg_13885617 = cfgs_13885591[chckIndx(i_14195006, 0, (cfgs_13885591 != null ? cfgs_13885591.length : 0)+0-1)-0];
            F.line = 659;
            add_13845218(result_13885595, 0, cfg_13885617.compile(node_13885592));
            F.line = 188;
            i_14195006 = addInt(i_14195006, 1);
            if (!(((cfgs_13885591 != null ? cfgs_13885591.length : 0) == l_14195007))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_13885595[0];

}
function create_iter_item_13885520(match_13885525, parent_node_13885526) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_13885528 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_13885533 = null;
    F.line = 683;
    var node_13885534 = null;
      var Tmp1 = match_13885525;
      if (ConstSet230[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_13885525;
    if (ConstSet231[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_13885533 = Tmp2.mount_template.clone();
    F.line = 686;
    node_13885534 = comp_13885533.node();
    }
    else {
      F.line = 688;
      node_13885534 = match_13885525.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_13885525;
    if (ConstSet232[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_13885528 = {serial: 0, mount: comp_13885533, node: node_13885534, matches: compile_13885586(Tmp3.match_templates, node_13885534), skip: false};
    F.line = 694;
    var Tmp4 = match_13885525;
    if (ConstSet233[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_13885526.insertBefore(node_13885534, Tmp4.anchor);
  framePtr = F.prev;

  return result_13885528;

}
function detach_13905493(iter_item_13905497, parent_node_13905498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_13905498.removeChild(iter_item_13905497.node);
  framePtr = F.prev;

  
}
function pop_13905243(s_13905248, s_13905248_Idx) {
  var result_13905249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_13905255 = subInt((s_13905248[s_13905248_Idx] != null ? s_13905248[s_13905248_Idx].length : 0), 1);
    F.line = 1784;
    result_13905249 = s_13905248[s_13905248_Idx][chckIndx(l_13905255, 0, (s_13905248[s_13905248_Idx] != null ? s_13905248[s_13905248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_13905248[s_13905248_Idx] === null) s_13905248[s_13905248_Idx] = [];
               if (s_13905248[s_13905248_Idx].length < chckRange(l_13905255, 0, 2147483647)) { for (var i=s_13905248[s_13905248_Idx].length;i<chckRange(l_13905255, 0, 2147483647);++i) s_13905248[s_13905248_Idx].push(null); }
               else { s_13905248[s_13905248_Idx].length = chckRange(l_13905255, 0, 2147483647); };
  framePtr = F.prev;

  return result_13905249;

}
function update_do_13857079(match_13857084, init_val_13857085, set_val_13857087, refresh_list_13857088) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_13865261() {
            var result_13865263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_13865263 = nimCopy(null, item_13865252, NTI112);
            framePtr = F.prev;

            return result_13865263;

          }
          var Tmp16;
            function HEX3Aanonymous_13865281(new_value_13865283, path_13865300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_13865301 = mnewString(0);
                F.line = 747;
                if (fmt_res_13865301 != null) { fmt_res_13865301 = (fmt_res_13865301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_13865301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_13865301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_13875047(new_value_13875049, path_13875066) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_13875067 = mnewString(0);
                F.line = 754;
                if (fmt_res_13875067 != null) { fmt_res_13875067 = (fmt_res_13875067).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_13875067 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_13875067, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_13885050(refresh_list_13885052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_13856749(match_13857084, val_13865201[0], set_val_13857087, refresh_list_13885052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_13905524() {
        var result_13905526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_13905526 = nimCopy(null, converted_val_13905515, NTI112);
        framePtr = F.prev;

        return result_13905526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_13905606(refresh_list_13905608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_13856749(match_13857084, val_13865201[0], set_val_13857087, refresh_list_13905608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_13857087 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_13865201 = [init_val_13857085];
    if (match_13857084.iter) {
    F.line = 720;
    var i_13865203 = 0;
    F.line = 721;
    var Tmp1 = match_13857084;
    if (ConstSet217[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_13865206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_13865207 = null;
    F.line = 723;
    var it_simple_13865212 = null;
    F.line = 724;
    var it_serial_13865217 = null;
    F.line = 725;
    var it_select_13865225 = null;
    F.line = 726;
    var Tmp2 = match_13857084;
    if (ConstSet218[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_13857084;
      if (ConstSet220[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet219[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_13865212 = Tmp4.simple(val_13865201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_13857084;
      if (ConstSet222[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet221[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_13865217 = Tmp6.serial(val_13865201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_13857084;
      if (ConstSet224[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet223[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_13865225 = Tmp8.selector(val_13865201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_13857084;
            if (ConstSet225[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_13865203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_13857084;
          if (ConstSet226[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_13865203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_13865250 = [Tmp11];
          F.line = 736;
          var changed_13865251 = is_changed_10240207(refresh_list_13857088);
          F.line = 737;
          var item_13865252 = null;
          F.line = 738;
          var accessor_13865277 = {get: HEX3Aanonymous_13865261, set: null, m_type: NTI13760634};
          F.line = 741;
          var Tmp16 = match_13857084;
          if (ConstSet227[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_13865280 = it_simple_13865212();
            if ((it_13865280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_13865252 = nimCopy(null, it_13865280["Field1"], NTI112);
            F.line = 746;
            accessor_13865277.set = HEX3Aanonymous_13865281;
            break;
          case 1:
            F.line = 750;
            var it_13875046 = it_serial_13865217(serial_13865250, 0);
            if ((it_13875046["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_13865252 = nimCopy(null, it_13875046["Field1"], NTI112);
            F.line = 753;
            accessor_13865277.set = HEX3Aanonymous_13875047;
            break;
          case 2:
            F.line = 757;
            var it_13885015 = it_select_13865225();
            if ((it_13885015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_13865252 = nimCopy(null, it_13885015.get(val_13865201[0]), NTI112);
            F.line = 760;
            accessor_13865277.set = sub_13885394(it_13885015, val_13865201, 0, set_val_13857087, HEX3Aanonymous_13885050);
            F.line = 762;
            sub_list_13865207 = walk_10245019(refresh_list_13857088, it_13885015.id);
            F.line = 763;
            changed_13865251 = is_changed_10240207(sub_list_13865207);
            break;
          }
          F.line = 766;
          var iter_item_13885503 = null;
          F.line = 767;
          var inited_13885504 = false;
            var Tmp17 = match_13857084;
            if (ConstSet228[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_13865203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_13857084;
          if (ConstSet229[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_13885503 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_13865203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_13885504 = true;
          F.line = 773;
          changed_13865251 = true;
          }
          else {
            F.line = 775;
            iter_item_13885503 = create_iter_item_13885520(match_13857084, parent_node_13865206);
            F.line = 776;
            var Tmp21 = match_13857084;
            if (ConstSet234[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_13885503); } else { Tmp22 = [iter_item_13885503]; };
            F.line = 777;
            inited_13885504 = false;
            if (!((serial_13865250[0] == iter_item_13885503.serial))) {
            F.line = 779;
            changed_13865251 = true;
            }
            
          }
          
          F.line = 782;
          var e_13885687 = {get: accessor_13865277.get, set: accessor_13865277.set, node: iter_item_13885503.node, data: nimCopy(null, item_13865252, NTI112), init: !(inited_13885504), before: true, skip: iter_item_13885503.skip, m_type: NTI13760630};
          L23: do {
            F.line = 790;
            var refresh_13895214 = null;
            F.line = 184;
            var i_14194967 = 0;
            F.line = 185;
            var l_14194968 = (match_13857084.refresh != null ? match_13857084.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_14194967 < l_14194968)) break L25;
                  F.line = 790;
                  refresh_13895214 = match_13857084.refresh[chckIndx(i_14194967, 0, (match_13857084.refresh != null ? match_13857084.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_13895215 = refresh_13895214.before;
                    if (!exec_13895215) Tmp26 = false; else {                      var Tmp27 = match_13857084;
                      if (ConstSet235[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_13895215 = is_changed_10270456(sub_list_13865207, refresh_13895214.reads);
                  }
                  
                    if (exec_13895215) Tmp28 = true; else {                      if (!!(inited_13885504)) Tmp29 = false; else {                        Tmp29 = refresh_13895214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_13885687.data = nimCopy(null, item_13865252, NTI112);
                  F.line = 796;
                  refresh_13895214.refresh(e_13885687);
                  F.line = 797;
                  iter_item_13885503.skip = e_13885687.skip;
                  }
                  
                  F.line = 188;
                  i_14194967 = addInt(i_14194967, 1);
                  if (!(((match_13857084.refresh != null ? match_13857084.refresh.length : 0) == l_14194968))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_13885503.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_13885503.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_13885503.mount.update(item_13865252, accessor_13865277.set, sub_list_13865207);
          }
          
          if (!(iter_item_13885503.skip)) {
          L31: do {
            F.line = 805;
            var submatch_13905214 = null;
            F.line = 184;
            var i_14194972 = 0;
            F.line = 185;
            var l_14194973 = (iter_item_13885503.matches != null ? iter_item_13885503.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_14194972 < l_14194973)) break L33;
                  F.line = 805;
                  submatch_13905214 = iter_item_13885503.matches[chckIndx(i_14194972, 0, (iter_item_13885503.matches != null ? iter_item_13885503.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_13905214.update(item_13865252, accessor_13865277.set, sub_list_13865207);
                  F.line = 188;
                  i_14194972 = addInt(i_14194972, 1);
                  if (!(((iter_item_13885503.matches != null ? iter_item_13885503.matches.length : 0) == l_14194973))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_13885687 = {get: accessor_13865277.get, set: accessor_13865277.set, node: iter_item_13885503.node, data: nimCopy(null, item_13865252, NTI112), init: !(inited_13885504), before: false, skip: iter_item_13885503.skip, m_type: NTI13760630};
          L34: do {
            F.line = 817;
            var refresh_13905225 = null;
            F.line = 184;
            var i_14194977 = 0;
            F.line = 185;
            var l_14194978 = (match_13857084.refresh != null ? match_13857084.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_14194977 < l_14194978)) break L36;
                  F.line = 817;
                  refresh_13905225 = match_13857084.refresh[chckIndx(i_14194977, 0, (match_13857084.refresh != null ? match_13857084.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_13905226 = refresh_13905225.after;
                    if (!exec_13905226) Tmp37 = false; else {                      var Tmp38 = match_13857084;
                      if (ConstSet236[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_13905226 = is_changed_10270456(sub_list_13865207, refresh_13905225.reads);
                  }
                  
                  if (exec_13905226) {
                  F.line = 822;
                  e_13885687.data = nimCopy(null, item_13865252, NTI112);
                  F.line = 823;
                  refresh_13905225.refresh(e_13885687);
                  F.line = 824;
                  iter_item_13885503.skip = e_13885687.skip;
                  }
                  
                  F.line = 188;
                  i_14194977 = addInt(i_14194977, 1);
                  if (!(((match_13857084.refresh != null ? match_13857084.refresh.length : 0) == l_14194978))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_13865203 = addInt(i_13865203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_13857084;
          if (ConstSet237[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_13865203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_13857084;
          if (ConstSet238[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_13905493(pop_13905243(Tmp43, "items"), parent_node_13865206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_13905512 = is_changed_10240207(refresh_list_13857088);
      F.line = 833;
      var sub_list_13905513 = null;
      F.line = 834;
      var node_13905514 = match_13857084.node;
      F.line = 835;
      var converted_val_13905515 = null;
      F.line = 836;
      var accessor_13905540 = {get: HEX3Aanonymous_13905524, set: null, m_type: NTI13760634};
      F.line = 840;
      var Tmp44 = match_13857084;
      if (ConstSet239[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_13857084;
        if (ConstSet241[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet240[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_13905515 = nimCopy(null, Tmp46.simple(val_13865201[0]), NTI112);
        F.line = 843;
        changed_13905512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_13857084;
        if (ConstSet242[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_13905548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_13857084;
        if (ConstSet244[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet243[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_13905515 = nimCopy(null, Tmp49.serial(val_13865201[0], serial_13905548, 0), NTI112);
          var Tmp50 = match_13857084;
          if (ConstSet245[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_13905548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_13905512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_13857084;
        if (ConstSet247[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet246[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_13857084;
        if (ConstSet248[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_13905560 = Tmp52.compare(val_13865201[0], Tmp53.value);
        F.line = 853;
        converted_val_13905515 = nimCopy(null, res_13905560.Field0, NTI112);
        var Tmp54 = match_13857084;
        if (ConstSet249[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = nimCopy(null, res_13905560.Field0, NTI112);
        if (res_13905560.Field1) {
        F.line = 856;
        changed_13905512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_13857084;
        if (ConstSet251[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet250[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_13905566 = Tmp56.obj;
        F.line = 860;
        converted_val_13905515 = nimCopy(null, obj_13905566.get(val_13865201[0]), NTI112);
        F.line = 861;
        sub_list_13905513 = walk_10245019(refresh_list_13857088, obj_13905566.id);
        F.line = 862;
        changed_13905512 = is_changed_10240207(sub_list_13905513);
          if (!changed_13905512) Tmp57 = false; else {            var Tmp58 = match_13857084;
            if (ConstSet253[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet252[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_13857084;
        if (ConstSet255[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet254[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_13857084;
        if (ConstSet256[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_13905512 = !(Tmp61.eql(converted_val_13905515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_13905540.set = sub_13885394(obj_13905566, val_13865201, 0, set_val_13857087, HEX3Aanonymous_13905606);
        break;
      }
        var Tmp64 = match_13857084;
        if (ConstSet257[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_13857084;
          if (ConstSet258[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_13857084;
      if (ConstSet259[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_13857084;
      if (ConstSet260[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_13857084;
      if (ConstSet261[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_13905514.parentNode.replaceChild(Tmp68.mount.node(), node_13905514);
      }
      
      F.line = 875;
      var Tmp69 = match_13857084;
      if (ConstSet262[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_13905991 = Tmp69.inited;
      if (!(inited_13905991)) {
      F.line = 876;
      changed_13905512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_13857084;
      if (ConstSet263[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_13905998 = {get: accessor_13905540.get, set: accessor_13905540.set, node: node_13905514, data: nimCopy(null, converted_val_13905515, NTI112), init: !(inited_13905991), before: changed_13905512, skip: Tmp70.skip, m_type: NTI13760630};
      L71: do {
        F.line = 885;
        var refresh_13906005 = null;
        F.line = 184;
        var i_14194984 = 0;
        F.line = 185;
        var l_14194985 = (match_13857084.refresh != null ? match_13857084.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_14194984 < l_14194985)) break L73;
              F.line = 885;
              refresh_13906005 = match_13857084.refresh[chckIndx(i_14194984, 0, (match_13857084.refresh != null ? match_13857084.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_13906006 = changed_13905512;
                if (!exec_13906006) Tmp74 = false; else {                  var Tmp75 = match_13857084;
                  if (ConstSet264[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_13906006 = is_changed_10270456(sub_list_13905513, refresh_13906005.reads);
              }
              
              F.line = 891;
              if (!refresh_13906005.before) Tmp77 = false; else {                Tmp77 = (exec_13906006 || !(inited_13905991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_13906005.init) Tmp78 = false; else {                  Tmp78 = !(inited_13905991);                }                Tmp76 = Tmp78;              }              exec_13906006 = Tmp76;
              if (exec_13906006) {
              F.line = 893;
              e_13905998.data = nimCopy(null, converted_val_13905515, NTI112);
              F.line = 894;
              refresh_13906005.refresh(e_13905998);
              var Tmp79 = match_13857084;
              if (ConstSet265[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_13905998.skip;
              }
              
              F.line = 188;
              i_14194984 = addInt(i_14194984, 1);
              if (!(((match_13857084.refresh != null ? match_13857084.refresh.length : 0) == l_14194985))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_13905991)) {
      var Tmp80 = match_13857084;
      if (ConstSet266[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_13905512) Tmp82 = false; else {          var Tmp83 = match_13857084;
          if (ConstSet267[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_13857084;
          if (ConstSet268[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_13857084;
      if (ConstSet269[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_13905514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_13857084;
      if (ConstSet270[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_13905515, accessor_13905540.set, sub_list_13905513);
      }
      
        if (!changed_13905512) Tmp87 = false; else {          var Tmp88 = match_13857084;
          if (ConstSet271[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_13906044 = null;
        F.line = 182;
        var colontmp__14194988 = null;
        F.line = 906;
        var Tmp90 = match_13857084;
        if (ConstSet272[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__14194988 = Tmp90.matches;
        F.line = 184;
        var i_14194989 = 0;
        F.line = 185;
        var l_14194990 = (colontmp__14194988 != null ? colontmp__14194988.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_14194989 < l_14194990)) break L92;
              F.line = 906;
              submatch_13906044 = colontmp__14194988[chckIndx(i_14194989, 0, (colontmp__14194988 != null ? colontmp__14194988.length : 0)+0-1)-0];
              F.line = 907;
              submatch_13906044.update(converted_val_13905515, accessor_13905540.set, sub_list_13905513);
              F.line = 188;
              i_14194989 = addInt(i_14194989, 1);
              if (!(((colontmp__14194988 != null ? colontmp__14194988.length : 0) == l_14194990))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_13905512) {
      F.line = 910;
      var Tmp93 = match_13857084;
      if (ConstSet273[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_13906051 = {get: accessor_13905540.get, set: accessor_13905540.set, node: node_13905514, data: nimCopy(null, converted_val_13905515, NTI112), init: !(inited_13905991), before: false, skip: Tmp93.skip, m_type: NTI13760630};
      L94: do {
        F.line = 918;
        var refresh_13906058 = null;
        F.line = 184;
        var i_14194994 = 0;
        F.line = 185;
        var l_14194995 = (match_13857084.refresh != null ? match_13857084.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_14194994 < l_14194995)) break L96;
              F.line = 918;
              refresh_13906058 = match_13857084.refresh[chckIndx(i_14194994, 0, (match_13857084.refresh != null ? match_13857084.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_13906059 = refresh_13906058.after;
                if (!exec_13906059) Tmp97 = false; else {                  var Tmp98 = match_13857084;
                  if (ConstSet274[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_13906059 = is_changed_10270456(sub_list_13905513, refresh_13906058.reads);
              }
              
              if (exec_13906059) {
              F.line = 923;
              e_13906051.data = nimCopy(null, converted_val_13905515, NTI112);
              F.line = 924;
              refresh_13906058.refresh(e_13906051);
              var Tmp99 = match_13857084;
              if (ConstSet275[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_13906051.skip;
              }
              
              F.line = 188;
              i_14194994 = addInt(i_14194994, 1);
              if (!(((match_13857084.refresh != null ? match_13857084.refresh.length : 0) == l_14194995))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_13856749(match_13856754, init_val_13856755, set_val_13856757, refresh_list_13856758) {
    function HEX3Aanonymous_13856759() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_13857079(match_13856754, init_val_13856755, set_val_13856757, refresh_list_13856758);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_13906240 = HEX3Aanonymous_13856759;
    if (!((match_13856754.runner == null))) {
    F.line = 706;
    add_last_13906260(match_13856754.runner.fifo, run_13906240);
    }
    else {
      F.line = 708;
      match_13856754.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_13856754.runner.fifo, run_13906240);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_13856754.runner.fifo))) break L3;
            F.line = 712;
            var run_item_13960054 = pop_first_13950047(match_13856754.runner.fifo);
            F.line = 713;
            run_item_13960054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_13856754.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_13856524(match_13856529) {
    function HEX3Aanonymous_13856536(data_13856538, set_13856543, refresh_list_13856544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_13856749(match_13856529, data_13856538, set_13856543, refresh_list_13856544);
      framePtr = F.prev;

      
    }

  var result_13856531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_13856531 = {update: HEX3Aanonymous_13856536};
  framePtr = F.prev;

  return result_13856531;

}
function as_interface_13820815(config_13820820) {
    function HEX3Aanonymous_13820827(node_13820829) {
      var result_13820835 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_13820835 = nimCopy(null, [], NTI13820850);
        L1: do {
          F.line = 997;
          var comp_match_13855214 = null;
          F.line = 182;
          var colontmp__14194934 = null;
          F.line = 997;
          colontmp__14194934 = compile_13821719(config_13820820, node_13820829);
          F.line = 184;
          var i_14194936 = 0;
          F.line = 185;
          var l_14194937 = (colontmp__14194934 != null ? colontmp__14194934.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_14194936 < l_14194937)) break L3;
                F.line = 997;
                comp_match_13855214 = colontmp__14194934[chckIndx(i_14194936, 0, (colontmp__14194934 != null ? colontmp__14194934.length : 0)+0-1)-0];
                F.line = 998;
                if (result_13820835 != null) { result_13820835.push(as_interface_13856524(comp_match_13855214)); } else { result_13820835 = [as_interface_13856524(comp_match_13855214)]; };
                F.line = 188;
                i_14194936 = addInt(i_14194936, 1);
                if (!(((colontmp__14194934 != null ? colontmp__14194934.length : 0) == l_14194937))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_13820835;

    }

  var result_13820822 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_13820822 = {compile: HEX3Aanonymous_13820827};
  framePtr = F.prev;

  return result_13820822;

}
function match_13819467(c_13819473, selector_13819474, convert_13819476, actions_13819482) {
  var result_13819484 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 408;
    result_13819484 = {selector: nimCopy(null, selector_13819474, NTI112), refresh: [], mount: null, iter: false, convert: nimCopy(null, convert_13819476, NTI13760734), m_type: NTI13760617, cmatches: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    F.line = 414;
    if (c_13819473.cmatches != null) { c_13819473.cmatches.push(as_interface_13820815(result_13819484)); } else { c_13819473.cmatches = [as_interface_13820815(result_13819484)]; };
    if (!((actions_13819482 == null))) {
    F.line = 416;
    actions_13819482(result_13819484);
    }
    
  framePtr = F.prev;

  return result_13819484;

}
function match_13816835(c_13816841, selector_13816842, convert_13816844, actions_13816850) {
  var result_13816852 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 432;
    var type_selector_13816860 = {kind: 3, obj: convert_13816844, simple: null, serial: null, compare: null, eql: null};
    F.line = 435;
    result_13816852 = match_13819467(c_13816841, selector_13816842, type_selector_13816860, actions_13816850);
  framePtr = F.prev;

  return result_13816852;

}
function HEX7C_13750216(p1_13750223, p2_13750226) {
    function HEX3Aanonymous_13750230(x_13750232) {
      var result_13750233 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_13750233 = nimCopy(null, p2_13750226(p1_13750223(x_13750232)), NTI112);
      framePtr = F.prev;

      return result_13750233;

    }

  var result_13750229 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_13750229 = HEX3Aanonymous_13750230;
  framePtr = F.prev;

  return result_13750229;

}
function access_13736602(c_13736607) {
    function HEX3Aanonymous_13736639(data_13736641) {
      var result_13736642 = null;

      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 211;
        result_13736642 = data_13736641;
      framePtr = F.prev;

      return result_13736642;

    }
    function HEX3Aanonymous_13736656(data_13736659, data_13736659_Idx, value_13736660) {
      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 212;
        data_13736659[data_13736659_Idx] = value_13736660;
      framePtr = F.prev;

      
    }

  var result_13736631 = null;

  var F={procname:"access.access",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_13736631 = {get: HEX3Aanonymous_13736639, set: HEX3Aanonymous_13736656, id: []};
  framePtr = F.prev;

  return result_13736631;

}
function refresh_13761579(c_13761584, refresh_13761590, before_13761591, after_13761592) {
    function HEX3Aanonymous_13761597(re_13761603) {
      var F={procname:"refresh.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 500;
        refresh_13761590(re_13761603.node, re_13761603.data);
      framePtr = F.prev;

      
    }

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 499;
    if (c_13761584.refresh != null) { c_13761584.refresh.push({refresh: HEX3Aanonymous_13761597, before: before_13761591, after: (after_13761592 || !(before_13761591)), init: false, reads: refresh_all_10270524}); } else { c_13761584.refresh = [{refresh: HEX3Aanonymous_13761597, before: before_13761591, after: (after_13761592 || !(before_13761591)), init: false, reads: refresh_all_10270524}]; };
  framePtr = F.prev;

  
}
function refresh_13765534(c_13765539, refresh_13765541, before_13765542, after_13765543, reads_13765544) {
    var Tmp1;
      var Tmp2;

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (c_13765539.iter) {
    F.line = 511;
    var Tmp1 = c_13765539;
    if (ConstSet276[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    switch (Tmp1.iterate.kind) {
    case 0:
      F.line = 513;
      var fmt_res_13765546 = mnewString(0);
      F.line = 513;
      if (fmt_res_13765546 != null) { fmt_res_13765546 = (fmt_res_13765546).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates")); } else { fmt_res_13765546 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates"); };
      F.line = 513;
      raiseException({message: nimCopy(null, fmt_res_13765546, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 1:
      F.line = 515;
      var fmt_res_13775002 = mnewString(0);
      F.line = 515;
      if (fmt_res_13775002 != null) { fmt_res_13775002 = (fmt_res_13775002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates")); } else { fmt_res_13775002 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates"); };
      F.line = 515;
      raiseException({message: nimCopy(null, fmt_res_13775002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 2:
      break;
    }
    }
    else {
      F.line = 519;
      var Tmp2 = c_13765539;
      if (ConstSet277[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      switch (Tmp2.convert.kind) {
      case 0:
        F.line = 521;
        var fmt_res_13785003 = mnewString(0);
        F.line = 521;
        if (fmt_res_13785003 != null) { fmt_res_13785003 = (fmt_res_13785003).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates")); } else { fmt_res_13785003 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates"); };
        F.line = 521;
        raiseException({message: nimCopy(null, fmt_res_13785003, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 1:
        F.line = 523;
        var fmt_res_13795002 = mnewString(0);
        F.line = 523;
        if (fmt_res_13795002 != null) { fmt_res_13795002 = (fmt_res_13795002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates")); } else { fmt_res_13795002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates"); };
        F.line = 523;
        raiseException({message: nimCopy(null, fmt_res_13795002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 2:
        F.line = 525;
        var fmt_res_13805002 = mnewString(0);
        F.line = 525;
        if (fmt_res_13805002 != null) { fmt_res_13805002 = (fmt_res_13805002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates")); } else { fmt_res_13805002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates"); };
        F.line = 525;
        raiseException({message: nimCopy(null, fmt_res_13805002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 3:
        break;
      }
    }
    
    F.line = 528;
    if (c_13765539.refresh != null) { c_13765539.refresh.push({refresh: refresh_13765541, before: before_13765542, after: (after_13765543 || !(before_13765542)), init: false, reads: reads_13765544}); } else { c_13765539.refresh = [{refresh: refresh_13765541, before: before_13765542, after: (after_13765543 || !(before_13765542)), init: false, reads: reads_13765544}]; };
  framePtr = F.prev;

  
}
function HEX3Aanonymous_13685535(node_13685538) {
    function HEX3Aanonymous_13685813(c_13685822) {
        function HEX3Aanonymous_13686070(ev_13686076) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
          framePtr = F;
            if (ev_13686076.init) {
            F.line = 28;
            init_13685001(ev_13686076);
            }
            
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_13735607(group_13735833) {
            function HEX3Aanonymous_13750001(arg0_13750003) {
              var result_13750009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 30;
                var arg1_13750010 = nimCopy(null, arg0_13750003.name, NTI112);
                F.line = 69;
                result_13750009 = nimCopy(null, arg1_13750010, NTI112);
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_13750009;

            }
            function HEX3Aanonymous_13750275(dataHEX60gensym13736779_13750278, dataHEX60gensym13736779_13750278_Idx, val3HEX60gensym13736780_13755007) {
                function HEX3Aanonymous_13760001(arg0_13760003, value_13760009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
                  framePtr = F;
                    F.line = 30;
                    var arg1_13760010 = nimCopy(null, arg0_13760003.name, NTI112);
                    F.line = 122;
                    arg1_13760010 = nimCopy(null, value_13760009, NTI112);
                    F.line = 134;
                    arg0_13760003.name = nimCopy(null, arg1_13760010, NTI112);
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 182;
                var val2HEX60gensym13736781_13755008 = access_13736602(group_13735833).get(dataHEX60gensym13736779_13750278[dataHEX60gensym13736779_13750278_Idx]);
                F.line = 183;
                var set2HEX60gensym13736782_13760214 = HEX3Aanonymous_13760001;
                F.line = 184;
                set2HEX60gensym13736782_13760214(val2HEX60gensym13736781_13755008, val3HEX60gensym13736780_13755007);
                F.line = 185;
                access_13736602(group_13735833).set(dataHEX60gensym13736779_13750278, dataHEX60gensym13736779_13750278_Idx, val2HEX60gensym13736781_13755008);
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_13760609(a_13760826) {
                function HEX3Aanonymous_13761914(ev_13761920) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
                  framePtr = F;
                    F.line = 33;
                    F.line = 33;
                    var fmt_res_13761921 = [mnewString(0)];
                    F.line = 33;
                    if (fmt_res_13761921[0] != null) { fmt_res_13761921[0] = (fmt_res_13761921[0]).concat(makeNimstrLit("#/group/")); } else { fmt_res_13761921[0] = makeNimstrLit("#/group/"); };
                    F.line = 33;
                    format_value_10130080(fmt_res_13761921, 0, ev_13761920.data, []);
                    ev_13761920.node.setAttribute("href", toJSStr(fmt_res_13761921[0]));
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
              framePtr = F;
                F.line = 31;
                refresh_13761579(a_13760826, set_text_13685072(), false, false);
                F.line = 32;
                refresh_13765534(a_13760826, HEX3Aanonymous_13761914, false, false, refresh_all_10270524);
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_13975001(arg0_13975003) {
              var result_13975009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 34;
                var arg1_13975010 = nimCopy(null, arg0_13975003.description, NTI112);
                F.line = 69;
                result_13975009 = nimCopy(null, arg1_13975010, NTI112);
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_13975009;

            }
            function HEX3Aanonymous_13975229(dataHEX60gensym13961075_13975232, dataHEX60gensym13961075_13975232_Idx, val3HEX60gensym13961076_13980007) {
                function HEX3Aanonymous_13985001(arg0_13985003, value_13985009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
                  framePtr = F;
                    F.line = 34;
                    var arg1_13985010 = nimCopy(null, arg0_13985003.description, NTI112);
                    F.line = 122;
                    arg1_13985010 = nimCopy(null, value_13985009, NTI112);
                    F.line = 134;
                    arg0_13985003.description = nimCopy(null, arg1_13985010, NTI112);
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 182;
                var val2HEX60gensym13961077_13980008 = access_13736602(group_13735833).get(dataHEX60gensym13961075_13975232[dataHEX60gensym13961075_13975232_Idx]);
                F.line = 183;
                var set2HEX60gensym13961078_13985214 = HEX3Aanonymous_13985001;
                F.line = 184;
                set2HEX60gensym13961078_13985214(val2HEX60gensym13961077_13980008, val3HEX60gensym13961076_13980007);
                F.line = 185;
                access_13736602(group_13735833).set(dataHEX60gensym13961075_13975232, dataHEX60gensym13961075_13975232_Idx, val2HEX60gensym13961077_13980008);
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
          framePtr = F;
            match_13816835(group_13735833, makeNimstrLit("a"), ({get: HEX7C_13750216(access_13736602(group_13735833).get, HEX3Aanonymous_13750001), set: HEX3Aanonymous_13750275, id: HEX26_13760256(access_13736602(group_13735833).id, [makeNimstrLit("name")])}), HEX3Aanonymous_13760609);
            F.line = 34;
            refresh_13761579(match_13816835(group_13735833, makeNimstrLit(".description"), ({get: HEX7C_13750216(access_13736602(group_13735833).get, HEX3Aanonymous_13975001), set: HEX3Aanonymous_13975229, id: HEX26_13760256(access_13736602(group_13735833).id, [makeNimstrLit("description")])}), null), set_text_13685072(), false, false);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
      framePtr = F;
        F.line = 27;
        refresh_13686856(c_13685822, HEX3Aanonymous_13686070, false, false, refresh_all_10270524);
        iter_13988184(c_13685822, makeNimstrLit("li"), iter_groups_13676224, HEX3Aanonymous_13735607);
      framePtr = F.prev;

      
    }

  var result_13685811 = null;

  var F={procname:"groups.:anonymous",prev:framePtr,filename:"groups.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 26;
    result_13685811 = compile_14080611(node_13685538, HEX3Aanonymous_13685813, null);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_13685811;

}
var set_text_string_13685142 = set_text_13685072();
declare_14115813(components_10273124[0], groups_component_13676195, 0, fetch_template_13555001(makeNimstrLit("views/groups.html"), makeNimstrLit("template"), true), HEX3Aanonymous_13685535);
var threads_component_14451058 = [null];
var thread_component_14451095 = [null];
function sub_14895394(ts_14895399, val_14895401, val_14895401_Idx, set_val_14895403, update_14895404) {
    function HEX3Aanonymous_14895417(new_value_14895419, changed_path_14895421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_14895399.set(val_14895401, val_14895401_Idx, new_value_14895419);
        F.line = 360;
        var new_paths_14895423 = null;
        L1: do {
          F.line = 361;
          var p_14895430 = null;
          F.line = 184;
          var i_15319545 = 0;
          F.line = 185;
          var l_15319546 = (changed_path_14895421 != null ? changed_path_14895421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319545 < l_15319546)) break L3;
                F.line = 361;
                p_14895430 = changed_path_14895421[chckIndx(i_15319545, 0, (changed_path_14895421 != null ? changed_path_14895421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_14895423 != null) { new_paths_14895423.push(HEX26_13760256(ts_14895399.id, p_14895430)); } else { new_paths_14895423 = [HEX26_13760256(ts_14895399.id, p_14895430)]; };
                F.line = 188;
                i_15319545 = addInt(i_15319545, 1);
                if (!(((changed_path_14895421 != null ? changed_path_14895421.length : 0) == l_15319546))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_14895403 == null))) {
        F.line = 364;
        set_val_14895403(val_14895401[val_14895401_Idx], new_paths_14895423);
        }
        else {
        if (!((update_14895404 == null))) {
        F.line = 367;
        update_14895404({paths: nimCopy(null, new_paths_14895423, NTI14895422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_14895406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_14895403 == null) && (update_14895404 == null))) {
    F.line = 357;
    result_14895406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_14895406 = HEX3Aanonymous_14895417;
  } while (false);
  framePtr = F.prev;

  return result_14895406;

}
function add_14845218(x_14845223, x_14845223_Idx, y_14845225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_14845231 = (x_14845223[x_14845223_Idx] != null ? x_14845223[x_14845223_Idx].length : 0);
    F.line = 1209;
    if (x_14845223[x_14845223_Idx] === null) x_14845223[x_14845223_Idx] = [];
               if (x_14845223[x_14845223_Idx].length < (Tmp1 = chckRange(addInt(xl_14845231, (y_14845225 != null ? y_14845225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_14845223[x_14845223_Idx].length;i<Tmp1;++i) x_14845223[x_14845223_Idx].push(null); }
               else { x_14845223[x_14845223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_14845256 = 0;
      F.line = 66;
      var colontmp__15319556 = 0;
      F.line = 1210;
      colontmp__15319556 = (y_14845225 != null ? (y_14845225.length-1) : -1);
      F.line = 77;
      var res_15319557 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_15319557 <= colontmp__15319556)) break L4;
            F.line = 1210;
            i_14845256 = res_15319557;
            F.line = 1210;
            x_14845223[x_14845223_Idx][chckIndx(addInt(xl_14845231, i_14845256), 0, (x_14845223[x_14845223_Idx] != null ? x_14845223[x_14845223_Idx].length : 0)+0-1)-0] = y_14845225[chckIndx(i_14845256, 0, (y_14845225 != null ? y_14845225.length : 0)+0-1)-0];
            F.line = 80;
            res_15319557 = addInt(res_15319557, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_14895586(cfgs_14895591, node_14895592) {
  var result_14895595 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_14895595[0] = nimCopy(null, [], NTI14895610);
    L1: do {
      F.line = 658;
      var cfg_14895617 = null;
      F.line = 184;
      var i_15319552 = 0;
      F.line = 185;
      var l_15319553 = (cfgs_14895591 != null ? cfgs_14895591.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_15319552 < l_15319553)) break L3;
            F.line = 658;
            cfg_14895617 = cfgs_14895591[chckIndx(i_15319552, 0, (cfgs_14895591 != null ? cfgs_14895591.length : 0)+0-1)-0];
            F.line = 659;
            add_14845218(result_14895595, 0, cfg_14895617.compile(node_14895592));
            F.line = 188;
            i_15319552 = addInt(i_15319552, 1);
            if (!(((cfgs_14895591 != null ? cfgs_14895591.length : 0) == l_15319553))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14895595[0];

}
function create_iter_item_14895520(match_14895525, parent_node_14895526) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_14895528 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_14895533 = null;
    F.line = 683;
    var node_14895534 = null;
      var Tmp1 = match_14895525;
      if (ConstSet291[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_14895525;
    if (ConstSet292[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_14895533 = Tmp2.mount_template.clone();
    F.line = 686;
    node_14895534 = comp_14895533.node();
    }
    else {
      F.line = 688;
      node_14895534 = match_14895525.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_14895525;
    if (ConstSet293[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_14895528 = {serial: 0, mount: comp_14895533, node: node_14895534, matches: compile_14895586(Tmp3.match_templates, node_14895534), skip: false};
    F.line = 694;
    var Tmp4 = match_14895525;
    if (ConstSet294[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_14895526.insertBefore(node_14895534, Tmp4.anchor);
  framePtr = F.prev;

  return result_14895528;

}
function detach_14915493(iter_item_14915497, parent_node_14915498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_14915498.removeChild(iter_item_14915497.node);
  framePtr = F.prev;

  
}
function pop_14915243(s_14915248, s_14915248_Idx) {
  var result_14915249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_14915255 = subInt((s_14915248[s_14915248_Idx] != null ? s_14915248[s_14915248_Idx].length : 0), 1);
    F.line = 1784;
    result_14915249 = s_14915248[s_14915248_Idx][chckIndx(l_14915255, 0, (s_14915248[s_14915248_Idx] != null ? s_14915248[s_14915248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_14915248[s_14915248_Idx] === null) s_14915248[s_14915248_Idx] = [];
               if (s_14915248[s_14915248_Idx].length < chckRange(l_14915255, 0, 2147483647)) { for (var i=s_14915248[s_14915248_Idx].length;i<chckRange(l_14915255, 0, 2147483647);++i) s_14915248[s_14915248_Idx].push(null); }
               else { s_14915248[s_14915248_Idx].length = chckRange(l_14915255, 0, 2147483647); };
  framePtr = F.prev;

  return result_14915249;

}
function update_do_14866216(match_14866221, init_val_14866222, set_val_14866224, refresh_list_14866225) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_14875261() {
            var result_14875263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_14875263 = item_14875252;
            framePtr = F.prev;

            return result_14875263;

          }
          var Tmp16;
            function HEX3Aanonymous_14875281(new_value_14875283, path_14875300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_14875301 = mnewString(0);
                F.line = 747;
                if (fmt_res_14875301 != null) { fmt_res_14875301 = (fmt_res_14875301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_14875301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_14875301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14885017(new_value_14885019, path_14885036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_14885037 = mnewString(0);
                F.line = 754;
                if (fmt_res_14885037 != null) { fmt_res_14885037 = (fmt_res_14885037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_14885037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_14885037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14895050(refresh_list_14895052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_14865886(match_14866221, val_14875201[0], set_val_14866224, refresh_list_14895052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_14915524() {
        var result_14915526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_14915526 = converted_val_14915515;
        framePtr = F.prev;

        return result_14915526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_14915606(refresh_list_14915608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_14865886(match_14866221, val_14875201[0], set_val_14866224, refresh_list_14915608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_14866224 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_14875201 = [init_val_14866222];
    if (match_14866221.iter) {
    F.line = 720;
    var i_14875203 = 0;
    F.line = 721;
    var Tmp1 = match_14866221;
    if (ConstSet278[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_14875206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_14875207 = null;
    F.line = 723;
    var it_simple_14875212 = null;
    F.line = 724;
    var it_serial_14875217 = null;
    F.line = 725;
    var it_select_14875225 = null;
    F.line = 726;
    var Tmp2 = match_14866221;
    if (ConstSet279[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_14866221;
      if (ConstSet281[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet280[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_14875212 = Tmp4.simple(val_14875201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_14866221;
      if (ConstSet283[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet282[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_14875217 = Tmp6.serial(val_14875201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_14866221;
      if (ConstSet285[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet284[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_14875225 = Tmp8.selector(val_14875201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_14866221;
            if (ConstSet286[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14875203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_14866221;
          if (ConstSet287[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_14875203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_14875250 = [Tmp11];
          F.line = 736;
          var changed_14875251 = is_changed_10240207(refresh_list_14866225);
          F.line = 737;
          var item_14875252 = null;
          F.line = 738;
          var accessor_14875277 = {get: HEX3Aanonymous_14875261, set: null, m_type: NTI14455014};
          F.line = 741;
          var Tmp16 = match_14866221;
          if (ConstSet288[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_14875280 = it_simple_14875212();
            if ((it_14875280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_14875252 = it_14875280["Field1"];
            F.line = 746;
            accessor_14875277.set = HEX3Aanonymous_14875281;
            break;
          case 1:
            F.line = 750;
            var it_14885016 = it_serial_14875217(serial_14875250, 0);
            if ((it_14885016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_14875252 = it_14885016["Field1"];
            F.line = 753;
            accessor_14875277.set = HEX3Aanonymous_14885017;
            break;
          case 2:
            F.line = 757;
            var it_14895015 = it_select_14875225();
            if ((it_14895015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_14875252 = it_14895015.get(val_14875201[0]);
            F.line = 760;
            accessor_14875277.set = sub_14895394(it_14895015, val_14875201, 0, set_val_14866224, HEX3Aanonymous_14895050);
            F.line = 762;
            sub_list_14875207 = walk_10245019(refresh_list_14866225, it_14895015.id);
            F.line = 763;
            changed_14875251 = is_changed_10240207(sub_list_14875207);
            break;
          }
          F.line = 766;
          var iter_item_14895503 = null;
          F.line = 767;
          var inited_14895504 = false;
            var Tmp17 = match_14866221;
            if (ConstSet289[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14875203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_14866221;
          if (ConstSet290[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_14895503 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_14875203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_14895504 = true;
          F.line = 773;
          changed_14875251 = true;
          }
          else {
            F.line = 775;
            iter_item_14895503 = create_iter_item_14895520(match_14866221, parent_node_14875206);
            F.line = 776;
            var Tmp21 = match_14866221;
            if (ConstSet295[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_14895503); } else { Tmp22 = [iter_item_14895503]; };
            F.line = 777;
            inited_14895504 = false;
            if (!((serial_14875250[0] == iter_item_14895503.serial))) {
            F.line = 779;
            changed_14875251 = true;
            }
            
          }
          
          F.line = 782;
          var e_14895687 = {get: accessor_14875277.get, set: accessor_14875277.set, node: iter_item_14895503.node, data: item_14875252, init: !(inited_14895504), before: true, skip: iter_item_14895503.skip, m_type: NTI14455010};
          L23: do {
            F.line = 790;
            var refresh_14905214 = null;
            F.line = 184;
            var i_15319512 = 0;
            F.line = 185;
            var l_15319513 = (match_14866221.refresh != null ? match_14866221.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_15319512 < l_15319513)) break L25;
                  F.line = 790;
                  refresh_14905214 = match_14866221.refresh[chckIndx(i_15319512, 0, (match_14866221.refresh != null ? match_14866221.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_14905215 = refresh_14905214.before;
                    if (!exec_14905215) Tmp26 = false; else {                      var Tmp27 = match_14866221;
                      if (ConstSet296[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_14905215 = is_changed_10270456(sub_list_14875207, refresh_14905214.reads);
                  }
                  
                    if (exec_14905215) Tmp28 = true; else {                      if (!!(inited_14895504)) Tmp29 = false; else {                        Tmp29 = refresh_14905214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_14895687.data = item_14875252;
                  F.line = 796;
                  refresh_14905214.refresh(e_14895687);
                  F.line = 797;
                  iter_item_14895503.skip = e_14895687.skip;
                  }
                  
                  F.line = 188;
                  i_15319512 = addInt(i_15319512, 1);
                  if (!(((match_14866221.refresh != null ? match_14866221.refresh.length : 0) == l_15319513))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_14895503.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_14895503.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_14895503.mount.update(item_14875252, accessor_14875277.set, sub_list_14875207);
          }
          
          if (!(iter_item_14895503.skip)) {
          L31: do {
            F.line = 805;
            var submatch_14915214 = null;
            F.line = 184;
            var i_15319517 = 0;
            F.line = 185;
            var l_15319518 = (iter_item_14895503.matches != null ? iter_item_14895503.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_15319517 < l_15319518)) break L33;
                  F.line = 805;
                  submatch_14915214 = iter_item_14895503.matches[chckIndx(i_15319517, 0, (iter_item_14895503.matches != null ? iter_item_14895503.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_14915214.update(item_14875252, accessor_14875277.set, sub_list_14875207);
                  F.line = 188;
                  i_15319517 = addInt(i_15319517, 1);
                  if (!(((iter_item_14895503.matches != null ? iter_item_14895503.matches.length : 0) == l_15319518))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_14895687 = {get: accessor_14875277.get, set: accessor_14875277.set, node: iter_item_14895503.node, data: item_14875252, init: !(inited_14895504), before: false, skip: iter_item_14895503.skip, m_type: NTI14455010};
          L34: do {
            F.line = 817;
            var refresh_14915225 = null;
            F.line = 184;
            var i_15319522 = 0;
            F.line = 185;
            var l_15319523 = (match_14866221.refresh != null ? match_14866221.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_15319522 < l_15319523)) break L36;
                  F.line = 817;
                  refresh_14915225 = match_14866221.refresh[chckIndx(i_15319522, 0, (match_14866221.refresh != null ? match_14866221.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_14915226 = refresh_14915225.after;
                    if (!exec_14915226) Tmp37 = false; else {                      var Tmp38 = match_14866221;
                      if (ConstSet297[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_14915226 = is_changed_10270456(sub_list_14875207, refresh_14915225.reads);
                  }
                  
                  if (exec_14915226) {
                  F.line = 822;
                  e_14895687.data = item_14875252;
                  F.line = 823;
                  refresh_14915225.refresh(e_14895687);
                  F.line = 824;
                  iter_item_14895503.skip = e_14895687.skip;
                  }
                  
                  F.line = 188;
                  i_15319522 = addInt(i_15319522, 1);
                  if (!(((match_14866221.refresh != null ? match_14866221.refresh.length : 0) == l_15319523))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_14875203 = addInt(i_14875203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_14866221;
          if (ConstSet298[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_14875203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_14866221;
          if (ConstSet299[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_14915493(pop_14915243(Tmp43, "items"), parent_node_14875206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_14915512 = is_changed_10240207(refresh_list_14866225);
      F.line = 833;
      var sub_list_14915513 = null;
      F.line = 834;
      var node_14915514 = match_14866221.node;
      F.line = 835;
      var converted_val_14915515 = null;
      F.line = 836;
      var accessor_14915540 = {get: HEX3Aanonymous_14915524, set: null, m_type: NTI14455014};
      F.line = 840;
      var Tmp44 = match_14866221;
      if (ConstSet300[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_14866221;
        if (ConstSet302[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet301[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14915515 = Tmp46.simple(val_14875201[0]);
        F.line = 843;
        changed_14915512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_14866221;
        if (ConstSet303[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_14915548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_14866221;
        if (ConstSet305[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet304[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14915515 = Tmp49.serial(val_14875201[0], serial_14915548, 0);
          var Tmp50 = match_14866221;
          if (ConstSet306[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_14915548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_14915512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_14866221;
        if (ConstSet308[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet307[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_14866221;
        if (ConstSet309[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_14915560 = Tmp52.compare(val_14875201[0], Tmp53.value);
        F.line = 853;
        converted_val_14915515 = res_14915560.Field0;
        var Tmp54 = match_14866221;
        if (ConstSet310[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = res_14915560.Field0;
        if (res_14915560.Field1) {
        F.line = 856;
        changed_14915512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_14866221;
        if (ConstSet312[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet311[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_14915566 = Tmp56.obj;
        F.line = 860;
        converted_val_14915515 = obj_14915566.get(val_14875201[0]);
        F.line = 861;
        sub_list_14915513 = walk_10245019(refresh_list_14866225, obj_14915566.id);
        F.line = 862;
        changed_14915512 = is_changed_10240207(sub_list_14915513);
          if (!changed_14915512) Tmp57 = false; else {            var Tmp58 = match_14866221;
            if (ConstSet314[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet313[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_14866221;
        if (ConstSet316[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet315[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_14866221;
        if (ConstSet317[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_14915512 = !(Tmp61.eql(converted_val_14915515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_14915540.set = sub_14895394(obj_14915566, val_14875201, 0, set_val_14866224, HEX3Aanonymous_14915606);
        break;
      }
        var Tmp64 = match_14866221;
        if (ConstSet318[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_14866221;
          if (ConstSet319[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_14866221;
      if (ConstSet320[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_14866221;
      if (ConstSet321[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_14866221;
      if (ConstSet322[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14915514.parentNode.replaceChild(Tmp68.mount.node(), node_14915514);
      }
      
      F.line = 875;
      var Tmp69 = match_14866221;
      if (ConstSet323[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_14915991 = Tmp69.inited;
      if (!(inited_14915991)) {
      F.line = 876;
      changed_14915512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_14866221;
      if (ConstSet324[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14915998 = {get: accessor_14915540.get, set: accessor_14915540.set, node: node_14915514, data: converted_val_14915515, init: !(inited_14915991), before: changed_14915512, skip: Tmp70.skip, m_type: NTI14455010};
      L71: do {
        F.line = 885;
        var refresh_14916005 = null;
        F.line = 184;
        var i_15319529 = 0;
        F.line = 185;
        var l_15319530 = (match_14866221.refresh != null ? match_14866221.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_15319529 < l_15319530)) break L73;
              F.line = 885;
              refresh_14916005 = match_14866221.refresh[chckIndx(i_15319529, 0, (match_14866221.refresh != null ? match_14866221.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_14916006 = changed_14915512;
                if (!exec_14916006) Tmp74 = false; else {                  var Tmp75 = match_14866221;
                  if (ConstSet325[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_14916006 = is_changed_10270456(sub_list_14915513, refresh_14916005.reads);
              }
              
              F.line = 891;
              if (!refresh_14916005.before) Tmp77 = false; else {                Tmp77 = (exec_14916006 || !(inited_14915991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_14916005.init) Tmp78 = false; else {                  Tmp78 = !(inited_14915991);                }                Tmp76 = Tmp78;              }              exec_14916006 = Tmp76;
              if (exec_14916006) {
              F.line = 893;
              e_14915998.data = converted_val_14915515;
              F.line = 894;
              refresh_14916005.refresh(e_14915998);
              var Tmp79 = match_14866221;
              if (ConstSet326[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_14915998.skip;
              }
              
              F.line = 188;
              i_15319529 = addInt(i_15319529, 1);
              if (!(((match_14866221.refresh != null ? match_14866221.refresh.length : 0) == l_15319530))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_14915991)) {
      var Tmp80 = match_14866221;
      if (ConstSet327[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_14915512) Tmp82 = false; else {          var Tmp83 = match_14866221;
          if (ConstSet328[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_14866221;
          if (ConstSet329[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_14866221;
      if (ConstSet330[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14915514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_14866221;
      if (ConstSet331[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_14915515, accessor_14915540.set, sub_list_14915513);
      }
      
        if (!changed_14915512) Tmp87 = false; else {          var Tmp88 = match_14866221;
          if (ConstSet332[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_14916044 = null;
        F.line = 182;
        var colontmp__15319533 = null;
        F.line = 906;
        var Tmp90 = match_14866221;
        if (ConstSet333[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__15319533 = Tmp90.matches;
        F.line = 184;
        var i_15319534 = 0;
        F.line = 185;
        var l_15319535 = (colontmp__15319533 != null ? colontmp__15319533.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_15319534 < l_15319535)) break L92;
              F.line = 906;
              submatch_14916044 = colontmp__15319533[chckIndx(i_15319534, 0, (colontmp__15319533 != null ? colontmp__15319533.length : 0)+0-1)-0];
              F.line = 907;
              submatch_14916044.update(converted_val_14915515, accessor_14915540.set, sub_list_14915513);
              F.line = 188;
              i_15319534 = addInt(i_15319534, 1);
              if (!(((colontmp__15319533 != null ? colontmp__15319533.length : 0) == l_15319535))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_14915512) {
      F.line = 910;
      var Tmp93 = match_14866221;
      if (ConstSet334[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14916051 = {get: accessor_14915540.get, set: accessor_14915540.set, node: node_14915514, data: converted_val_14915515, init: !(inited_14915991), before: false, skip: Tmp93.skip, m_type: NTI14455010};
      L94: do {
        F.line = 918;
        var refresh_14916058 = null;
        F.line = 184;
        var i_15319539 = 0;
        F.line = 185;
        var l_15319540 = (match_14866221.refresh != null ? match_14866221.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_15319539 < l_15319540)) break L96;
              F.line = 918;
              refresh_14916058 = match_14866221.refresh[chckIndx(i_15319539, 0, (match_14866221.refresh != null ? match_14866221.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_14916059 = refresh_14916058.after;
                if (!exec_14916059) Tmp97 = false; else {                  var Tmp98 = match_14866221;
                  if (ConstSet335[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_14916059 = is_changed_10270456(sub_list_14915513, refresh_14916058.reads);
              }
              
              if (exec_14916059) {
              F.line = 923;
              e_14916051.data = converted_val_14915515;
              F.line = 924;
              refresh_14916058.refresh(e_14916051);
              var Tmp99 = match_14866221;
              if (ConstSet336[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_14916051.skip;
              }
              
              F.line = 188;
              i_15319539 = addInt(i_15319539, 1);
              if (!(((match_14866221.refresh != null ? match_14866221.refresh.length : 0) == l_15319540))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_14865886(match_14865891, init_val_14865892, set_val_14865894, refresh_list_14865895) {
    function HEX3Aanonymous_14865896() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_14866216(match_14865891, init_val_14865892, set_val_14865894, refresh_list_14865895);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_14916240 = HEX3Aanonymous_14865896;
    if (!((match_14865891.runner == null))) {
    F.line = 706;
    add_last_13906260(match_14865891.runner.fifo, run_14916240);
    }
    else {
      F.line = 708;
      match_14865891.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_14865891.runner.fifo, run_14916240);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_14865891.runner.fifo))) break L3;
            F.line = 712;
            var run_item_14920054 = pop_first_13950047(match_14865891.runner.fifo);
            F.line = 713;
            run_item_14920054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_14865891.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function update_14855720(t_14855724, init_val_14855725, set_val_14855727, refresh_list_14855728) {
function set_14855732(new_val_14855734, changed_path_14855736) {
  var F={procname:"update.set",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 958;
    t_14855724.data = new_val_14855734;
    if (!((set_val_14855727 == null))) {
    F.line = 960;
    set_val_14855727(new_val_14855734, changed_path_14855736);
    }
    else {
      F.line = 962;
    upd_14855729({paths: nimCopy(null, changed_path_14855736, NTI14855735)});
    }
    
  framePtr = F.prev;

  
}
    function upd_14855729(refresh_list_14855731) {
      var F={procname:"update.upd",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        L1: do {
          F.line = 965;
          var match_14865214 = null;
          F.line = 184;
          var i_15319502 = 0;
          F.line = 185;
          var l_15319503 = (t_14855724.cmatches != null ? t_14855724.cmatches.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319502 < l_15319503)) break L3;
                F.line = 965;
                match_14865214 = t_14855724.cmatches[chckIndx(i_15319502, 0, (t_14855724.cmatches != null ? t_14855724.cmatches.length : 0)+0-1)-0];
                F.line = 966;
                update_14865886(match_14865214, t_14855724.data, set_14855732, refresh_list_14855731);
                F.line = 188;
                i_15319502 = addInt(i_15319502, 1);
                if (!(((t_14855724.cmatches != null ? t_14855724.cmatches.length : 0) == l_15319503))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 954;
    t_14855724.data = init_val_14855725;
    F.line = 968;
    upd_14855729(refresh_list_14855728);
  framePtr = F.prev;

  
}
function id_type_selector_14820245() {
    function HEX3Aanonymous_14820257(data_14820259) {
      var result_14820260 = null;

      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 303;
        result_14820260 = data_14820259;
      framePtr = F.prev;

      return result_14820260;

    }
    function HEX3Aanonymous_14820274(data_14820277, data_14820277_Idx, value_14820278) {
      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 304;
        data_14820277[data_14820277_Idx] = value_14820278;
      framePtr = F.prev;

      
    }

  var result_14820249 = null;

  var F={procname:"idTypeSelector.idTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 302;
    result_14820249 = {get: HEX3Aanonymous_14820257, set: HEX3Aanonymous_14820274, id: []};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14820249;

}
function id_multi_type_selector_14820228(equal_14820234) {
  var result_14820236 = ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null});

  var F={procname:"idMultiTypeSelector.idMultiTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 308;
    nimCopy(result_14820236, {kind: 3, eql: equal_14820234, obj: id_type_selector_14820245(), simple: null, serial: null, compare: null}, NTI14530512);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14820236;

}
function create_14820203(config_14820209, equal_14820213) {
  var result_14820222 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 398;
    result_14820222 = {iter: false, convert: id_multi_type_selector_14820228(equal_14820213), config: config_14820209, m_type: NTI14820217, selector: null, refresh: null, cmatches: null, mount: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14820222;

}
function new_14820415() {
  var result_14820419 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_14820601 = null;
    F.line = 851;
    r_14820601 = ({cmatches: null, config: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), original_node: null, node: null, data: null});
    F.line = 852;
    result_14820419 = r_14820601;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14820419;

}
function compile_14821163(cfg_14821168, node_14821169) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_14821172 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_14821172 = nimCopy(null, [], NTI14821187);
    F.line = 620;
    if (eqStrings(cfg_14821168.selector, [])) {
    Tmp1 = [node_14821169];
    }
    else {
    Tmp1 = node_14821169.querySelectorAll(toJSStr(cfg_14821168.selector));
    }
    
    var matched_nodes_14821201 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_14821201 != null ? matched_nodes_14821201.length : 0) == 0)) {
    F.line = 622;
    var selector_14821207 = nimCopy(null, cfg_14821168.selector, NTI112);
    F.line = 623;
    var fmt_res_14821208 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_14821208[0] != null) { fmt_res_14821208[0] = (fmt_res_14821208[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_14821208[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_14821208, 0, selector_14821207, []);
    F.line = 623;
    if (fmt_res_14821208[0] != null) { fmt_res_14821208[0] = (fmt_res_14821208[0]).concat(makeNimstrLit("\'")); } else { fmt_res_14821208[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_14821208[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_14830008 = null;
      F.line = 184;
      var i_15319578 = 0;
      F.line = 185;
      var l_15319579 = (matched_nodes_14821201 != null ? matched_nodes_14821201.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_15319578 < l_15319579)) break L4;
            F.line = 625;
            matched_node_14830008 = matched_nodes_14821201[chckIndx(i_15319578, 0, (matched_nodes_14821201 != null ? matched_nodes_14821201.length : 0)+0-1)-0];
            F.line = 626;
            var match_14830016 = {refresh: nimCopy(null, cfg_14821168.refresh, NTI14530465), iter: cfg_14821168.iter, node: matched_node_14830008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_14830016.node = matched_node_14830008;
            if (match_14830016.iter) {
            var Tmp5 = match_14830016;
            if (ConstSet337[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_14821168;
            if (ConstSet338[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI14530576);
            var Tmp7 = match_14830016;
            if (ConstSet339[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_14830008).createComment(toJSStr(cstrToNimstr(((matched_node_14830008).outerHTML))));
            var Tmp8 = match_14830016;
            if (ConstSet340[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_14821168.mount;
            var Tmp9 = match_14830016;
            if (ConstSet341[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_14821168.cmatches, NTI14530504);
            var Tmp10 = match_14830016;
            if (ConstSet342[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI14835029);
            F.line = 637;
            var Tmp11 = match_14830016;
            if (ConstSet343[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_14830008.parentNode.replaceChild(Tmp11.anchor, matched_node_14830008);
            }
            else {
              var Tmp12 = match_14830016;
              if (ConstSet344[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_14821168;
              if (ConstSet345[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_14830016;
              if (ConstSet346[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_14830016;
                if (ConstSet347[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_14830016;
              if (ConstSet348[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_14821168;
              if (ConstSet349[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI14530512);
              var Tmp18 = match_14830016;
              if (ConstSet350[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI14835056);
              var Tmp19 = match_14830016;
              if (ConstSet351[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_14830016;
              if (ConstSet352[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_14821168.mount == null))) {
              var Tmp21 = match_14830016;
              if (ConstSet353[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_14821168.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_14845214 = null;
                  F.line = 184;
                  var i_15319575 = 0;
                  F.line = 185;
                  var l_15319576 = (cfg_14821168.cmatches != null ? cfg_14821168.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_15319575 < l_15319576)) break L24;
                        F.line = 652;
                        submatch_14845214 = cfg_14821168.cmatches[chckIndx(i_15319575, 0, (cfg_14821168.cmatches != null ? cfg_14821168.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_14830016;
                        if (ConstSet354[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_14845218(Tmp25, "matches", submatch_14845214.compile(matched_node_14830008));
                        F.line = 188;
                        i_15319575 = addInt(i_15319575, 1);
                        if (!(((cfg_14821168.cmatches != null ? cfg_14821168.cmatches.length : 0) == l_15319576))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_14821172 != null) { result_14821172.push(match_14830016); } else { result_14821172 = [match_14830016]; };
            F.line = 188;
            i_15319578 = addInt(i_15319578, 1);
            if (!(((matched_nodes_14821201 != null ? matched_nodes_14821201.length : 0) == l_15319579))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14821172;

}
function compile_14811098(node_14811103, configurator_14811105, equal_14811109) {
  var result_14811111 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_14811103 == null)))) {
    F.line = 664;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(664, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 665;
    var cfg_14820408 = create_14820203(configurator_14811105, equal_14811109);
    F.line = 666;
    cfg_14820408.config(cfg_14820408);
    F.line = 668;
    result_14811111 = new_14820415();
    F.line = 669;
    result_14811111.config = configurator_14811105;
    F.line = 670;
    nimCopy(result_14811111.convert, id_multi_type_selector_14820228(equal_14811109), NTI14530512);
    F.line = 671;
    result_14811111.original_node = node_14811103;
    F.line = 672;
    result_14811111.node = node_14811103.cloneNode(true);
    F.line = 673;
    result_14811111.cmatches = nimCopy(null, compile_14821163(cfg_14820408, result_14811111.node), NTI14821170);
  framePtr = F.prev;

  return result_14811111;

}
function clone_14920465(comp_14920469) {
    var Tmp1;

  var result_14920471 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 949;
    var Tmp1 = comp_14920469.convert;
    if (ConstSet355[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
    result_14920471 = compile_14811098(comp_14920469.original_node, comp_14920469.config, Tmp1.eql);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14920471;

}
function as_interface_14921809(comp_14921813) {
    function HEX3Aanonymous_14921820() {
      var result_14921822 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1005;
        result_14921822 = comp_14921813.node;
      framePtr = F.prev;

      return result_14921822;

    }
    function HEX3Aanonymous_14921836(data_14921838, set_14921843, refresh_list_14921844) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1007;
        update_14855720(comp_14921813, data_14921838, set_14921843, refresh_list_14921844);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14922536() {
      var result_14922542 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1009;
        result_14922542 = as_interface_14921809(clone_14920465(comp_14921813));
      framePtr = F.prev;

      return result_14922542;

    }

  var result_14921815 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1003;
    result_14921815 = {node: HEX3Aanonymous_14921820, update: HEX3Aanonymous_14921836, clone: HEX3Aanonymous_14922536};
  framePtr = F.prev;

  return result_14921815;

}
function late_14846204(late_comp_14846210) {
function resolve_comp_14846218() {
  var result_14846224 = null;

  var F={procname:"late.resolveComp",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((comp_14846217 == null)) {
    F.line = 1045;
    var late_14846233 = late_comp_14846210();
    if ((late_14846233 == null)) {
    F.line = 1047;
    var fmt_res_14846242 = mnewString(0);
    F.line = 1047;
    if (fmt_res_14846242 != null) { fmt_res_14846242 = (fmt_res_14846242).concat(makeNimstrLit("Late component not resolved in time")); } else { fmt_res_14846242 = makeNimstrLit("Late component not resolved in time"); };
    F.line = 1047;
    raiseException({message: nimCopy(null, fmt_res_14846242, NTI112), parent: null, m_type: NTI10206021, name: null, trace: null, up: null}, "CompileLateError");
    }
    
    F.line = 1048;
    comp_14846217 = late_14846233;
    }
    
    F.line = 1049;
    result_14846224 = comp_14846217;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14846224;

}
    function create_14855015() {
        function HEX3Aanonymous_14855026() {
          var result_14855028 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1054;
            result_14855028 = resolve_comp_14846218().node;
          framePtr = F.prev;

          return result_14855028;

        }
        function HEX3Aanonymous_14855042(data_14855044, set_14855049, refresh_list_14855050) {
          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1056;
            update_14855720(resolve_comp_14846218(), data_14855044, set_14855049, refresh_list_14855050);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_14920107() {
          var result_14920113 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1058;
            result_14920113 = as_interface_14921809(clone_14920465(resolve_comp_14846218()));
          framePtr = F.prev;

          return result_14920113;

        }

      var result_14855021 = null;

      var F={procname:"late.create",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1052;
        result_14855021 = {node: HEX3Aanonymous_14855026, update: HEX3Aanonymous_14855042, clone: HEX3Aanonymous_14920107};
      framePtr = F.prev;

      return result_14855021;

    }

  var result_14846212 = null;

  var F={procname:"late.late",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1041;
    var comp_14846217 = null;
    F.line = 1061;
    result_14846212 = create_14855015();
  framePtr = F.prev;

  return result_14846212;

}
async function init_comp_14924339(set_component_14924347, node_14924349, creator_14924351) {
  var result_14924353 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var n_14924375 = (await node_14924349);
    F.line = 22;
    set_component_14924347(creator_14924351(n_14924375));
    F.line = 131;
    result_14924353 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14924353;

}
function declare_14845791(registry_14845794, component_14845797, component_14845797_Idx, node_14845799, creator_14845806) {
    function HEX3Aanonymous_14845812(c_14845818) {
      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 30;
        comp_14845811 = c_14845818;
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14845833() {
      var result_14845839 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 31;
        result_14845839 = comp_14845811;
      framePtr = F.prev;

      return result_14845839;

    }
    function HEX3Aanonymous_14924332() {
      var result_14924337 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 32;
        result_14924337 = init_comp_14924339(set_component_14845832, node_14845799, creator_14845806);
      framePtr = F.prev;

      return result_14924337;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 29;
    var comp_14845811 = null;
    F.line = 30;
    var set_component_14845832 = HEX3Aanonymous_14845812;
    F.line = 31;
    component_14845797[component_14845797_Idx] = late_14846204(HEX3Aanonymous_14845833);
    F.line = 32;
    if (registry_14845794.Field0 != null) { registry_14845794.Field0.push(HEX3Aanonymous_14924332); } else { registry_14845794.Field0 = [HEX3Aanonymous_14924332]; };
  framePtr = F.prev;

  
}
function compile_14810602(registry_14810605, component_14810608, component_14810608_Idx, node_14810610, configurator_14810612, equal_14810616) {
    function HEX3Aanonymous_14811009(node_14811011) {
      var result_14811095 = null;

      var F={procname:"compile.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 36;
        result_14811095 = compile_14811098(node_14811011, configurator_14810612, equal_14810616);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_14811095;

    }

  var F={procname:"compile.compile",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 35;
    declare_14845791(registry_14810605, component_14810608, component_14810608_Idx, node_14810610, HEX3Aanonymous_14811009);
  framePtr = F.prev;

  
}
function refresh_14536538(c_14536543, refresh_14536545, before_14536546, after_14536547, reads_14536548) {
    var Tmp1;
      var Tmp2;

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (c_14536543.iter) {
    F.line = 511;
    var Tmp1 = c_14536543;
    if (ConstSet356[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    switch (Tmp1.iterate.kind) {
    case 0:
      F.line = 513;
      var fmt_res_14536550 = mnewString(0);
      F.line = 513;
      if (fmt_res_14536550 != null) { fmt_res_14536550 = (fmt_res_14536550).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates")); } else { fmt_res_14536550 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates"); };
      F.line = 513;
      raiseException({message: nimCopy(null, fmt_res_14536550, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 1:
      F.line = 515;
      var fmt_res_14545002 = mnewString(0);
      F.line = 515;
      if (fmt_res_14545002 != null) { fmt_res_14545002 = (fmt_res_14545002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates")); } else { fmt_res_14545002 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates"); };
      F.line = 515;
      raiseException({message: nimCopy(null, fmt_res_14545002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 2:
      break;
    }
    }
    else {
      F.line = 519;
      var Tmp2 = c_14536543;
      if (ConstSet357[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      switch (Tmp2.convert.kind) {
      case 0:
        F.line = 521;
        var fmt_res_14555003 = mnewString(0);
        F.line = 521;
        if (fmt_res_14555003 != null) { fmt_res_14555003 = (fmt_res_14555003).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates")); } else { fmt_res_14555003 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates"); };
        F.line = 521;
        raiseException({message: nimCopy(null, fmt_res_14555003, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 1:
        F.line = 523;
        var fmt_res_14565002 = mnewString(0);
        F.line = 523;
        if (fmt_res_14565002 != null) { fmt_res_14565002 = (fmt_res_14565002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates")); } else { fmt_res_14565002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates"); };
        F.line = 523;
        raiseException({message: nimCopy(null, fmt_res_14565002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 2:
        F.line = 525;
        var fmt_res_14575002 = mnewString(0);
        F.line = 525;
        if (fmt_res_14575002 != null) { fmt_res_14575002 = (fmt_res_14575002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates")); } else { fmt_res_14575002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates"); };
        F.line = 525;
        raiseException({message: nimCopy(null, fmt_res_14575002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 3:
        break;
      }
    }
    
    F.line = 528;
    if (c_14536543.refresh != null) { c_14536543.refresh.push({refresh: refresh_14536545, before: before_14536546, after: (after_14536547 || !(before_14536546)), init: false, reads: reads_14536548}); } else { c_14536543.refresh = [{refresh: refresh_14536545, before: before_14536546, after: (after_14536547 || !(before_14536546)), init: false, reads: reads_14536548}]; };
  framePtr = F.prev;

  
}
function refresh_before_14535535(c_14535540, refresh_proc_14535542) {
  var F={procname:"refresh_before.refresh_before",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 540;
    refresh_14536538(c_14535540, refresh_proc_14535542, true, false, refresh_all_10270524);
  framePtr = F.prev;

  
}
function HEX7C_14470216(p1_14470221, p2_14470224) {
    function HEX3Aanonymous_14470227() {
      var result_14470229 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 19;
        result_14470229 = nimCopy(null, p2_14470224(p1_14470221()), NTI112);
      framePtr = F.prev;

      return result_14470229;

    }

  var result_14470226 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_14470226 = HEX3Aanonymous_14470227;
  framePtr = F.prev;

  return result_14470226;

}
function new_14255008() {
  var result_14255012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_14255202 = null;
    F.line = 851;
    r_14255202 = ({threads: null});
    F.line = 852;
    result_14255012 = r_14255202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14255012;

}
function new_14305008() {
  var result_14305012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_14305202 = null;
    F.line = 851;
    r_14305202 = ({article: null, children: null, num: 0, first: 0, last: 0, endnum: 0, body: null});
    F.line = 852;
    result_14305012 = r_14305202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14305012;

}
function new_14335008() {
  var result_14335012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_14335202 = null;
    F.line = 851;
    r_14335202 = ({num: null, subject: null, from_h: null, date: null, message_id: null, references: null, bytes: null, lines: null});
    F.line = 852;
    result_14335012 = r_14335202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14335012;

}
function init_from_json_14370201(dst_14370206, dst_14370206_Idx, json_node_14370207, json_path_14370208, json_path_14370208_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_14370207, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_14370208[json_path_14370208_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet366[json_node_14370207.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym14370210_14385019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet367), nimCopy(null, json_path_14370208[json_path_14370208_Idx], NTI112), reprEnum(json_node_14370207.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym14370210_14385019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1020;
    if (dst_14370206[dst_14370206_Idx] === null) dst_14370206[dst_14370206_Idx] = [];
               if (dst_14370206[dst_14370206_Idx].length < (Tmp1 = chckRange(len_12205341(json_node_14370207), 0, 2147483647), Tmp1)) { for (var i=dst_14370206[dst_14370206_Idx].length;i<Tmp1;++i) dst_14370206[dst_14370206_Idx].push(null); }
               else { dst_14370206[dst_14370206_Idx].length = Tmp1; };
    F.line = 1021;
    var orignal_json_path_len_14390010 = (json_path_14370208[json_path_14370208_Idx] != null ? json_path_14370208[json_path_14370208_Idx].length : 0);
    L2: do {
      F.line = 1022;
      var i_14390019 = 0;
      F.line = 104;
      var colontmp__15319625 = 0;
      F.line = 1022;
      colontmp__15319625 = len_12205341(json_node_14370207);
      F.line = 106;
      var i_15319626 = 0;
      L3: do {
        F.line = 107;
          L4: while (true) {
          if (!(i_15319626 < colontmp__15319625)) break L4;
            F.line = 1022;
            i_14390019 = i_15319626;
            F.line = 1023;
            if (json_path_14370208[json_path_14370208_Idx] != null) { addChar(json_path_14370208[json_path_14370208_Idx], 91); } else { json_path_14370208[json_path_14370208_Idx] = [91]; };
            F.line = 1024;
            add_int_325201(json_path_14370208, json_path_14370208_Idx, i_14390019);
            F.line = 1025;
            if (json_path_14370208[json_path_14370208_Idx] != null) { addChar(json_path_14370208[json_path_14370208_Idx], 93); } else { json_path_14370208[json_path_14370208_Idx] = [93]; };
            F.line = 1026;
            init_from_json_12510865(dst_14370206[dst_14370206_Idx], chckIndx(i_14390019, 0, (dst_14370206[dst_14370206_Idx] != null ? dst_14370206[dst_14370206_Idx].length : 0)+0-1)-0, HEX5BHEX5D_12225569(json_node_14370207, i_14390019), json_path_14370208, json_path_14370208_Idx);
            F.line = 1027;
            (json_path_14370208[json_path_14370208_Idx] == null ? json_path_14370208[json_path_14370208_Idx] = mnewString(chckRange(orignal_json_path_len_14390010, 0, 2147483647)) : json_path_14370208[json_path_14370208_Idx].length = chckRange(orignal_json_path_len_14390010, 0, 2147483647));
            F.line = 109;
            i_15319626 = addInt(i_15319626, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function init_from_json_14335252(dst_14335256, json_node_14335257, json_path_14335258, json_path_14335258_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_14335260 = (json_path_14335258[json_path_14335258_Idx] != null ? json_path_14335258[json_path_14335258_Idx].length : 0);
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".num")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".num"); };
    F.line = 1124;
    init_from_json_12510865(dst_14335256, "num", get_or_default_12315016(json_node_14335257, makeNimstrLit("num")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".subject")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".subject"); };
    F.line = 1124;
    init_from_json_12510865(dst_14335256, "subject", get_or_default_12315016(json_node_14335257, makeNimstrLit("subject")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".from_h")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".from_h"); };
    F.line = 1124;
    init_from_json_12510865(dst_14335256, "from_h", get_or_default_12315016(json_node_14335257, makeNimstrLit("from_h")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".date")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".date"); };
    F.line = 1124;
    init_from_json_12510865(dst_14335256, "date", get_or_default_12315016(json_node_14335257, makeNimstrLit("date")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".message_id")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".message_id"); };
    F.line = 1124;
    init_from_json_12510865(dst_14335256, "message_id", get_or_default_12315016(json_node_14335257, makeNimstrLit("message_id")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".references")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".references"); };
    F.line = 1124;
    init_from_json_14370201(dst_14335256, "references", get_or_default_12315016(json_node_14335257, makeNimstrLit("references")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".bytes")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".bytes"); };
    F.line = 1124;
    init_from_json_12510865(dst_14335256, "bytes", get_or_default_12315016(json_node_14335257, makeNimstrLit("bytes")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14335258[json_path_14335258_Idx] != null) { json_path_14335258[json_path_14335258_Idx] = (json_path_14335258[json_path_14335258_Idx]).concat(makeNimstrLit(".lines")); } else { json_path_14335258[json_path_14335258_Idx] = makeNimstrLit(".lines"); };
    F.line = 1124;
    init_from_json_12510865(dst_14335256, "lines", get_or_default_12315016(json_node_14335257, makeNimstrLit("lines")), json_path_14335258, json_path_14335258_Idx);
    F.line = 1125;
    (json_path_14335258[json_path_14335258_Idx] == null ? json_path_14335258[json_path_14335258_Idx] = mnewString(chckRange(original_json_path_len_14335260, 0, 2147483647)) : json_path_14335258[json_path_14335258_Idx].length = chckRange(original_json_path_len_14335260, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_14315202(dst_14315207, dst_14315207_Idx, json_node_14315208, json_path_14315209, json_path_14315209_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_14315208, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_14315209[json_path_14315209_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet364[json_node_14315208.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym14315211_14330019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet365), nimCopy(null, json_path_14315209[json_path_14315209_Idx], NTI112), reprEnum(json_node_14315208.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym14315211_14330019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_14315208.kind == 0)) {
    F.line = 1062;
    dst_14315207[dst_14315207_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_14315207[dst_14315207_Idx] = new_14335008();
      F.line = 1065;
      init_from_json_14335252(dst_14315207[dst_14315207_Idx], json_node_14315208, json_path_14315209, json_path_14315209_Idx);
    }
    
  framePtr = F.prev;

  
}
function init_from_json_14410201(dst_14410205, dst_14410205_Idx, json_node_14410206, json_path_14410207, json_path_14410207_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_14410206, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_14410207[json_path_14410207_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet368[json_node_14410206.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym14410209_14425019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet369), nimCopy(null, json_path_14410207[json_path_14410207_Idx], NTI112), reprEnum(json_node_14410206.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym14410209_14425019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1005;
    var Tmp1 = json_node_14410206;
    if (ConstSet370[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    dst_14410205[dst_14410205_Idx] = chckRange(Tmp1.num, -2147483648, 2147483647);
  framePtr = F.prev;

  
}
function init_from_json_14305252(dst_14305256, json_node_14305257, json_path_14305258, json_path_14305258_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_14305260 = (json_path_14305258[json_path_14305258_Idx] != null ? json_path_14305258[json_path_14305258_Idx].length : 0);
    F.line = 1114;
    if (json_path_14305258[json_path_14305258_Idx] != null) { json_path_14305258[json_path_14305258_Idx] = (json_path_14305258[json_path_14305258_Idx]).concat(makeNimstrLit(".article")); } else { json_path_14305258[json_path_14305258_Idx] = makeNimstrLit(".article"); };
    F.line = 1124;
    init_from_json_14315202(dst_14305256, "article", get_or_default_12315016(json_node_14305257, makeNimstrLit("article")), json_path_14305258, json_path_14305258_Idx);
    F.line = 1125;
    (json_path_14305258[json_path_14305258_Idx] == null ? json_path_14305258[json_path_14305258_Idx] = mnewString(chckRange(original_json_path_len_14305260, 0, 2147483647)) : json_path_14305258[json_path_14305258_Idx].length = chckRange(original_json_path_len_14305260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14305258[json_path_14305258_Idx] != null) { json_path_14305258[json_path_14305258_Idx] = (json_path_14305258[json_path_14305258_Idx]).concat(makeNimstrLit(".children")); } else { json_path_14305258[json_path_14305258_Idx] = makeNimstrLit(".children"); };
    F.line = 1124;
    init_from_json_14265201(dst_14305256, "children", get_or_default_12315016(json_node_14305257, makeNimstrLit("children")), json_path_14305258, json_path_14305258_Idx);
    F.line = 1125;
    (json_path_14305258[json_path_14305258_Idx] == null ? json_path_14305258[json_path_14305258_Idx] = mnewString(chckRange(original_json_path_len_14305260, 0, 2147483647)) : json_path_14305258[json_path_14305258_Idx].length = chckRange(original_json_path_len_14305260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14305258[json_path_14305258_Idx] != null) { json_path_14305258[json_path_14305258_Idx] = (json_path_14305258[json_path_14305258_Idx]).concat(makeNimstrLit(".num")); } else { json_path_14305258[json_path_14305258_Idx] = makeNimstrLit(".num"); };
    F.line = 1124;
    init_from_json_14410201(dst_14305256, "num", get_or_default_12315016(json_node_14305257, makeNimstrLit("num")), json_path_14305258, json_path_14305258_Idx);
    F.line = 1125;
    (json_path_14305258[json_path_14305258_Idx] == null ? json_path_14305258[json_path_14305258_Idx] = mnewString(chckRange(original_json_path_len_14305260, 0, 2147483647)) : json_path_14305258[json_path_14305258_Idx].length = chckRange(original_json_path_len_14305260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14305258[json_path_14305258_Idx] != null) { json_path_14305258[json_path_14305258_Idx] = (json_path_14305258[json_path_14305258_Idx]).concat(makeNimstrLit(".first")); } else { json_path_14305258[json_path_14305258_Idx] = makeNimstrLit(".first"); };
    F.line = 1124;
    init_from_json_14410201(dst_14305256, "first", get_or_default_12315016(json_node_14305257, makeNimstrLit("first")), json_path_14305258, json_path_14305258_Idx);
    F.line = 1125;
    (json_path_14305258[json_path_14305258_Idx] == null ? json_path_14305258[json_path_14305258_Idx] = mnewString(chckRange(original_json_path_len_14305260, 0, 2147483647)) : json_path_14305258[json_path_14305258_Idx].length = chckRange(original_json_path_len_14305260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14305258[json_path_14305258_Idx] != null) { json_path_14305258[json_path_14305258_Idx] = (json_path_14305258[json_path_14305258_Idx]).concat(makeNimstrLit(".last")); } else { json_path_14305258[json_path_14305258_Idx] = makeNimstrLit(".last"); };
    F.line = 1124;
    init_from_json_14410201(dst_14305256, "last", get_or_default_12315016(json_node_14305257, makeNimstrLit("last")), json_path_14305258, json_path_14305258_Idx);
    F.line = 1125;
    (json_path_14305258[json_path_14305258_Idx] == null ? json_path_14305258[json_path_14305258_Idx] = mnewString(chckRange(original_json_path_len_14305260, 0, 2147483647)) : json_path_14305258[json_path_14305258_Idx].length = chckRange(original_json_path_len_14305260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14305258[json_path_14305258_Idx] != null) { json_path_14305258[json_path_14305258_Idx] = (json_path_14305258[json_path_14305258_Idx]).concat(makeNimstrLit(".endnum")); } else { json_path_14305258[json_path_14305258_Idx] = makeNimstrLit(".endnum"); };
    F.line = 1124;
    init_from_json_14410201(dst_14305256, "endnum", get_or_default_12315016(json_node_14305257, makeNimstrLit("endnum")), json_path_14305258, json_path_14305258_Idx);
    F.line = 1125;
    (json_path_14305258[json_path_14305258_Idx] == null ? json_path_14305258[json_path_14305258_Idx] = mnewString(chckRange(original_json_path_len_14305260, 0, 2147483647)) : json_path_14305258[json_path_14305258_Idx].length = chckRange(original_json_path_len_14305260, 0, 2147483647));
    F.line = 1114;
    if (json_path_14305258[json_path_14305258_Idx] != null) { json_path_14305258[json_path_14305258_Idx] = (json_path_14305258[json_path_14305258_Idx]).concat(makeNimstrLit(".body")); } else { json_path_14305258[json_path_14305258_Idx] = makeNimstrLit(".body"); };
    F.line = 1124;
    init_from_json_12510865(dst_14305256, "body", get_or_default_12315016(json_node_14305257, makeNimstrLit("body")), json_path_14305258, json_path_14305258_Idx);
    F.line = 1125;
    (json_path_14305258[json_path_14305258_Idx] == null ? json_path_14305258[json_path_14305258_Idx] = mnewString(chckRange(original_json_path_len_14305260, 0, 2147483647)) : json_path_14305258[json_path_14305258_Idx].length = chckRange(original_json_path_len_14305260, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_14285024(dst_14285029, dst_14285029_Idx, json_node_14285030, json_path_14285031, json_path_14285031_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_14285030, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_14285031[json_path_14285031_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet362[json_node_14285030.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym14285033_14300019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet363), nimCopy(null, json_path_14285031[json_path_14285031_Idx], NTI112), reprEnum(json_node_14285030.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym14285033_14300019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_14285030.kind == 0)) {
    F.line = 1062;
    dst_14285029[dst_14285029_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_14285029[dst_14285029_Idx] = new_14305008();
      F.line = 1065;
      init_from_json_14305252(dst_14285029[dst_14285029_Idx], json_node_14285030, json_path_14285031, json_path_14285031_Idx);
    }
    
  framePtr = F.prev;

  
}
function init_from_json_14265201(dst_14265206, dst_14265206_Idx, json_node_14265207, json_path_14265208, json_path_14265208_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_14265207, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_14265208[json_path_14265208_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet360[json_node_14265207.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym14265210_14280019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet361), nimCopy(null, json_path_14265208[json_path_14265208_Idx], NTI112), reprEnum(json_node_14265207.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym14265210_14280019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1020;
    if (dst_14265206[dst_14265206_Idx] === null) dst_14265206[dst_14265206_Idx] = [];
               if (dst_14265206[dst_14265206_Idx].length < (Tmp1 = chckRange(len_12205341(json_node_14265207), 0, 2147483647), Tmp1)) { for (var i=dst_14265206[dst_14265206_Idx].length;i<Tmp1;++i) dst_14265206[dst_14265206_Idx].push(null); }
               else { dst_14265206[dst_14265206_Idx].length = Tmp1; };
    F.line = 1021;
    var orignal_json_path_len_14285010 = (json_path_14265208[json_path_14265208_Idx] != null ? json_path_14265208[json_path_14265208_Idx].length : 0);
    L2: do {
      F.line = 1022;
      var i_14285019 = 0;
      F.line = 104;
      var colontmp__15319613 = 0;
      F.line = 1022;
      colontmp__15319613 = len_12205341(json_node_14265207);
      F.line = 106;
      var i_15319614 = 0;
      L3: do {
        F.line = 107;
          L4: while (true) {
          if (!(i_15319614 < colontmp__15319613)) break L4;
            F.line = 1022;
            i_14285019 = i_15319614;
            F.line = 1023;
            if (json_path_14265208[json_path_14265208_Idx] != null) { addChar(json_path_14265208[json_path_14265208_Idx], 91); } else { json_path_14265208[json_path_14265208_Idx] = [91]; };
            F.line = 1024;
            add_int_325201(json_path_14265208, json_path_14265208_Idx, i_14285019);
            F.line = 1025;
            if (json_path_14265208[json_path_14265208_Idx] != null) { addChar(json_path_14265208[json_path_14265208_Idx], 93); } else { json_path_14265208[json_path_14265208_Idx] = [93]; };
            F.line = 1026;
            init_from_json_14285024(dst_14265206[dst_14265206_Idx], chckIndx(i_14285019, 0, (dst_14265206[dst_14265206_Idx] != null ? dst_14265206[dst_14265206_Idx].length : 0)+0-1)-0, HEX5BHEX5D_12225569(json_node_14265207, i_14285019), json_path_14265208, json_path_14265208_Idx);
            F.line = 1027;
            (json_path_14265208[json_path_14265208_Idx] == null ? json_path_14265208[json_path_14265208_Idx] = mnewString(chckRange(orignal_json_path_len_14285010, 0, 2147483647)) : json_path_14265208[json_path_14265208_Idx].length = chckRange(orignal_json_path_len_14285010, 0, 2147483647));
            F.line = 109;
            i_15319614 = addInt(i_15319614, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function init_from_json_14255252(dst_14255256, json_node_14255257, json_path_14255258, json_path_14255258_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_14255260 = (json_path_14255258[json_path_14255258_Idx] != null ? json_path_14255258[json_path_14255258_Idx].length : 0);
    F.line = 1114;
    if (json_path_14255258[json_path_14255258_Idx] != null) { json_path_14255258[json_path_14255258_Idx] = (json_path_14255258[json_path_14255258_Idx]).concat(makeNimstrLit(".threads")); } else { json_path_14255258[json_path_14255258_Idx] = makeNimstrLit(".threads"); };
    F.line = 1124;
    init_from_json_14265201(dst_14255256, "threads", get_or_default_12315016(json_node_14255257, makeNimstrLit("threads")), json_path_14255258, json_path_14255258_Idx);
    F.line = 1125;
    (json_path_14255258[json_path_14255258_Idx] == null ? json_path_14255258[json_path_14255258_Idx] = mnewString(chckRange(original_json_path_len_14255260, 0, 2147483647)) : json_path_14255258[json_path_14255258_Idx].length = chckRange(original_json_path_len_14255260, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_14235044(dst_14235049, dst_14235049_Idx, json_node_14235050, json_path_14235051, json_path_14235051_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_12165491(json_node_14235050, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_14235051[json_path_14235051_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet358[json_node_14235050.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym14235053_14250019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_12525009(ConstSet359), nimCopy(null, json_path_14235051[json_path_14235051_Idx], NTI112), reprEnum(json_node_14235050.kind, NTI11996041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym14235053_14250019, NTI112), parent: null, m_type: NTI11811039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_14235050.kind == 0)) {
    F.line = 1062;
    dst_14235049[dst_14235049_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_14235049[dst_14235049_Idx] = new_14255008();
      F.line = 1065;
      init_from_json_14255252(dst_14235049[dst_14235049_Idx], json_node_14235050, json_path_14235051, json_path_14235051_Idx);
    }
    
  framePtr = F.prev;

  
}
function to_14235036(node_14235040) {
  var result_14235042 = [null];

  var F={procname:"to.to",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1230;
    var json_path_14235043 = [[]];
    F.line = 1231;
    init_from_json_14235044(result_14235042, 0, node_14235040, json_path_14235043, 0);
  framePtr = F.prev;

  return result_14235042[0];

}
async function request_threads_14200001(group_14200003) {
  var result_14200013 = null;

  var F={procname:"threads.request_threads",prev:framePtr,filename:"threads.nim",line:0};
  framePtr = F;
    F.line = 8;
    F.line = 8;
    var fmt_res_14200027 = [mnewString(0)];
    F.line = 8;
    if (fmt_res_14200027[0] != null) { fmt_res_14200027[0] = (fmt_res_14200027[0]).concat(makeNimstrLit("/group/")); } else { fmt_res_14200027[0] = makeNimstrLit("/group/"); };
    F.line = 8;
    format_value_10130080(fmt_res_14200027, 0, group_14200003, []);
    F.line = 8;
    if (fmt_res_14200027[0] != null) { fmt_res_14200027[0] = (fmt_res_14200027[0]).concat(makeNimstrLit("/index.json")); } else { fmt_res_14200027[0] = makeNimstrLit("/index.json"); };
    var res_14230027 = (await (window.fetch((toJSStr(fmt_res_14200027[0])))));
    F.line = 9;
    var text_14235026 = (await (res_14230027.text()));
    F.line = 10;
    var json_14235033 = cstrToNimstr((text_14235026));
    F.line = 11;
    result_14200013 = to_14235036(parse_json_12510257(json_14235033));
  framePtr = F.prev;

  return result_14200013;

}
function HEX7C_14495231(p1_14495236, p2_14495239) {
    function HEX3Aanonymous_14495242() {
      var result_14495244 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 19;
        result_14495244 = nimCopy(null, p2_14495239(p1_14495236()), NTI14451019);
      framePtr = F.prev;

      return result_14495244;

    }

  var result_14495241 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_14495241 = HEX3Aanonymous_14495242;
  framePtr = F.prev;

  return result_14495241;

}
async function init_14455001(ev_14455026) {
    function HEX3Aanonymous_14470001(arg0_14470003) {
      var result_14470009 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 23;
        var arg1_14470010 = nimCopy(null, arg0_14470003.group, NTI112);
        F.line = 69;
        result_14470009 = nimCopy(null, arg1_14470010, NTI112);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_14470009;

    }
    function HEX3Aanonymous_14470271(val3HEX60gensym14455043_14475007, pathsHEX60gensym14455044_14475034) {
        function HEX3Aanonymous_14480001(arg0_14480003, value_14480009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 23;
            var arg1_14480010 = nimCopy(null, arg0_14480003.group, NTI112);
            F.line = 122;
            arg1_14480010 = nimCopy(null, value_14480009, NTI112);
            F.line = 134;
            arg0_14480003.group = nimCopy(null, arg1_14480010, NTI112);
          framePtr = F.prev;

          
        }

      var F={procname:"init.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 193;
        var val2HEX60gensym14455045_14475035 = ev_14455026.get();
        F.line = 194;
        var set2HEX60gensym14455046_14480214 = HEX3Aanonymous_14480001;
        F.line = 195;
        set2HEX60gensym14455046_14480214(val2HEX60gensym14455045_14475035, val3HEX60gensym14455043_14475007);
        F.line = 196;
        var paths2HEX60gensym14455047_14480216 = null;
        L1: do {
          F.line = 197;
          var pHEX60gensym14455048_14480223 = null;
          F.line = 184;
          var i_15319600 = 0;
          F.line = 185;
          var l_15319601 = (pathsHEX60gensym14455044_14475034 != null ? pathsHEX60gensym14455044_14475034.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319600 < l_15319601)) break L3;
                F.line = 197;
                pHEX60gensym14455048_14480223 = pathsHEX60gensym14455044_14475034[chckIndx(i_15319600, 0, (pathsHEX60gensym14455044_14475034 != null ? pathsHEX60gensym14455044_14475034.length : 0)+0-1)-0];
                F.line = 198;
                if (paths2HEX60gensym14455047_14480216 != null) { paths2HEX60gensym14455047_14480216.push(HEX26_13760256([makeNimstrLit("group")], pHEX60gensym14455048_14480223)); } else { paths2HEX60gensym14455047_14480216 = [HEX26_13760256([makeNimstrLit("group")], pHEX60gensym14455048_14480223)]; };
                F.line = 188;
                i_15319600 = addInt(i_15319600, 1);
                if (!(((pathsHEX60gensym14455044_14475034 != null ? pathsHEX60gensym14455044_14475034.length : 0) == l_15319601))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        F.line = 199;
        ev_14455026.set(val2HEX60gensym14455045_14475035, paths2HEX60gensym14455047_14480216);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14495001(arg0_14495003) {
      var result_14495009 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 26;
        var arg1_14495010 = nimCopy(null, arg0_14495003.threads, NTI14451019);
        F.line = 69;
        result_14495009 = nimCopy(null, arg1_14495010, NTI14451019);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_14495009;

    }
    function HEX3Aanonymous_14495286(val3HEX60gensym14480297_14500007, pathsHEX60gensym14480298_14500034) {
        function HEX3Aanonymous_14505001(arg0_14505003, value_14505009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 26;
            var arg1_14505010 = nimCopy(null, arg0_14505003.threads, NTI14451019);
            F.line = 122;
            arg1_14505010 = nimCopy(null, value_14505009, NTI14451019);
            F.line = 134;
            arg0_14505003.threads = nimCopy(null, arg1_14505010, NTI14451019);
          framePtr = F.prev;

          
        }

      var F={procname:"init.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 193;
        var val2HEX60gensym14480299_14500035 = ev_14455026.get();
        F.line = 194;
        var set2HEX60gensym14480300_14505214 = HEX3Aanonymous_14505001;
        F.line = 195;
        set2HEX60gensym14480300_14505214(val2HEX60gensym14480299_14500035, val3HEX60gensym14480297_14500007);
        F.line = 196;
        var paths2HEX60gensym14480301_14505216 = null;
        L1: do {
          F.line = 197;
          var pHEX60gensym14480302_14505223 = null;
          F.line = 184;
          var i_15319632 = 0;
          F.line = 185;
          var l_15319633 = (pathsHEX60gensym14480298_14500034 != null ? pathsHEX60gensym14480298_14500034.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319632 < l_15319633)) break L3;
                F.line = 197;
                pHEX60gensym14480302_14505223 = pathsHEX60gensym14480298_14500034[chckIndx(i_15319632, 0, (pathsHEX60gensym14480298_14500034 != null ? pathsHEX60gensym14480298_14500034.length : 0)+0-1)-0];
                F.line = 198;
                if (paths2HEX60gensym14480301_14505216 != null) { paths2HEX60gensym14480301_14505216.push(HEX26_13760256([makeNimstrLit("threads")], pHEX60gensym14480302_14505223)); } else { paths2HEX60gensym14480301_14505216 = [HEX26_13760256([makeNimstrLit("threads")], pHEX60gensym14480302_14505223)]; };
                F.line = 188;
                i_15319632 = addInt(i_15319632, 1);
                if (!(((pathsHEX60gensym14480298_14500034 != null ? pathsHEX60gensym14480298_14500034.length : 0) == l_15319633))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        F.line = 199;
        ev_14455026.set(val2HEX60gensym14480299_14500035, paths2HEX60gensym14480301_14505216);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14520001(arg0_14520003) {
      var result_14520009 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 27;
        var arg1_14520010 = nimCopy(null, arg0_14520003.loaded_group, NTI112);
        F.line = 69;
        result_14520009 = nimCopy(null, arg1_14520010, NTI112);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_14520009;

    }
    function HEX3Aanonymous_14520226(val3HEX60gensym14505284_14525007, pathsHEX60gensym14505285_14525034) {
        function HEX3Aanonymous_14530001(arg0_14530003, value_14530009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 27;
            var arg1_14530010 = nimCopy(null, arg0_14530003.loaded_group, NTI112);
            F.line = 122;
            arg1_14530010 = nimCopy(null, value_14530009, NTI112);
            F.line = 134;
            arg0_14530003.loaded_group = nimCopy(null, arg1_14530010, NTI112);
          framePtr = F.prev;

          
        }

      var F={procname:"init.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 193;
        var val2HEX60gensym14505286_14525035 = ev_14455026.get();
        F.line = 194;
        var set2HEX60gensym14505287_14530214 = HEX3Aanonymous_14530001;
        F.line = 195;
        set2HEX60gensym14505287_14530214(val2HEX60gensym14505286_14525035, val3HEX60gensym14505284_14525007);
        F.line = 196;
        var paths2HEX60gensym14505288_14530216 = null;
        L1: do {
          F.line = 197;
          var pHEX60gensym14505289_14530223 = null;
          F.line = 184;
          var i_15319637 = 0;
          F.line = 185;
          var l_15319638 = (pathsHEX60gensym14505285_14525034 != null ? pathsHEX60gensym14505285_14525034.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319637 < l_15319638)) break L3;
                F.line = 197;
                pHEX60gensym14505289_14530223 = pathsHEX60gensym14505285_14525034[chckIndx(i_15319637, 0, (pathsHEX60gensym14505285_14525034 != null ? pathsHEX60gensym14505285_14525034.length : 0)+0-1)-0];
                F.line = 198;
                if (paths2HEX60gensym14505288_14530216 != null) { paths2HEX60gensym14505288_14530216.push(HEX26_13760256([makeNimstrLit("loaded_group")], pHEX60gensym14505289_14530223)); } else { paths2HEX60gensym14505288_14530216 = [HEX26_13760256([makeNimstrLit("loaded_group")], pHEX60gensym14505289_14530223)]; };
                F.line = 188;
                i_15319637 = addInt(i_15319637, 1);
                if (!(((pathsHEX60gensym14505285_14525034 != null ? pathsHEX60gensym14505285_14525034.length : 0) == l_15319638))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        F.line = 199;
        ev_14455026.set(val2HEX60gensym14505286_14525035, paths2HEX60gensym14505288_14530216);
      framePtr = F.prev;

      
    }

  var result_14455031 = null;

  var F={procname:"threads.init",prev:framePtr,filename:"threads.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 23;
    var group_14480283 = ({get: HEX7C_14470216(ev_14455026.get, HEX3Aanonymous_14470001), set: HEX3Aanonymous_14470271, m_type: NTI13760634}).get();
    F.line = 24;
    var threads_14480295 = (await request_threads_14200001(group_14480283));
    F.line = 25;
    console.log("threads: %v", threads_14480295);
    F.line = 26;
    ({get: HEX7C_14495231(ev_14455026.get, HEX3Aanonymous_14495001), set: HEX3Aanonymous_14495286, m_type: NTI14490012}).set(threads_14480295.threads, [[]]);
    F.line = 27;
    ({get: HEX7C_14470216(ev_14455026.get, HEX3Aanonymous_14520001), set: HEX3Aanonymous_14520226, m_type: NTI13760634}).set(group_14480283, [[]]);
    F.line = 131;
    result_14455031 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14455031;

}
function add_14745218(x_14745223, x_14745223_Idx, y_14745225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_14745231 = (x_14745223[x_14745223_Idx] != null ? x_14745223[x_14745223_Idx].length : 0);
    F.line = 1209;
    if (x_14745223[x_14745223_Idx] === null) x_14745223[x_14745223_Idx] = [];
               if (x_14745223[x_14745223_Idx].length < (Tmp1 = chckRange(addInt(xl_14745231, (y_14745225 != null ? y_14745225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_14745223[x_14745223_Idx].length;i<Tmp1;++i) x_14745223[x_14745223_Idx].push(null); }
               else { x_14745223[x_14745223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_14745256 = 0;
      F.line = 66;
      var colontmp__15319663 = 0;
      F.line = 1210;
      colontmp__15319663 = (y_14745225 != null ? (y_14745225.length-1) : -1);
      F.line = 77;
      var res_15319664 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_15319664 <= colontmp__15319663)) break L4;
            F.line = 1210;
            i_14745256 = res_15319664;
            F.line = 1210;
            x_14745223[x_14745223_Idx][chckIndx(addInt(xl_14745231, i_14745256), 0, (x_14745223[x_14745223_Idx] != null ? x_14745223[x_14745223_Idx].length : 0)+0-1)-0] = y_14745225[chckIndx(i_14745256, 0, (y_14745225 != null ? y_14745225.length : 0)+0-1)-0];
            F.line = 80;
            res_15319664 = addInt(res_15319664, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_14721723(cfg_14721728, node_14721729) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_14721793 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_14721793 = nimCopy(null, [], NTI14721808);
    F.line = 620;
    if (eqStrings(cfg_14721728.selector, [])) {
    Tmp1 = [node_14721729];
    }
    else {
    Tmp1 = node_14721729.querySelectorAll(toJSStr(cfg_14721728.selector));
    }
    
    var matched_nodes_14721822 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_14721822 != null ? matched_nodes_14721822.length : 0) == 0)) {
    F.line = 622;
    var selector_14721828 = nimCopy(null, cfg_14721728.selector, NTI112);
    F.line = 623;
    var fmt_res_14721829 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_14721829[0] != null) { fmt_res_14721829[0] = (fmt_res_14721829[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_14721829[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_14721829, 0, selector_14721828, []);
    F.line = 623;
    if (fmt_res_14721829[0] != null) { fmt_res_14721829[0] = (fmt_res_14721829[0]).concat(makeNimstrLit("\'")); } else { fmt_res_14721829[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_14721829[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_14730008 = null;
      F.line = 184;
      var i_15319659 = 0;
      F.line = 185;
      var l_15319660 = (matched_nodes_14721822 != null ? matched_nodes_14721822.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_15319659 < l_15319660)) break L4;
            F.line = 625;
            matched_node_14730008 = matched_nodes_14721822[chckIndx(i_15319659, 0, (matched_nodes_14721822 != null ? matched_nodes_14721822.length : 0)+0-1)-0];
            F.line = 626;
            var match_14730016 = {refresh: nimCopy(null, cfg_14721728.refresh, NTI14610809), iter: cfg_14721728.iter, node: matched_node_14730008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_14730016.node = matched_node_14730008;
            if (match_14730016.iter) {
            var Tmp5 = match_14730016;
            if (ConstSet371[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_14721728;
            if (ConstSet372[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI14610924);
            var Tmp7 = match_14730016;
            if (ConstSet373[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_14730008).createComment(toJSStr(cstrToNimstr(((matched_node_14730008).outerHTML))));
            var Tmp8 = match_14730016;
            if (ConstSet374[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_14721728.mount;
            var Tmp9 = match_14730016;
            if (ConstSet375[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_14721728.cmatches, NTI14610848);
            var Tmp10 = match_14730016;
            if (ConstSet376[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI14735029);
            F.line = 637;
            var Tmp11 = match_14730016;
            if (ConstSet377[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_14730008.parentNode.replaceChild(Tmp11.anchor, matched_node_14730008);
            }
            else {
              var Tmp12 = match_14730016;
              if (ConstSet378[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_14721728;
              if (ConstSet379[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_14730016;
              if (ConstSet380[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_14730016;
                if (ConstSet381[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_14730016;
              if (ConstSet382[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_14721728;
              if (ConstSet383[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI14610882);
              var Tmp18 = match_14730016;
              if (ConstSet384[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI14735056);
              var Tmp19 = match_14730016;
              if (ConstSet385[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_14730016;
              if (ConstSet386[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_14721728.mount == null))) {
              var Tmp21 = match_14730016;
              if (ConstSet387[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_14721728.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_14745214 = null;
                  F.line = 184;
                  var i_15319656 = 0;
                  F.line = 185;
                  var l_15319657 = (cfg_14721728.cmatches != null ? cfg_14721728.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_15319656 < l_15319657)) break L24;
                        F.line = 652;
                        submatch_14745214 = cfg_14721728.cmatches[chckIndx(i_15319656, 0, (cfg_14721728.cmatches != null ? cfg_14721728.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_14730016;
                        if (ConstSet388[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_14745218(Tmp25, "matches", submatch_14745214.compile(matched_node_14730008));
                        F.line = 188;
                        i_15319656 = addInt(i_15319656, 1);
                        if (!(((cfg_14721728.cmatches != null ? cfg_14721728.cmatches.length : 0) == l_15319657))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_14721793 != null) { result_14721793.push(match_14730016); } else { result_14721793 = [match_14730016]; };
            F.line = 188;
            i_15319659 = addInt(i_15319659, 1);
            if (!(((matched_nodes_14721822 != null ? matched_nodes_14721822.length : 0) == l_15319660))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14721793;

}
function sub_14785394(ts_14785399, val_14785401, val_14785401_Idx, set_val_14785403, update_14785404) {
    function HEX3Aanonymous_14785417(new_value_14785419, changed_path_14785421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_14785399.set(val_14785401, val_14785401_Idx, new_value_14785419);
        F.line = 360;
        var new_paths_14785423 = null;
        L1: do {
          F.line = 361;
          var p_14785430 = null;
          F.line = 184;
          var i_15319710 = 0;
          F.line = 185;
          var l_15319711 = (changed_path_14785421 != null ? changed_path_14785421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319710 < l_15319711)) break L3;
                F.line = 361;
                p_14785430 = changed_path_14785421[chckIndx(i_15319710, 0, (changed_path_14785421 != null ? changed_path_14785421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_14785423 != null) { new_paths_14785423.push(HEX26_13760256(ts_14785399.id, p_14785430)); } else { new_paths_14785423 = [HEX26_13760256(ts_14785399.id, p_14785430)]; };
                F.line = 188;
                i_15319710 = addInt(i_15319710, 1);
                if (!(((changed_path_14785421 != null ? changed_path_14785421.length : 0) == l_15319711))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_14785403 == null))) {
        F.line = 364;
        set_val_14785403(val_14785401[val_14785401_Idx], new_paths_14785423);
        }
        else {
        if (!((update_14785404 == null))) {
        F.line = 367;
        update_14785404({paths: nimCopy(null, new_paths_14785423, NTI14785422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_14785406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_14785403 == null) && (update_14785404 == null))) {
    F.line = 357;
    result_14785406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_14785406 = HEX3Aanonymous_14785417;
  } while (false);
  framePtr = F.prev;

  return result_14785406;

}
function compile_14785571(cfgs_14785576, node_14785577) {
  var result_14785580 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_14785580[0] = nimCopy(null, [], NTI14785595);
    L1: do {
      F.line = 658;
      var cfg_14785602 = null;
      F.line = 184;
      var i_15319716 = 0;
      F.line = 185;
      var l_15319717 = (cfgs_14785576 != null ? cfgs_14785576.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_15319716 < l_15319717)) break L3;
            F.line = 658;
            cfg_14785602 = cfgs_14785576[chckIndx(i_15319716, 0, (cfgs_14785576 != null ? cfgs_14785576.length : 0)+0-1)-0];
            F.line = 659;
            add_14745218(result_14785580, 0, cfg_14785602.compile(node_14785577));
            F.line = 188;
            i_15319716 = addInt(i_15319716, 1);
            if (!(((cfgs_14785576 != null ? cfgs_14785576.length : 0) == l_15319717))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14785580[0];

}
function create_iter_item_14785505(match_14785510, parent_node_14785511) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_14785513 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_14785518 = null;
    F.line = 683;
    var node_14785519 = null;
      var Tmp1 = match_14785510;
      if (ConstSet402[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_14785510;
    if (ConstSet403[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_14785518 = Tmp2.mount_template.clone();
    F.line = 686;
    node_14785519 = comp_14785518.node();
    }
    else {
      F.line = 688;
      node_14785519 = match_14785510.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_14785510;
    if (ConstSet404[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_14785513 = {serial: 0, mount: comp_14785518, node: node_14785519, matches: compile_14785571(Tmp3.match_templates, node_14785519), skip: false};
    F.line = 694;
    var Tmp4 = match_14785510;
    if (ConstSet405[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_14785511.insertBefore(node_14785519, Tmp4.anchor);
  framePtr = F.prev;

  return result_14785513;

}
function detach_14805493(iter_item_14805497, parent_node_14805498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_14805498.removeChild(iter_item_14805497.node);
  framePtr = F.prev;

  
}
function pop_14805243(s_14805248, s_14805248_Idx) {
  var result_14805249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_14805255 = subInt((s_14805248[s_14805248_Idx] != null ? s_14805248[s_14805248_Idx].length : 0), 1);
    F.line = 1784;
    result_14805249 = s_14805248[s_14805248_Idx][chckIndx(l_14805255, 0, (s_14805248[s_14805248_Idx] != null ? s_14805248[s_14805248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_14805248[s_14805248_Idx] === null) s_14805248[s_14805248_Idx] = [];
               if (s_14805248[s_14805248_Idx].length < chckRange(l_14805255, 0, 2147483647)) { for (var i=s_14805248[s_14805248_Idx].length;i<chckRange(l_14805255, 0, 2147483647);++i) s_14805248[s_14805248_Idx].push(null); }
               else { s_14805248[s_14805248_Idx].length = chckRange(l_14805255, 0, 2147483647); };
  framePtr = F.prev;

  return result_14805249;

}
function update_do_14756961(match_14756966, init_val_14756967, set_val_14756969, refresh_list_14756970) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_14765261() {
            var result_14765263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_14765263 = nimCopy(null, item_14765252, NTI14451019);
            framePtr = F.prev;

            return result_14765263;

          }
          var Tmp16;
            function HEX3Aanonymous_14765281(new_value_14765283, path_14765300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_14765301 = mnewString(0);
                F.line = 747;
                if (fmt_res_14765301 != null) { fmt_res_14765301 = (fmt_res_14765301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_14765301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_14765301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14775017(new_value_14775019, path_14775036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_14775037 = mnewString(0);
                F.line = 754;
                if (fmt_res_14775037 != null) { fmt_res_14775037 = (fmt_res_14775037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_14775037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_14775037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14785050(refresh_list_14785052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_14756631(match_14756966, val_14765201[0], set_val_14756969, refresh_list_14785052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_14805524() {
        var result_14805526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_14805526 = nimCopy(null, converted_val_14805515, NTI14451019);
        framePtr = F.prev;

        return result_14805526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_14805606(refresh_list_14805608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_14756631(match_14756966, val_14765201[0], set_val_14756969, refresh_list_14805608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_14756969 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_14765201 = [init_val_14756967];
    if (match_14756966.iter) {
    F.line = 720;
    var i_14765203 = 0;
    F.line = 721;
    var Tmp1 = match_14756966;
    if (ConstSet389[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_14765206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_14765207 = null;
    F.line = 723;
    var it_simple_14765212 = null;
    F.line = 724;
    var it_serial_14765217 = null;
    F.line = 725;
    var it_select_14765225 = null;
    F.line = 726;
    var Tmp2 = match_14756966;
    if (ConstSet390[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_14756966;
      if (ConstSet392[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet391[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_14765212 = Tmp4.simple(val_14765201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_14756966;
      if (ConstSet394[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet393[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_14765217 = Tmp6.serial(val_14765201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_14756966;
      if (ConstSet396[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet395[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_14765225 = Tmp8.selector(val_14765201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_14756966;
            if (ConstSet397[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14765203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_14756966;
          if (ConstSet398[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_14765203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_14765250 = [Tmp11];
          F.line = 736;
          var changed_14765251 = is_changed_10240207(refresh_list_14756970);
          F.line = 737;
          var item_14765252 = null;
          F.line = 738;
          var accessor_14765277 = {get: HEX3Aanonymous_14765261, set: null, m_type: NTI14490012};
          F.line = 741;
          var Tmp16 = match_14756966;
          if (ConstSet399[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_14765280 = it_simple_14765212();
            if ((it_14765280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_14765252 = nimCopy(null, it_14765280["Field1"], NTI14451019);
            F.line = 746;
            accessor_14765277.set = HEX3Aanonymous_14765281;
            break;
          case 1:
            F.line = 750;
            var it_14775016 = it_serial_14765217(serial_14765250, 0);
            if ((it_14775016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_14765252 = nimCopy(null, it_14775016["Field1"], NTI14451019);
            F.line = 753;
            accessor_14765277.set = HEX3Aanonymous_14775017;
            break;
          case 2:
            F.line = 757;
            var it_14785015 = it_select_14765225();
            if ((it_14785015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_14765252 = nimCopy(null, it_14785015.get(val_14765201[0]), NTI14451019);
            F.line = 760;
            accessor_14765277.set = sub_14785394(it_14785015, val_14765201, 0, set_val_14756969, HEX3Aanonymous_14785050);
            F.line = 762;
            sub_list_14765207 = walk_10245019(refresh_list_14756970, it_14785015.id);
            F.line = 763;
            changed_14765251 = is_changed_10240207(sub_list_14765207);
            break;
          }
          F.line = 766;
          var iter_item_14785488 = null;
          F.line = 767;
          var inited_14785489 = false;
            var Tmp17 = match_14756966;
            if (ConstSet400[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14765203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_14756966;
          if (ConstSet401[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_14785488 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_14765203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_14785489 = true;
          F.line = 773;
          changed_14765251 = true;
          }
          else {
            F.line = 775;
            iter_item_14785488 = create_iter_item_14785505(match_14756966, parent_node_14765206);
            F.line = 776;
            var Tmp21 = match_14756966;
            if (ConstSet406[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_14785488); } else { Tmp22 = [iter_item_14785488]; };
            F.line = 777;
            inited_14785489 = false;
            if (!((serial_14765250[0] == iter_item_14785488.serial))) {
            F.line = 779;
            changed_14765251 = true;
            }
            
          }
          
          F.line = 782;
          var e_14785672 = {get: accessor_14765277.get, set: accessor_14765277.set, node: iter_item_14785488.node, data: nimCopy(null, item_14765252, NTI14451019), init: !(inited_14785489), before: true, skip: iter_item_14785488.skip, m_type: NTI14610792};
          L23: do {
            F.line = 790;
            var refresh_14795214 = null;
            F.line = 184;
            var i_15319677 = 0;
            F.line = 185;
            var l_15319678 = (match_14756966.refresh != null ? match_14756966.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_15319677 < l_15319678)) break L25;
                  F.line = 790;
                  refresh_14795214 = match_14756966.refresh[chckIndx(i_15319677, 0, (match_14756966.refresh != null ? match_14756966.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_14795215 = refresh_14795214.before;
                    if (!exec_14795215) Tmp26 = false; else {                      var Tmp27 = match_14756966;
                      if (ConstSet407[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_14795215 = is_changed_10270456(sub_list_14765207, refresh_14795214.reads);
                  }
                  
                    if (exec_14795215) Tmp28 = true; else {                      if (!!(inited_14785489)) Tmp29 = false; else {                        Tmp29 = refresh_14795214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_14785672.data = nimCopy(null, item_14765252, NTI14451019);
                  F.line = 796;
                  refresh_14795214.refresh(e_14785672);
                  F.line = 797;
                  iter_item_14785488.skip = e_14785672.skip;
                  }
                  
                  F.line = 188;
                  i_15319677 = addInt(i_15319677, 1);
                  if (!(((match_14756966.refresh != null ? match_14756966.refresh.length : 0) == l_15319678))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_14785488.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_14785488.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_14785488.mount.update(item_14765252, accessor_14765277.set, sub_list_14765207);
          }
          
          if (!(iter_item_14785488.skip)) {
          L31: do {
            F.line = 805;
            var submatch_14805214 = null;
            F.line = 184;
            var i_15319682 = 0;
            F.line = 185;
            var l_15319683 = (iter_item_14785488.matches != null ? iter_item_14785488.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_15319682 < l_15319683)) break L33;
                  F.line = 805;
                  submatch_14805214 = iter_item_14785488.matches[chckIndx(i_15319682, 0, (iter_item_14785488.matches != null ? iter_item_14785488.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_14805214.update(item_14765252, accessor_14765277.set, sub_list_14765207);
                  F.line = 188;
                  i_15319682 = addInt(i_15319682, 1);
                  if (!(((iter_item_14785488.matches != null ? iter_item_14785488.matches.length : 0) == l_15319683))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_14785672 = {get: accessor_14765277.get, set: accessor_14765277.set, node: iter_item_14785488.node, data: nimCopy(null, item_14765252, NTI14451019), init: !(inited_14785489), before: false, skip: iter_item_14785488.skip, m_type: NTI14610792};
          L34: do {
            F.line = 817;
            var refresh_14805225 = null;
            F.line = 184;
            var i_15319687 = 0;
            F.line = 185;
            var l_15319688 = (match_14756966.refresh != null ? match_14756966.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_15319687 < l_15319688)) break L36;
                  F.line = 817;
                  refresh_14805225 = match_14756966.refresh[chckIndx(i_15319687, 0, (match_14756966.refresh != null ? match_14756966.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_14805226 = refresh_14805225.after;
                    if (!exec_14805226) Tmp37 = false; else {                      var Tmp38 = match_14756966;
                      if (ConstSet408[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_14805226 = is_changed_10270456(sub_list_14765207, refresh_14805225.reads);
                  }
                  
                  if (exec_14805226) {
                  F.line = 822;
                  e_14785672.data = nimCopy(null, item_14765252, NTI14451019);
                  F.line = 823;
                  refresh_14805225.refresh(e_14785672);
                  F.line = 824;
                  iter_item_14785488.skip = e_14785672.skip;
                  }
                  
                  F.line = 188;
                  i_15319687 = addInt(i_15319687, 1);
                  if (!(((match_14756966.refresh != null ? match_14756966.refresh.length : 0) == l_15319688))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_14765203 = addInt(i_14765203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_14756966;
          if (ConstSet409[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_14765203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_14756966;
          if (ConstSet410[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_14805493(pop_14805243(Tmp43, "items"), parent_node_14765206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_14805512 = is_changed_10240207(refresh_list_14756970);
      F.line = 833;
      var sub_list_14805513 = null;
      F.line = 834;
      var node_14805514 = match_14756966.node;
      F.line = 835;
      var converted_val_14805515 = null;
      F.line = 836;
      var accessor_14805540 = {get: HEX3Aanonymous_14805524, set: null, m_type: NTI14490012};
      F.line = 840;
      var Tmp44 = match_14756966;
      if (ConstSet411[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_14756966;
        if (ConstSet413[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet412[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14805515 = nimCopy(null, Tmp46.simple(val_14765201[0]), NTI14451019);
        F.line = 843;
        changed_14805512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_14756966;
        if (ConstSet414[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_14805548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_14756966;
        if (ConstSet416[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet415[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14805515 = nimCopy(null, Tmp49.serial(val_14765201[0], serial_14805548, 0), NTI14451019);
          var Tmp50 = match_14756966;
          if (ConstSet417[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_14805548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_14805512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_14756966;
        if (ConstSet419[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet418[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_14756966;
        if (ConstSet420[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_14805560 = Tmp52.compare(val_14765201[0], Tmp53.value);
        F.line = 853;
        converted_val_14805515 = nimCopy(null, res_14805560.Field0, NTI14451019);
        var Tmp54 = match_14756966;
        if (ConstSet421[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = nimCopy(null, res_14805560.Field0, NTI14451019);
        if (res_14805560.Field1) {
        F.line = 856;
        changed_14805512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_14756966;
        if (ConstSet423[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet422[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_14805566 = Tmp56.obj;
        F.line = 860;
        converted_val_14805515 = nimCopy(null, obj_14805566.get(val_14765201[0]), NTI14451019);
        F.line = 861;
        sub_list_14805513 = walk_10245019(refresh_list_14756970, obj_14805566.id);
        F.line = 862;
        changed_14805512 = is_changed_10240207(sub_list_14805513);
          if (!changed_14805512) Tmp57 = false; else {            var Tmp58 = match_14756966;
            if (ConstSet425[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet424[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_14756966;
        if (ConstSet427[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet426[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_14756966;
        if (ConstSet428[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_14805512 = !(Tmp61.eql(converted_val_14805515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_14805540.set = sub_14785394(obj_14805566, val_14765201, 0, set_val_14756969, HEX3Aanonymous_14805606);
        break;
      }
        var Tmp64 = match_14756966;
        if (ConstSet429[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_14756966;
          if (ConstSet430[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_14756966;
      if (ConstSet431[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_14756966;
      if (ConstSet432[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_14756966;
      if (ConstSet433[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14805514.parentNode.replaceChild(Tmp68.mount.node(), node_14805514);
      }
      
      F.line = 875;
      var Tmp69 = match_14756966;
      if (ConstSet434[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_14805991 = Tmp69.inited;
      if (!(inited_14805991)) {
      F.line = 876;
      changed_14805512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_14756966;
      if (ConstSet435[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14805998 = {get: accessor_14805540.get, set: accessor_14805540.set, node: node_14805514, data: nimCopy(null, converted_val_14805515, NTI14451019), init: !(inited_14805991), before: changed_14805512, skip: Tmp70.skip, m_type: NTI14610792};
      L71: do {
        F.line = 885;
        var refresh_14806005 = null;
        F.line = 184;
        var i_15319694 = 0;
        F.line = 185;
        var l_15319695 = (match_14756966.refresh != null ? match_14756966.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_15319694 < l_15319695)) break L73;
              F.line = 885;
              refresh_14806005 = match_14756966.refresh[chckIndx(i_15319694, 0, (match_14756966.refresh != null ? match_14756966.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_14806006 = changed_14805512;
                if (!exec_14806006) Tmp74 = false; else {                  var Tmp75 = match_14756966;
                  if (ConstSet436[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_14806006 = is_changed_10270456(sub_list_14805513, refresh_14806005.reads);
              }
              
              F.line = 891;
              if (!refresh_14806005.before) Tmp77 = false; else {                Tmp77 = (exec_14806006 || !(inited_14805991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_14806005.init) Tmp78 = false; else {                  Tmp78 = !(inited_14805991);                }                Tmp76 = Tmp78;              }              exec_14806006 = Tmp76;
              if (exec_14806006) {
              F.line = 893;
              e_14805998.data = nimCopy(null, converted_val_14805515, NTI14451019);
              F.line = 894;
              refresh_14806005.refresh(e_14805998);
              var Tmp79 = match_14756966;
              if (ConstSet437[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_14805998.skip;
              }
              
              F.line = 188;
              i_15319694 = addInt(i_15319694, 1);
              if (!(((match_14756966.refresh != null ? match_14756966.refresh.length : 0) == l_15319695))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_14805991)) {
      var Tmp80 = match_14756966;
      if (ConstSet438[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_14805512) Tmp82 = false; else {          var Tmp83 = match_14756966;
          if (ConstSet439[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_14756966;
          if (ConstSet440[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_14756966;
      if (ConstSet441[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14805514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_14756966;
      if (ConstSet442[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_14805515, accessor_14805540.set, sub_list_14805513);
      }
      
        if (!changed_14805512) Tmp87 = false; else {          var Tmp88 = match_14756966;
          if (ConstSet443[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_14806044 = null;
        F.line = 182;
        var colontmp__15319698 = null;
        F.line = 906;
        var Tmp90 = match_14756966;
        if (ConstSet444[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__15319698 = Tmp90.matches;
        F.line = 184;
        var i_15319699 = 0;
        F.line = 185;
        var l_15319700 = (colontmp__15319698 != null ? colontmp__15319698.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_15319699 < l_15319700)) break L92;
              F.line = 906;
              submatch_14806044 = colontmp__15319698[chckIndx(i_15319699, 0, (colontmp__15319698 != null ? colontmp__15319698.length : 0)+0-1)-0];
              F.line = 907;
              submatch_14806044.update(converted_val_14805515, accessor_14805540.set, sub_list_14805513);
              F.line = 188;
              i_15319699 = addInt(i_15319699, 1);
              if (!(((colontmp__15319698 != null ? colontmp__15319698.length : 0) == l_15319700))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_14805512) {
      F.line = 910;
      var Tmp93 = match_14756966;
      if (ConstSet445[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14806051 = {get: accessor_14805540.get, set: accessor_14805540.set, node: node_14805514, data: nimCopy(null, converted_val_14805515, NTI14451019), init: !(inited_14805991), before: false, skip: Tmp93.skip, m_type: NTI14610792};
      L94: do {
        F.line = 918;
        var refresh_14806058 = null;
        F.line = 184;
        var i_15319704 = 0;
        F.line = 185;
        var l_15319705 = (match_14756966.refresh != null ? match_14756966.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_15319704 < l_15319705)) break L96;
              F.line = 918;
              refresh_14806058 = match_14756966.refresh[chckIndx(i_15319704, 0, (match_14756966.refresh != null ? match_14756966.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_14806059 = refresh_14806058.after;
                if (!exec_14806059) Tmp97 = false; else {                  var Tmp98 = match_14756966;
                  if (ConstSet446[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_14806059 = is_changed_10270456(sub_list_14805513, refresh_14806058.reads);
              }
              
              if (exec_14806059) {
              F.line = 923;
              e_14806051.data = nimCopy(null, converted_val_14805515, NTI14451019);
              F.line = 924;
              refresh_14806058.refresh(e_14806051);
              var Tmp99 = match_14756966;
              if (ConstSet447[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_14806051.skip;
              }
              
              F.line = 188;
              i_15319704 = addInt(i_15319704, 1);
              if (!(((match_14756966.refresh != null ? match_14756966.refresh.length : 0) == l_15319705))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_14756631(match_14756636, init_val_14756637, set_val_14756639, refresh_list_14756640) {
    function HEX3Aanonymous_14756641() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_14756961(match_14756636, init_val_14756637, set_val_14756639, refresh_list_14756640);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_14806225 = HEX3Aanonymous_14756641;
    if (!((match_14756636.runner == null))) {
    F.line = 706;
    add_last_13906260(match_14756636.runner.fifo, run_14806225);
    }
    else {
      F.line = 708;
      match_14756636.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_14756636.runner.fifo, run_14806225);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_14756636.runner.fifo))) break L3;
            F.line = 712;
            var run_item_14810054 = pop_first_13950047(match_14756636.runner.fifo);
            F.line = 713;
            run_item_14810054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_14756636.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_14756524(match_14756529) {
    function HEX3Aanonymous_14756536(data_14756538, set_14756543, refresh_list_14756544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_14756631(match_14756529, data_14756538, set_14756543, refresh_list_14756544);
      framePtr = F.prev;

      
    }

  var result_14756531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_14756531 = {update: HEX3Aanonymous_14756536};
  framePtr = F.prev;

  return result_14756531;

}
function as_interface_14720819(config_14720824) {
    function HEX3Aanonymous_14720831(node_14720833) {
      var result_14720839 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_14720839 = nimCopy(null, [], NTI14720854);
        L1: do {
          F.line = 997;
          var comp_match_14755214 = null;
          F.line = 182;
          var colontmp__15319644 = null;
          F.line = 997;
          colontmp__15319644 = compile_14721723(config_14720824, node_14720833);
          F.line = 184;
          var i_15319646 = 0;
          F.line = 185;
          var l_15319647 = (colontmp__15319644 != null ? colontmp__15319644.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319646 < l_15319647)) break L3;
                F.line = 997;
                comp_match_14755214 = colontmp__15319644[chckIndx(i_15319646, 0, (colontmp__15319644 != null ? colontmp__15319644.length : 0)+0-1)-0];
                F.line = 998;
                if (result_14720839 != null) { result_14720839.push(as_interface_14756524(comp_match_14755214)); } else { result_14720839 = [as_interface_14756524(comp_match_14755214)]; };
                F.line = 188;
                i_15319646 = addInt(i_15319646, 1);
                if (!(((colontmp__15319644 != null ? colontmp__15319644.length : 0) == l_15319647))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_14720839;

    }

  var result_14720826 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_14720826 = {compile: HEX3Aanonymous_14720831};
  framePtr = F.prev;

  return result_14720826;

}
function match_14719471(c_14719477, selector_14719478, convert_14719480, actions_14719486) {
  var result_14719488 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 408;
    result_14719488 = {selector: nimCopy(null, selector_14719478, NTI112), refresh: [], mount: null, iter: false, convert: nimCopy(null, convert_14719480, NTI14610882), m_type: NTI14610779, cmatches: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    F.line = 414;
    if (c_14719477.cmatches != null) { c_14719477.cmatches.push(as_interface_14720819(result_14719488)); } else { c_14719477.cmatches = [as_interface_14720819(result_14719488)]; };
    if (!((actions_14719486 == null))) {
    F.line = 416;
    actions_14719486(result_14719488);
    }
    
  framePtr = F.prev;

  return result_14719488;

}
function match_14716840(c_14716846, convert_14716848, actions_14716854) {
  var result_14716856 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 448;
    var type_selector_14716864 = {kind: 3, obj: convert_14716848, simple: null, serial: null, compare: null, eql: null};
    F.line = 451;
    result_14716856 = match_14719471(c_14716846, [], type_selector_14716864, actions_14716854);
  framePtr = F.prev;

  return result_14716856;

}
function HEX7C_14600216(p1_14600223, p2_14600226) {
    function HEX3Aanonymous_14600230(x_14600232) {
      var result_14600233 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_14600233 = nimCopy(null, p2_14600226(p1_14600223(x_14600232)), NTI14451019);
      framePtr = F.prev;

      return result_14600233;

    }

  var result_14600229 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_14600229 = HEX3Aanonymous_14600230;
  framePtr = F.prev;

  return result_14600229;

}
function access_14585835(c_14585840) {
    function HEX3Aanonymous_14585850(data_14585852) {
      var result_14585853 = null;

      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 211;
        result_14585853 = data_14585852;
      framePtr = F.prev;

      return result_14585853;

    }
    function HEX3Aanonymous_14585867(data_14585870, data_14585870_Idx, value_14585871) {
      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 212;
        data_14585870[data_14585870_Idx] = value_14585871;
      framePtr = F.prev;

      
    }

  var result_14585842 = null;

  var F={procname:"access.access",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_14585842 = {get: HEX3Aanonymous_14585850, set: HEX3Aanonymous_14585867, id: []};
  framePtr = F.prev;

  return result_14585842;

}
function add_14650218(x_14650223, x_14650223_Idx, y_14650225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_14650231 = (x_14650223[x_14650223_Idx] != null ? x_14650223[x_14650223_Idx].length : 0);
    F.line = 1209;
    if (x_14650223[x_14650223_Idx] === null) x_14650223[x_14650223_Idx] = [];
               if (x_14650223[x_14650223_Idx].length < (Tmp1 = chckRange(addInt(xl_14650231, (y_14650225 != null ? y_14650225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_14650223[x_14650223_Idx].length;i<Tmp1;++i) x_14650223[x_14650223_Idx].push(null); }
               else { x_14650223[x_14650223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_14650256 = 0;
      F.line = 66;
      var colontmp__15319743 = 0;
      F.line = 1210;
      colontmp__15319743 = (y_14650225 != null ? (y_14650225.length-1) : -1);
      F.line = 77;
      var res_15319744 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_15319744 <= colontmp__15319743)) break L4;
            F.line = 1210;
            i_14650256 = res_15319744;
            F.line = 1210;
            x_14650223[x_14650223_Idx][chckIndx(addInt(xl_14650231, i_14650256), 0, (x_14650223[x_14650223_Idx] != null ? x_14650223[x_14650223_Idx].length : 0)+0-1)-0] = y_14650225[chckIndx(i_14650256, 0, (y_14650225 != null ? y_14650225.length : 0)+0-1)-0];
            F.line = 80;
            res_15319744 = addInt(res_15319744, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_14628360(cfg_14628365, node_14628366) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_14628430 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_14628430 = nimCopy(null, [], NTI14628445);
    F.line = 620;
    if (eqStrings(cfg_14628365.selector, [])) {
    Tmp1 = [node_14628366];
    }
    else {
    Tmp1 = node_14628366.querySelectorAll(toJSStr(cfg_14628365.selector));
    }
    
    var matched_nodes_14628459 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_14628459 != null ? matched_nodes_14628459.length : 0) == 0)) {
    F.line = 622;
    var selector_14628465 = nimCopy(null, cfg_14628365.selector, NTI112);
    F.line = 623;
    var fmt_res_14628466 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_14628466[0] != null) { fmt_res_14628466[0] = (fmt_res_14628466[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_14628466[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_14628466, 0, selector_14628465, []);
    F.line = 623;
    if (fmt_res_14628466[0] != null) { fmt_res_14628466[0] = (fmt_res_14628466[0]).concat(makeNimstrLit("\'")); } else { fmt_res_14628466[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_14628466[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_14635008 = null;
      F.line = 184;
      var i_15319739 = 0;
      F.line = 185;
      var l_15319740 = (matched_nodes_14628459 != null ? matched_nodes_14628459.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_15319739 < l_15319740)) break L4;
            F.line = 625;
            matched_node_14635008 = matched_nodes_14628459[chckIndx(i_15319739, 0, (matched_nodes_14628459 != null ? matched_nodes_14628459.length : 0)+0-1)-0];
            F.line = 626;
            var match_14635016 = {refresh: nimCopy(null, cfg_14628365.refresh, NTI14615390), iter: cfg_14628365.iter, node: matched_node_14635008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_14635016.node = matched_node_14635008;
            if (match_14635016.iter) {
            var Tmp5 = match_14635016;
            if (ConstSet448[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_14628365;
            if (ConstSet449[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI14615501);
            var Tmp7 = match_14635016;
            if (ConstSet450[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_14635008).createComment(toJSStr(cstrToNimstr(((matched_node_14635008).outerHTML))));
            var Tmp8 = match_14635016;
            if (ConstSet451[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_14628365.mount;
            var Tmp9 = match_14635016;
            if (ConstSet452[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_14628365.cmatches, NTI14615429);
            var Tmp10 = match_14635016;
            if (ConstSet453[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI14640029);
            F.line = 637;
            var Tmp11 = match_14635016;
            if (ConstSet454[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_14635008.parentNode.replaceChild(Tmp11.anchor, matched_node_14635008);
            }
            else {
              var Tmp12 = match_14635016;
              if (ConstSet455[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_14628365;
              if (ConstSet456[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_14635016;
              if (ConstSet457[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_14635016;
                if (ConstSet458[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_14635016;
              if (ConstSet459[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_14628365;
              if (ConstSet460[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI14615437);
              var Tmp18 = match_14635016;
              if (ConstSet461[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI14640056);
              var Tmp19 = match_14635016;
              if (ConstSet462[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_14635016;
              if (ConstSet463[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_14628365.mount == null))) {
              var Tmp21 = match_14635016;
              if (ConstSet464[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_14628365.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_14650214 = null;
                  F.line = 184;
                  var i_15319736 = 0;
                  F.line = 185;
                  var l_15319737 = (cfg_14628365.cmatches != null ? cfg_14628365.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_15319736 < l_15319737)) break L24;
                        F.line = 652;
                        submatch_14650214 = cfg_14628365.cmatches[chckIndx(i_15319736, 0, (cfg_14628365.cmatches != null ? cfg_14628365.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_14635016;
                        if (ConstSet465[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_14650218(Tmp25, "matches", submatch_14650214.compile(matched_node_14635008));
                        F.line = 188;
                        i_15319736 = addInt(i_15319736, 1);
                        if (!(((cfg_14628365.cmatches != null ? cfg_14628365.cmatches.length : 0) == l_15319737))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_14628430 != null) { result_14628430.push(match_14635016); } else { result_14628430 = [match_14635016]; };
            F.line = 188;
            i_15319739 = addInt(i_15319739, 1);
            if (!(((matched_nodes_14628459 != null ? matched_nodes_14628459.length : 0) == l_15319740))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14628430;

}
function sub_14690394(ts_14690399, val_14690401, val_14690401_Idx, set_val_14690403, update_14690404) {
    function HEX3Aanonymous_14690417(new_value_14690419, changed_path_14690421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_14690399.set(val_14690401, val_14690401_Idx, new_value_14690419);
        F.line = 360;
        var new_paths_14690423 = null;
        L1: do {
          F.line = 361;
          var p_14690430 = null;
          F.line = 184;
          var i_15319790 = 0;
          F.line = 185;
          var l_15319791 = (changed_path_14690421 != null ? changed_path_14690421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319790 < l_15319791)) break L3;
                F.line = 361;
                p_14690430 = changed_path_14690421[chckIndx(i_15319790, 0, (changed_path_14690421 != null ? changed_path_14690421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_14690423 != null) { new_paths_14690423.push(HEX26_13760256(ts_14690399.id, p_14690430)); } else { new_paths_14690423 = [HEX26_13760256(ts_14690399.id, p_14690430)]; };
                F.line = 188;
                i_15319790 = addInt(i_15319790, 1);
                if (!(((changed_path_14690421 != null ? changed_path_14690421.length : 0) == l_15319791))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_14690403 == null))) {
        F.line = 364;
        set_val_14690403(val_14690401[val_14690401_Idx], new_paths_14690423);
        }
        else {
        if (!((update_14690404 == null))) {
        F.line = 367;
        update_14690404({paths: nimCopy(null, new_paths_14690423, NTI14690422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_14690406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_14690403 == null) && (update_14690404 == null))) {
    F.line = 357;
    result_14690406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_14690406 = HEX3Aanonymous_14690417;
  } while (false);
  framePtr = F.prev;

  return result_14690406;

}
function compile_14690586(cfgs_14690591, node_14690592) {
  var result_14690595 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_14690595[0] = nimCopy(null, [], NTI14690610);
    L1: do {
      F.line = 658;
      var cfg_14690617 = null;
      F.line = 184;
      var i_15319796 = 0;
      F.line = 185;
      var l_15319797 = (cfgs_14690591 != null ? cfgs_14690591.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_15319796 < l_15319797)) break L3;
            F.line = 658;
            cfg_14690617 = cfgs_14690591[chckIndx(i_15319796, 0, (cfgs_14690591 != null ? cfgs_14690591.length : 0)+0-1)-0];
            F.line = 659;
            add_14650218(result_14690595, 0, cfg_14690617.compile(node_14690592));
            F.line = 188;
            i_15319796 = addInt(i_15319796, 1);
            if (!(((cfgs_14690591 != null ? cfgs_14690591.length : 0) == l_15319797))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14690595[0];

}
function create_iter_item_14690520(match_14690525, parent_node_14690526) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_14690528 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_14690533 = null;
    F.line = 683;
    var node_14690534 = null;
      var Tmp1 = match_14690525;
      if (ConstSet479[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_14690525;
    if (ConstSet480[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_14690533 = Tmp2.mount_template.clone();
    F.line = 686;
    node_14690534 = comp_14690533.node();
    }
    else {
      F.line = 688;
      node_14690534 = match_14690525.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_14690525;
    if (ConstSet481[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_14690528 = {serial: 0, mount: comp_14690533, node: node_14690534, matches: compile_14690586(Tmp3.match_templates, node_14690534), skip: false};
    F.line = 694;
    var Tmp4 = match_14690525;
    if (ConstSet482[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_14690526.insertBefore(node_14690534, Tmp4.anchor);
  framePtr = F.prev;

  return result_14690528;

}
function detach_14710493(iter_item_14710497, parent_node_14710498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_14710498.removeChild(iter_item_14710497.node);
  framePtr = F.prev;

  
}
function pop_14710243(s_14710248, s_14710248_Idx) {
  var result_14710249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_14710255 = subInt((s_14710248[s_14710248_Idx] != null ? s_14710248[s_14710248_Idx].length : 0), 1);
    F.line = 1784;
    result_14710249 = s_14710248[s_14710248_Idx][chckIndx(l_14710255, 0, (s_14710248[s_14710248_Idx] != null ? s_14710248[s_14710248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_14710248[s_14710248_Idx] === null) s_14710248[s_14710248_Idx] = [];
               if (s_14710248[s_14710248_Idx].length < chckRange(l_14710255, 0, 2147483647)) { for (var i=s_14710248[s_14710248_Idx].length;i<chckRange(l_14710255, 0, 2147483647);++i) s_14710248[s_14710248_Idx].push(null); }
               else { s_14710248[s_14710248_Idx].length = chckRange(l_14710255, 0, 2147483647); };
  framePtr = F.prev;

  return result_14710249;

}
function update_do_14662117(match_14662122, init_val_14662123, set_val_14662125, refresh_list_14662126) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_14670261() {
            var result_14670263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_14670263 = item_14670252;
            framePtr = F.prev;

            return result_14670263;

          }
          var Tmp16;
            function HEX3Aanonymous_14670281(new_value_14670283, path_14670300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_14670301 = mnewString(0);
                F.line = 747;
                if (fmt_res_14670301 != null) { fmt_res_14670301 = (fmt_res_14670301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_14670301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_14670301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14680017(new_value_14680019, path_14680036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_14680037 = mnewString(0);
                F.line = 754;
                if (fmt_res_14680037 != null) { fmt_res_14680037 = (fmt_res_14680037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_14680037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_14680037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_14690050(refresh_list_14690052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_14661787(match_14662122, val_14670201[0], set_val_14662125, refresh_list_14690052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_14710524() {
        var result_14710526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_14710526 = converted_val_14710515;
        framePtr = F.prev;

        return result_14710526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_14710606(refresh_list_14710608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_14661787(match_14662122, val_14670201[0], set_val_14662125, refresh_list_14710608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_14662125 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_14670201 = [nimCopy(null, init_val_14662123, NTI14451019)];
    if (match_14662122.iter) {
    F.line = 720;
    var i_14670203 = 0;
    F.line = 721;
    var Tmp1 = match_14662122;
    if (ConstSet466[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_14670206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_14670207 = null;
    F.line = 723;
    var it_simple_14670212 = null;
    F.line = 724;
    var it_serial_14670217 = null;
    F.line = 725;
    var it_select_14670225 = null;
    F.line = 726;
    var Tmp2 = match_14662122;
    if (ConstSet467[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_14662122;
      if (ConstSet469[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet468[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_14670212 = Tmp4.simple(val_14670201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_14662122;
      if (ConstSet471[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet470[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_14670217 = Tmp6.serial(val_14670201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_14662122;
      if (ConstSet473[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet472[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_14670225 = Tmp8.selector(val_14670201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_14662122;
            if (ConstSet474[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14670203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_14662122;
          if (ConstSet475[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_14670203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_14670250 = [Tmp11];
          F.line = 736;
          var changed_14670251 = is_changed_10240207(refresh_list_14662126);
          F.line = 737;
          var item_14670252 = null;
          F.line = 738;
          var accessor_14670277 = {get: HEX3Aanonymous_14670261, set: null, m_type: NTI14615368};
          F.line = 741;
          var Tmp16 = match_14662122;
          if (ConstSet476[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_14670280 = it_simple_14670212();
            if ((it_14670280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_14670252 = it_14670280["Field1"];
            F.line = 746;
            accessor_14670277.set = HEX3Aanonymous_14670281;
            break;
          case 1:
            F.line = 750;
            var it_14680016 = it_serial_14670217(serial_14670250, 0);
            if ((it_14680016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_14670252 = it_14680016["Field1"];
            F.line = 753;
            accessor_14670277.set = HEX3Aanonymous_14680017;
            break;
          case 2:
            F.line = 757;
            var it_14690015 = it_select_14670225();
            if ((it_14690015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_14670252 = it_14690015.get(val_14670201[0]);
            F.line = 760;
            accessor_14670277.set = sub_14690394(it_14690015, val_14670201, 0, set_val_14662125, HEX3Aanonymous_14690050);
            F.line = 762;
            sub_list_14670207 = walk_10245019(refresh_list_14662126, it_14690015.id);
            F.line = 763;
            changed_14670251 = is_changed_10240207(sub_list_14670207);
            break;
          }
          F.line = 766;
          var iter_item_14690503 = null;
          F.line = 767;
          var inited_14690504 = false;
            var Tmp17 = match_14662122;
            if (ConstSet477[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_14670203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_14662122;
          if (ConstSet478[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_14690503 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_14670203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_14690504 = true;
          F.line = 773;
          changed_14670251 = true;
          }
          else {
            F.line = 775;
            iter_item_14690503 = create_iter_item_14690520(match_14662122, parent_node_14670206);
            F.line = 776;
            var Tmp21 = match_14662122;
            if (ConstSet483[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_14690503); } else { Tmp22 = [iter_item_14690503]; };
            F.line = 777;
            inited_14690504 = false;
            if (!((serial_14670250[0] == iter_item_14690503.serial))) {
            F.line = 779;
            changed_14670251 = true;
            }
            
          }
          
          F.line = 782;
          var e_14690687 = {get: accessor_14670277.get, set: accessor_14670277.set, node: iter_item_14690503.node, data: item_14670252, init: !(inited_14690504), before: true, skip: iter_item_14690503.skip, m_type: NTI14615364};
          L23: do {
            F.line = 790;
            var refresh_14700214 = null;
            F.line = 184;
            var i_15319757 = 0;
            F.line = 185;
            var l_15319758 = (match_14662122.refresh != null ? match_14662122.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_15319757 < l_15319758)) break L25;
                  F.line = 790;
                  refresh_14700214 = match_14662122.refresh[chckIndx(i_15319757, 0, (match_14662122.refresh != null ? match_14662122.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_14700215 = refresh_14700214.before;
                    if (!exec_14700215) Tmp26 = false; else {                      var Tmp27 = match_14662122;
                      if (ConstSet484[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_14700215 = is_changed_10270456(sub_list_14670207, refresh_14700214.reads);
                  }
                  
                    if (exec_14700215) Tmp28 = true; else {                      if (!!(inited_14690504)) Tmp29 = false; else {                        Tmp29 = refresh_14700214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_14690687.data = item_14670252;
                  F.line = 796;
                  refresh_14700214.refresh(e_14690687);
                  F.line = 797;
                  iter_item_14690503.skip = e_14690687.skip;
                  }
                  
                  F.line = 188;
                  i_15319757 = addInt(i_15319757, 1);
                  if (!(((match_14662122.refresh != null ? match_14662122.refresh.length : 0) == l_15319758))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_14690503.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_14690503.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_14690503.mount.update(item_14670252, accessor_14670277.set, sub_list_14670207);
          }
          
          if (!(iter_item_14690503.skip)) {
          L31: do {
            F.line = 805;
            var submatch_14710214 = null;
            F.line = 184;
            var i_15319762 = 0;
            F.line = 185;
            var l_15319763 = (iter_item_14690503.matches != null ? iter_item_14690503.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_15319762 < l_15319763)) break L33;
                  F.line = 805;
                  submatch_14710214 = iter_item_14690503.matches[chckIndx(i_15319762, 0, (iter_item_14690503.matches != null ? iter_item_14690503.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_14710214.update(item_14670252, accessor_14670277.set, sub_list_14670207);
                  F.line = 188;
                  i_15319762 = addInt(i_15319762, 1);
                  if (!(((iter_item_14690503.matches != null ? iter_item_14690503.matches.length : 0) == l_15319763))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_14690687 = {get: accessor_14670277.get, set: accessor_14670277.set, node: iter_item_14690503.node, data: item_14670252, init: !(inited_14690504), before: false, skip: iter_item_14690503.skip, m_type: NTI14615364};
          L34: do {
            F.line = 817;
            var refresh_14710225 = null;
            F.line = 184;
            var i_15319767 = 0;
            F.line = 185;
            var l_15319768 = (match_14662122.refresh != null ? match_14662122.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_15319767 < l_15319768)) break L36;
                  F.line = 817;
                  refresh_14710225 = match_14662122.refresh[chckIndx(i_15319767, 0, (match_14662122.refresh != null ? match_14662122.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_14710226 = refresh_14710225.after;
                    if (!exec_14710226) Tmp37 = false; else {                      var Tmp38 = match_14662122;
                      if (ConstSet485[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_14710226 = is_changed_10270456(sub_list_14670207, refresh_14710225.reads);
                  }
                  
                  if (exec_14710226) {
                  F.line = 822;
                  e_14690687.data = item_14670252;
                  F.line = 823;
                  refresh_14710225.refresh(e_14690687);
                  F.line = 824;
                  iter_item_14690503.skip = e_14690687.skip;
                  }
                  
                  F.line = 188;
                  i_15319767 = addInt(i_15319767, 1);
                  if (!(((match_14662122.refresh != null ? match_14662122.refresh.length : 0) == l_15319768))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_14670203 = addInt(i_14670203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_14662122;
          if (ConstSet486[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_14670203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_14662122;
          if (ConstSet487[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_14710493(pop_14710243(Tmp43, "items"), parent_node_14670206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_14710512 = is_changed_10240207(refresh_list_14662126);
      F.line = 833;
      var sub_list_14710513 = null;
      F.line = 834;
      var node_14710514 = match_14662122.node;
      F.line = 835;
      var converted_val_14710515 = null;
      F.line = 836;
      var accessor_14710540 = {get: HEX3Aanonymous_14710524, set: null, m_type: NTI14615368};
      F.line = 840;
      var Tmp44 = match_14662122;
      if (ConstSet488[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_14662122;
        if (ConstSet490[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet489[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14710515 = Tmp46.simple(val_14670201[0]);
        F.line = 843;
        changed_14710512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_14662122;
        if (ConstSet491[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_14710548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_14662122;
        if (ConstSet493[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet492[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_14710515 = Tmp49.serial(val_14670201[0], serial_14710548, 0);
          var Tmp50 = match_14662122;
          if (ConstSet494[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_14710548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_14710512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_14662122;
        if (ConstSet496[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet495[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_14662122;
        if (ConstSet497[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_14710560 = Tmp52.compare(val_14670201[0], Tmp53.value);
        F.line = 853;
        converted_val_14710515 = res_14710560.Field0;
        var Tmp54 = match_14662122;
        if (ConstSet498[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = res_14710560.Field0;
        if (res_14710560.Field1) {
        F.line = 856;
        changed_14710512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_14662122;
        if (ConstSet500[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet499[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_14710566 = Tmp56.obj;
        F.line = 860;
        converted_val_14710515 = obj_14710566.get(val_14670201[0]);
        F.line = 861;
        sub_list_14710513 = walk_10245019(refresh_list_14662126, obj_14710566.id);
        F.line = 862;
        changed_14710512 = is_changed_10240207(sub_list_14710513);
          if (!changed_14710512) Tmp57 = false; else {            var Tmp58 = match_14662122;
            if (ConstSet502[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet501[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_14662122;
        if (ConstSet504[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet503[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_14662122;
        if (ConstSet505[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_14710512 = !(Tmp61.eql(converted_val_14710515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_14710540.set = sub_14690394(obj_14710566, val_14670201, 0, set_val_14662125, HEX3Aanonymous_14710606);
        break;
      }
        var Tmp64 = match_14662122;
        if (ConstSet506[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_14662122;
          if (ConstSet507[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_14662122;
      if (ConstSet508[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_14662122;
      if (ConstSet509[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_14662122;
      if (ConstSet510[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14710514.parentNode.replaceChild(Tmp68.mount.node(), node_14710514);
      }
      
      F.line = 875;
      var Tmp69 = match_14662122;
      if (ConstSet511[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_14710991 = Tmp69.inited;
      if (!(inited_14710991)) {
      F.line = 876;
      changed_14710512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_14662122;
      if (ConstSet512[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14710998 = {get: accessor_14710540.get, set: accessor_14710540.set, node: node_14710514, data: converted_val_14710515, init: !(inited_14710991), before: changed_14710512, skip: Tmp70.skip, m_type: NTI14615364};
      L71: do {
        F.line = 885;
        var refresh_14711005 = null;
        F.line = 184;
        var i_15319774 = 0;
        F.line = 185;
        var l_15319775 = (match_14662122.refresh != null ? match_14662122.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_15319774 < l_15319775)) break L73;
              F.line = 885;
              refresh_14711005 = match_14662122.refresh[chckIndx(i_15319774, 0, (match_14662122.refresh != null ? match_14662122.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_14711006 = changed_14710512;
                if (!exec_14711006) Tmp74 = false; else {                  var Tmp75 = match_14662122;
                  if (ConstSet513[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_14711006 = is_changed_10270456(sub_list_14710513, refresh_14711005.reads);
              }
              
              F.line = 891;
              if (!refresh_14711005.before) Tmp77 = false; else {                Tmp77 = (exec_14711006 || !(inited_14710991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_14711005.init) Tmp78 = false; else {                  Tmp78 = !(inited_14710991);                }                Tmp76 = Tmp78;              }              exec_14711006 = Tmp76;
              if (exec_14711006) {
              F.line = 893;
              e_14710998.data = converted_val_14710515;
              F.line = 894;
              refresh_14711005.refresh(e_14710998);
              var Tmp79 = match_14662122;
              if (ConstSet514[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_14710998.skip;
              }
              
              F.line = 188;
              i_15319774 = addInt(i_15319774, 1);
              if (!(((match_14662122.refresh != null ? match_14662122.refresh.length : 0) == l_15319775))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_14710991)) {
      var Tmp80 = match_14662122;
      if (ConstSet515[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_14710512) Tmp82 = false; else {          var Tmp83 = match_14662122;
          if (ConstSet516[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_14662122;
          if (ConstSet517[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_14662122;
      if (ConstSet518[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_14710514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_14662122;
      if (ConstSet519[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_14710515, accessor_14710540.set, sub_list_14710513);
      }
      
        if (!changed_14710512) Tmp87 = false; else {          var Tmp88 = match_14662122;
          if (ConstSet520[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_14711044 = null;
        F.line = 182;
        var colontmp__15319778 = null;
        F.line = 906;
        var Tmp90 = match_14662122;
        if (ConstSet521[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__15319778 = Tmp90.matches;
        F.line = 184;
        var i_15319779 = 0;
        F.line = 185;
        var l_15319780 = (colontmp__15319778 != null ? colontmp__15319778.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_15319779 < l_15319780)) break L92;
              F.line = 906;
              submatch_14711044 = colontmp__15319778[chckIndx(i_15319779, 0, (colontmp__15319778 != null ? colontmp__15319778.length : 0)+0-1)-0];
              F.line = 907;
              submatch_14711044.update(converted_val_14710515, accessor_14710540.set, sub_list_14710513);
              F.line = 188;
              i_15319779 = addInt(i_15319779, 1);
              if (!(((colontmp__15319778 != null ? colontmp__15319778.length : 0) == l_15319780))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_14710512) {
      F.line = 910;
      var Tmp93 = match_14662122;
      if (ConstSet522[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_14711051 = {get: accessor_14710540.get, set: accessor_14710540.set, node: node_14710514, data: converted_val_14710515, init: !(inited_14710991), before: false, skip: Tmp93.skip, m_type: NTI14615364};
      L94: do {
        F.line = 918;
        var refresh_14711058 = null;
        F.line = 184;
        var i_15319784 = 0;
        F.line = 185;
        var l_15319785 = (match_14662122.refresh != null ? match_14662122.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_15319784 < l_15319785)) break L96;
              F.line = 918;
              refresh_14711058 = match_14662122.refresh[chckIndx(i_15319784, 0, (match_14662122.refresh != null ? match_14662122.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_14711059 = refresh_14711058.after;
                if (!exec_14711059) Tmp97 = false; else {                  var Tmp98 = match_14662122;
                  if (ConstSet523[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_14711059 = is_changed_10270456(sub_list_14710513, refresh_14711058.reads);
              }
              
              if (exec_14711059) {
              F.line = 923;
              e_14711051.data = converted_val_14710515;
              F.line = 924;
              refresh_14711058.refresh(e_14711051);
              var Tmp99 = match_14662122;
              if (ConstSet524[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_14711051.skip;
              }
              
              F.line = 188;
              i_15319784 = addInt(i_15319784, 1);
              if (!(((match_14662122.refresh != null ? match_14662122.refresh.length : 0) == l_15319785))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_14661787(match_14661792, init_val_14661793, set_val_14661795, refresh_list_14661796) {
    init_val_14661793 = nimCopy(null, init_val_14661793, NTI14451019);
    function HEX3Aanonymous_14661797() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_14662117(match_14661792, init_val_14661793, set_val_14661795, refresh_list_14661796);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_14711240 = HEX3Aanonymous_14661797;
    if (!((match_14661792.runner == null))) {
    F.line = 706;
    add_last_13906260(match_14661792.runner.fifo, run_14711240);
    }
    else {
      F.line = 708;
      match_14661792.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_14661792.runner.fifo, run_14711240);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_14661792.runner.fifo))) break L3;
            F.line = 712;
            var run_item_14715054 = pop_first_13950047(match_14661792.runner.fifo);
            F.line = 713;
            run_item_14715054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_14661792.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_14661524(match_14661529) {
    function HEX3Aanonymous_14661536(data_14661538, set_14661543, refresh_list_14661544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_14661787(match_14661529, data_14661538, set_14661543, refresh_list_14661544);
      framePtr = F.prev;

      
    }

  var result_14661531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_14661531 = {update: HEX3Aanonymous_14661536};
  framePtr = F.prev;

  return result_14661531;

}
function as_interface_14627456(config_14627461) {
    function HEX3Aanonymous_14627468(node_14627470) {
      var result_14627476 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_14627476 = nimCopy(null, [], NTI14627491);
        L1: do {
          F.line = 997;
          var comp_match_14660214 = null;
          F.line = 182;
          var colontmp__15319724 = null;
          F.line = 997;
          colontmp__15319724 = compile_14628360(config_14627461, node_14627470);
          F.line = 184;
          var i_15319726 = 0;
          F.line = 185;
          var l_15319727 = (colontmp__15319724 != null ? colontmp__15319724.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319726 < l_15319727)) break L3;
                F.line = 997;
                comp_match_14660214 = colontmp__15319724[chckIndx(i_15319726, 0, (colontmp__15319724 != null ? colontmp__15319724.length : 0)+0-1)-0];
                F.line = 998;
                if (result_14627476 != null) { result_14627476.push(as_interface_14661524(comp_match_14660214)); } else { result_14627476 = [as_interface_14661524(comp_match_14660214)]; };
                F.line = 188;
                i_15319726 = addInt(i_15319726, 1);
                if (!(((colontmp__15319724 != null ? colontmp__15319724.length : 0) == l_15319727))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_14627476;

    }

  var result_14627463 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_14627463 = {compile: HEX3Aanonymous_14627468};
  framePtr = F.prev;

  return result_14627463;

}
function iter_14626093(c_14626099, selector_14626100, iter_14626102, actions_14626108) {
  var result_14626110 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 593;
    result_14626110 = {selector: nimCopy(null, selector_14626100, NTI112), refresh: [], mount: null, iter: true, iterate: nimCopy(null, iter_14626102, NTI14615501), cmatches: [], m_type: NTI14615351, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null})};
    F.line = 600;
    if (c_14626099.cmatches != null) { c_14626099.cmatches.push(as_interface_14627456(result_14626110)); } else { c_14626099.cmatches = [as_interface_14627456(result_14626110)]; };
    if (!((actions_14626108 == null))) {
    F.line = 602;
    actions_14626108(result_14626110);
    }
    
  framePtr = F.prev;

  return result_14626110;

}
function iter_14625232(c_14625238, selector_14625239, it_14625241, actions_14625247) {
  var result_14625249 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 608;
    result_14625249 = iter_14626093(c_14625238, selector_14625239, {kind: 0, simple: it_14625241, serial: null, selector: null}, actions_14625247);
  framePtr = F.prev;

  return result_14625249;

}
function seq_iterator_14611225(arr_14611229) {
    arr_14611229 = nimCopy(null, arr_14611229, NTI14611228);
    function next_14611243() {
      var result_14611248 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_14611229 != null ? arr_14611229.length : 0) <= it_14611241)) {
        F.line = 278;
        var colontmp__15319799 = false;
        F.line = 278;
        var colontmp__15319800 = empty_14611242;
        F.line = 278;
        nimCopy(result_14611248, {Field0: colontmp__15319799, Field1: colontmp__15319800}, NTI14611245);
        break BeforeRet;
        }
        
        F.line = 279;
        var colontmp__15319801 = true;
        F.line = 279;
        var colontmp__15319802 = arr_14611229[chckIndx(it_14611241, 0, (arr_14611229 != null ? arr_14611229.length : 0)+0-1)-0];
        F.line = 279;
        nimCopy(result_14611248, {Field0: colontmp__15319801, Field1: colontmp__15319802}, NTI14611245);
        F.line = 280;
        it_14611241 = addInt(it_14611241, 1);
      } while (false);
      framePtr = F.prev;

      return result_14611248;

    }

  var result_14611239 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 271;
    var it_14611241 = 0;
    F.line = 272;
    var empty_14611242 = null;
    F.line = 282;
    result_14611239 = next_14611243;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14611239;

}
function mount_14617803(c_14617808, comp_14617810) {
  var F={procname:"mount.mount",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((comp_14617810 == null)))) {
    F.line = 575;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(575, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 576;
    c_14617808.mount = comp_14617810;
  framePtr = F.prev;

  
}
function sub_15310394(ts_15310399, val_15310401, val_15310401_Idx, set_val_15310403, update_15310404) {
    function HEX3Aanonymous_15310417(new_value_15310419, changed_path_15310421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_15310399.set(val_15310401, val_15310401_Idx, new_value_15310419);
        F.line = 360;
        var new_paths_15310423 = null;
        L1: do {
          F.line = 361;
          var p_15310430 = null;
          F.line = 184;
          var i_15319850 = 0;
          F.line = 185;
          var l_15319851 = (changed_path_15310421 != null ? changed_path_15310421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319850 < l_15319851)) break L3;
                F.line = 361;
                p_15310430 = changed_path_15310421[chckIndx(i_15319850, 0, (changed_path_15310421 != null ? changed_path_15310421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_15310423 != null) { new_paths_15310423.push(HEX26_13760256(ts_15310399.id, p_15310430)); } else { new_paths_15310423 = [HEX26_13760256(ts_15310399.id, p_15310430)]; };
                F.line = 188;
                i_15319850 = addInt(i_15319850, 1);
                if (!(((changed_path_15310421 != null ? changed_path_15310421.length : 0) == l_15319851))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_15310403 == null))) {
        F.line = 364;
        set_val_15310403(val_15310401[val_15310401_Idx], new_paths_15310423);
        }
        else {
        if (!((update_15310404 == null))) {
        F.line = 367;
        update_15310404({paths: nimCopy(null, new_paths_15310423, NTI15310422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_15310406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_15310403 == null) && (update_15310404 == null))) {
    F.line = 357;
    result_15310406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_15310406 = HEX3Aanonymous_15310417;
  } while (false);
  framePtr = F.prev;

  return result_15310406;

}
function create_iter_item_15310505(match_15310510, parent_node_15310511) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_15310513 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_15310518 = null;
    F.line = 683;
    var node_15310519 = null;
      var Tmp1 = match_15310510;
      if (ConstSet538[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_15310510;
    if (ConstSet539[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_15310518 = Tmp2.mount_template.clone();
    F.line = 686;
    node_15310519 = comp_15310518.node();
    }
    else {
      F.line = 688;
      node_15310519 = match_15310510.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_15310510;
    if (ConstSet540[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_15310513 = {serial: 0, mount: comp_15310518, node: node_15310519, matches: compile_14690586(Tmp3.match_templates, node_15310519), skip: false};
    F.line = 694;
    var Tmp4 = match_15310510;
    if (ConstSet541[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_15310511.insertBefore(node_15310519, Tmp4.anchor);
  framePtr = F.prev;

  return result_15310513;

}
function update_do_15281216(match_15281221, init_val_15281222, set_val_15281224, refresh_list_15281225) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_15290261() {
            var result_15290263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_15290263 = item_15290252;
            framePtr = F.prev;

            return result_15290263;

          }
          var Tmp16;
            function HEX3Aanonymous_15290281(new_value_15290283, path_15290300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_15290301 = mnewString(0);
                F.line = 747;
                if (fmt_res_15290301 != null) { fmt_res_15290301 = (fmt_res_15290301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_15290301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_15290301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15300017(new_value_15300019, path_15300036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_15300037 = mnewString(0);
                F.line = 754;
                if (fmt_res_15300037 != null) { fmt_res_15300037 = (fmt_res_15300037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_15300037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_15300037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15310050(refresh_list_15310052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_15280886(match_15281221, val_15290201[0], set_val_15281224, refresh_list_15310052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_15310765() {
        var result_15310767 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_15310767 = converted_val_15310756;
        framePtr = F.prev;

        return result_15310767;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_15310847(refresh_list_15310849) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_15280886(match_15281221, val_15290201[0], set_val_15281224, refresh_list_15310849);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_15281224 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_15290201 = [init_val_15281222];
    if (match_15281221.iter) {
    F.line = 720;
    var i_15290203 = 0;
    F.line = 721;
    var Tmp1 = match_15281221;
    if (ConstSet525[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_15290206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_15290207 = null;
    F.line = 723;
    var it_simple_15290212 = null;
    F.line = 724;
    var it_serial_15290217 = null;
    F.line = 725;
    var it_select_15290225 = null;
    F.line = 726;
    var Tmp2 = match_15281221;
    if (ConstSet526[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_15281221;
      if (ConstSet528[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet527[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_15290212 = Tmp4.simple(val_15290201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_15281221;
      if (ConstSet530[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet529[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_15290217 = Tmp6.serial(val_15290201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_15281221;
      if (ConstSet532[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet531[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_15290225 = Tmp8.selector(val_15290201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_15281221;
            if (ConstSet533[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15290203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_15281221;
          if (ConstSet534[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_15290203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_15290250 = [Tmp11];
          F.line = 736;
          var changed_15290251 = is_changed_10240207(refresh_list_15281225);
          F.line = 737;
          var item_15290252 = null;
          F.line = 738;
          var accessor_15290277 = {get: HEX3Aanonymous_15290261, set: null, m_type: NTI14615368};
          F.line = 741;
          var Tmp16 = match_15281221;
          if (ConstSet535[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_15290280 = it_simple_15290212();
            if ((it_15290280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_15290252 = it_15290280["Field1"];
            F.line = 746;
            accessor_15290277.set = HEX3Aanonymous_15290281;
            break;
          case 1:
            F.line = 750;
            var it_15300016 = it_serial_15290217(serial_15290250, 0);
            if ((it_15300016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_15290252 = it_15300016["Field1"];
            F.line = 753;
            accessor_15290277.set = HEX3Aanonymous_15300017;
            break;
          case 2:
            F.line = 757;
            var it_15310015 = it_select_15290225();
            if ((it_15310015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_15290252 = it_15310015.get(val_15290201[0]);
            F.line = 760;
            accessor_15290277.set = sub_15310394(it_15310015, val_15290201, 0, set_val_15281224, HEX3Aanonymous_15310050);
            F.line = 762;
            sub_list_15290207 = walk_10245019(refresh_list_15281225, it_15310015.id);
            F.line = 763;
            changed_15290251 = is_changed_10240207(sub_list_15290207);
            break;
          }
          F.line = 766;
          var iter_item_15310488 = null;
          F.line = 767;
          var inited_15310489 = false;
            var Tmp17 = match_15281221;
            if (ConstSet536[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15290203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_15281221;
          if (ConstSet537[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_15310488 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_15290203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_15310489 = true;
          F.line = 773;
          changed_15290251 = true;
          }
          else {
            F.line = 775;
            iter_item_15310488 = create_iter_item_15310505(match_15281221, parent_node_15290206);
            F.line = 776;
            var Tmp21 = match_15281221;
            if (ConstSet542[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_15310488); } else { Tmp22 = [iter_item_15310488]; };
            F.line = 777;
            inited_15310489 = false;
            if (!((serial_15290250[0] == iter_item_15310488.serial))) {
            F.line = 779;
            changed_15290251 = true;
            }
            
          }
          
          F.line = 782;
          var e_15310610 = {get: accessor_15290277.get, set: accessor_15290277.set, node: iter_item_15310488.node, data: item_15290252, init: !(inited_15310489), before: true, skip: iter_item_15310488.skip, m_type: NTI14615364};
          L23: do {
            F.line = 790;
            var refresh_15310617 = null;
            F.line = 184;
            var i_15319818 = 0;
            F.line = 185;
            var l_15319819 = (match_15281221.refresh != null ? match_15281221.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_15319818 < l_15319819)) break L25;
                  F.line = 790;
                  refresh_15310617 = match_15281221.refresh[chckIndx(i_15319818, 0, (match_15281221.refresh != null ? match_15281221.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_15310618 = refresh_15310617.before;
                    if (!exec_15310618) Tmp26 = false; else {                      var Tmp27 = match_15281221;
                      if (ConstSet543[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_15310618 = is_changed_10270456(sub_list_15290207, refresh_15310617.reads);
                  }
                  
                    if (exec_15310618) Tmp28 = true; else {                      if (!!(inited_15310489)) Tmp29 = false; else {                        Tmp29 = refresh_15310617.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_15310610.data = item_15290252;
                  F.line = 796;
                  refresh_15310617.refresh(e_15310610);
                  F.line = 797;
                  iter_item_15310488.skip = e_15310610.skip;
                  }
                  
                  F.line = 188;
                  i_15319818 = addInt(i_15319818, 1);
                  if (!(((match_15281221.refresh != null ? match_15281221.refresh.length : 0) == l_15319819))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_15310488.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_15310488.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_15310488.mount.update(item_15290252, accessor_15290277.set, sub_list_15290207);
          }
          
          if (!(iter_item_15310488.skip)) {
          L31: do {
            F.line = 805;
            var submatch_15310640 = null;
            F.line = 184;
            var i_15319822 = 0;
            F.line = 185;
            var l_15319823 = (iter_item_15310488.matches != null ? iter_item_15310488.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_15319822 < l_15319823)) break L33;
                  F.line = 805;
                  submatch_15310640 = iter_item_15310488.matches[chckIndx(i_15319822, 0, (iter_item_15310488.matches != null ? iter_item_15310488.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_15310640.update(item_15290252, accessor_15290277.set, sub_list_15290207);
                  F.line = 188;
                  i_15319822 = addInt(i_15319822, 1);
                  if (!(((iter_item_15310488.matches != null ? iter_item_15310488.matches.length : 0) == l_15319823))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_15310610 = {get: accessor_15290277.get, set: accessor_15290277.set, node: iter_item_15310488.node, data: item_15290252, init: !(inited_15310489), before: false, skip: iter_item_15310488.skip, m_type: NTI14615364};
          L34: do {
            F.line = 817;
            var refresh_15310651 = null;
            F.line = 184;
            var i_15319827 = 0;
            F.line = 185;
            var l_15319828 = (match_15281221.refresh != null ? match_15281221.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_15319827 < l_15319828)) break L36;
                  F.line = 817;
                  refresh_15310651 = match_15281221.refresh[chckIndx(i_15319827, 0, (match_15281221.refresh != null ? match_15281221.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_15310652 = refresh_15310651.after;
                    if (!exec_15310652) Tmp37 = false; else {                      var Tmp38 = match_15281221;
                      if (ConstSet544[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_15310652 = is_changed_10270456(sub_list_15290207, refresh_15310651.reads);
                  }
                  
                  if (exec_15310652) {
                  F.line = 822;
                  e_15310610.data = item_15290252;
                  F.line = 823;
                  refresh_15310651.refresh(e_15310610);
                  F.line = 824;
                  iter_item_15310488.skip = e_15310610.skip;
                  }
                  
                  F.line = 188;
                  i_15319827 = addInt(i_15319827, 1);
                  if (!(((match_15281221.refresh != null ? match_15281221.refresh.length : 0) == l_15319828))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_15290203 = addInt(i_15290203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_15281221;
          if (ConstSet545[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_15290203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_15281221;
          if (ConstSet546[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_14710493(pop_14710243(Tmp43, "items"), parent_node_15290206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_15310753 = is_changed_10240207(refresh_list_15281225);
      F.line = 833;
      var sub_list_15310754 = null;
      F.line = 834;
      var node_15310755 = match_15281221.node;
      F.line = 835;
      var converted_val_15310756 = null;
      F.line = 836;
      var accessor_15310781 = {get: HEX3Aanonymous_15310765, set: null, m_type: NTI14615368};
      F.line = 840;
      var Tmp44 = match_15281221;
      if (ConstSet547[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_15281221;
        if (ConstSet549[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet548[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_15310756 = Tmp46.simple(val_15290201[0]);
        F.line = 843;
        changed_15310753 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_15281221;
        if (ConstSet550[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_15310789 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_15281221;
        if (ConstSet552[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet551[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_15310756 = Tmp49.serial(val_15290201[0], serial_15310789, 0);
          var Tmp50 = match_15281221;
          if (ConstSet553[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_15310789[0] == Tmp50.serial))) {
        F.line = 849;
        changed_15310753 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_15281221;
        if (ConstSet555[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet554[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_15281221;
        if (ConstSet556[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_15310801 = Tmp52.compare(val_15290201[0], Tmp53.value);
        F.line = 853;
        converted_val_15310756 = res_15310801.Field0;
        var Tmp54 = match_15281221;
        if (ConstSet557[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = res_15310801.Field0;
        if (res_15310801.Field1) {
        F.line = 856;
        changed_15310753 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_15281221;
        if (ConstSet559[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet558[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_15310807 = Tmp56.obj;
        F.line = 860;
        converted_val_15310756 = obj_15310807.get(val_15290201[0]);
        F.line = 861;
        sub_list_15310754 = walk_10245019(refresh_list_15281225, obj_15310807.id);
        F.line = 862;
        changed_15310753 = is_changed_10240207(sub_list_15310754);
          if (!changed_15310753) Tmp57 = false; else {            var Tmp58 = match_15281221;
            if (ConstSet561[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet560[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_15281221;
        if (ConstSet563[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet562[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_15281221;
        if (ConstSet564[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_15310753 = !(Tmp61.eql(converted_val_15310756, Tmp62.value));
        }
        
        F.line = 865;
        accessor_15310781.set = sub_15310394(obj_15310807, val_15290201, 0, set_val_15281224, HEX3Aanonymous_15310847);
        break;
      }
        var Tmp64 = match_15281221;
        if (ConstSet565[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_15281221;
          if (ConstSet566[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_15281221;
      if (ConstSet567[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_15281221;
      if (ConstSet568[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_15281221;
      if (ConstSet569[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_15310755.parentNode.replaceChild(Tmp68.mount.node(), node_15310755);
      }
      
      F.line = 875;
      var Tmp69 = match_15281221;
      if (ConstSet570[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_15311232 = Tmp69.inited;
      if (!(inited_15311232)) {
      F.line = 876;
      changed_15310753 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_15281221;
      if (ConstSet571[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_15311239 = {get: accessor_15310781.get, set: accessor_15310781.set, node: node_15310755, data: converted_val_15310756, init: !(inited_15311232), before: changed_15310753, skip: Tmp70.skip, m_type: NTI14615364};
      L71: do {
        F.line = 885;
        var refresh_15311246 = null;
        F.line = 184;
        var i_15319834 = 0;
        F.line = 185;
        var l_15319835 = (match_15281221.refresh != null ? match_15281221.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_15319834 < l_15319835)) break L73;
              F.line = 885;
              refresh_15311246 = match_15281221.refresh[chckIndx(i_15319834, 0, (match_15281221.refresh != null ? match_15281221.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_15311247 = changed_15310753;
                if (!exec_15311247) Tmp74 = false; else {                  var Tmp75 = match_15281221;
                  if (ConstSet572[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_15311247 = is_changed_10270456(sub_list_15310754, refresh_15311246.reads);
              }
              
              F.line = 891;
              if (!refresh_15311246.before) Tmp77 = false; else {                Tmp77 = (exec_15311247 || !(inited_15311232));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_15311246.init) Tmp78 = false; else {                  Tmp78 = !(inited_15311232);                }                Tmp76 = Tmp78;              }              exec_15311247 = Tmp76;
              if (exec_15311247) {
              F.line = 893;
              e_15311239.data = converted_val_15310756;
              F.line = 894;
              refresh_15311246.refresh(e_15311239);
              var Tmp79 = match_15281221;
              if (ConstSet573[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_15311239.skip;
              }
              
              F.line = 188;
              i_15319834 = addInt(i_15319834, 1);
              if (!(((match_15281221.refresh != null ? match_15281221.refresh.length : 0) == l_15319835))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_15311232)) {
      var Tmp80 = match_15281221;
      if (ConstSet574[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_15310753) Tmp82 = false; else {          var Tmp83 = match_15281221;
          if (ConstSet575[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_15281221;
          if (ConstSet576[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_15281221;
      if (ConstSet577[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_15310755 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_15281221;
      if (ConstSet578[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_15310756, accessor_15310781.set, sub_list_15310754);
      }
      
        if (!changed_15310753) Tmp87 = false; else {          var Tmp88 = match_15281221;
          if (ConstSet579[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_15311285 = null;
        F.line = 182;
        var colontmp__15319838 = null;
        F.line = 906;
        var Tmp90 = match_15281221;
        if (ConstSet580[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__15319838 = Tmp90.matches;
        F.line = 184;
        var i_15319839 = 0;
        F.line = 185;
        var l_15319840 = (colontmp__15319838 != null ? colontmp__15319838.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_15319839 < l_15319840)) break L92;
              F.line = 906;
              submatch_15311285 = colontmp__15319838[chckIndx(i_15319839, 0, (colontmp__15319838 != null ? colontmp__15319838.length : 0)+0-1)-0];
              F.line = 907;
              submatch_15311285.update(converted_val_15310756, accessor_15310781.set, sub_list_15310754);
              F.line = 188;
              i_15319839 = addInt(i_15319839, 1);
              if (!(((colontmp__15319838 != null ? colontmp__15319838.length : 0) == l_15319840))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_15310753) {
      F.line = 910;
      var Tmp93 = match_15281221;
      if (ConstSet581[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_15311292 = {get: accessor_15310781.get, set: accessor_15310781.set, node: node_15310755, data: converted_val_15310756, init: !(inited_15311232), before: false, skip: Tmp93.skip, m_type: NTI14615364};
      L94: do {
        F.line = 918;
        var refresh_15311299 = null;
        F.line = 184;
        var i_15319844 = 0;
        F.line = 185;
        var l_15319845 = (match_15281221.refresh != null ? match_15281221.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_15319844 < l_15319845)) break L96;
              F.line = 918;
              refresh_15311299 = match_15281221.refresh[chckIndx(i_15319844, 0, (match_15281221.refresh != null ? match_15281221.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_15311300 = refresh_15311299.after;
                if (!exec_15311300) Tmp97 = false; else {                  var Tmp98 = match_15281221;
                  if (ConstSet582[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_15311300 = is_changed_10270456(sub_list_15310754, refresh_15311299.reads);
              }
              
              if (exec_15311300) {
              F.line = 923;
              e_15311292.data = converted_val_15310756;
              F.line = 924;
              refresh_15311299.refresh(e_15311292);
              var Tmp99 = match_15281221;
              if (ConstSet583[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_15311292.skip;
              }
              
              F.line = 188;
              i_15319844 = addInt(i_15319844, 1);
              if (!(((match_15281221.refresh != null ? match_15281221.refresh.length : 0) == l_15319845))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_15280886(match_15280891, init_val_15280892, set_val_15280894, refresh_list_15280895) {
    function HEX3Aanonymous_15280896() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_15281216(match_15280891, init_val_15280892, set_val_15280894, refresh_list_15280895);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_15311361 = HEX3Aanonymous_15280896;
    if (!((match_15280891.runner == null))) {
    F.line = 706;
    add_last_13906260(match_15280891.runner.fifo, run_15311361);
    }
    else {
      F.line = 708;
      match_15280891.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_15280891.runner.fifo, run_15311361);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_15280891.runner.fifo))) break L3;
            F.line = 712;
            var run_item_15315054 = pop_first_13950047(match_15280891.runner.fifo);
            F.line = 713;
            run_item_15315054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_15280891.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function update_15270720(t_15270724, init_val_15270725, set_val_15270727, refresh_list_15270728) {
function set_15270732(new_val_15270734, changed_path_15270736) {
  var F={procname:"update.set",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 958;
    t_15270724.data = new_val_15270734;
    if (!((set_val_15270727 == null))) {
    F.line = 960;
    set_val_15270727(new_val_15270734, changed_path_15270736);
    }
    else {
      F.line = 962;
    upd_15270729({paths: nimCopy(null, changed_path_15270736, NTI15270735)});
    }
    
  framePtr = F.prev;

  
}
    function upd_15270729(refresh_list_15270731) {
      var F={procname:"update.upd",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        L1: do {
          F.line = 965;
          var match_15280214 = null;
          F.line = 184;
          var i_15319809 = 0;
          F.line = 185;
          var l_15319810 = (t_15270724.cmatches != null ? t_15270724.cmatches.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319809 < l_15319810)) break L3;
                F.line = 965;
                match_15280214 = t_15270724.cmatches[chckIndx(i_15319809, 0, (t_15270724.cmatches != null ? t_15270724.cmatches.length : 0)+0-1)-0];
                F.line = 966;
                update_15280886(match_15280214, t_15270724.data, set_15270732, refresh_list_15270731);
                F.line = 188;
                i_15319809 = addInt(i_15319809, 1);
                if (!(((t_15270724.cmatches != null ? t_15270724.cmatches.length : 0) == l_15319810))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 954;
    t_15270724.data = init_val_15270725;
    F.line = 968;
    upd_15270729(refresh_list_15270728);
  framePtr = F.prev;

  
}
function id_type_selector_15245245() {
    function HEX3Aanonymous_15245257(data_15245259) {
      var result_15245260 = null;

      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 303;
        result_15245260 = data_15245259;
      framePtr = F.prev;

      return result_15245260;

    }
    function HEX3Aanonymous_15245274(data_15245277, data_15245277_Idx, value_15245278) {
      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 304;
        data_15245277[data_15245277_Idx] = value_15245278;
      framePtr = F.prev;

      
    }

  var result_15245249 = null;

  var F={procname:"idTypeSelector.idTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 302;
    result_15245249 = {get: HEX3Aanonymous_15245257, set: HEX3Aanonymous_15245274, id: []};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15245249;

}
function id_multi_type_selector_15245228(equal_15245234) {
  var result_15245236 = ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null});

  var F={procname:"idMultiTypeSelector.idMultiTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 308;
    nimCopy(result_15245236, {kind: 3, eql: equal_15245234, obj: id_type_selector_15245245(), simple: null, serial: null, compare: null}, NTI14924525);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15245236;

}
function create_15245203(config_15245209, equal_15245213) {
  var result_15245222 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 398;
    result_15245222 = {iter: false, convert: id_multi_type_selector_15245228(equal_15245213), config: config_15245209, m_type: NTI15245217, selector: null, refresh: null, cmatches: null, mount: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15245222;

}
function new_15245415() {
  var result_15245419 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_15245601 = null;
    F.line = 851;
    r_15245601 = ({cmatches: null, config: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), original_node: null, node: null, data: null});
    F.line = 852;
    result_15245419 = r_15245601;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15245419;

}
function compile_15246163(cfg_15246168, node_15246169) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_15246172 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_15246172 = nimCopy(null, [], NTI15246187);
    F.line = 620;
    if (eqStrings(cfg_15246168.selector, [])) {
    Tmp1 = [node_15246169];
    }
    else {
    Tmp1 = node_15246169.querySelectorAll(toJSStr(cfg_15246168.selector));
    }
    
    var matched_nodes_15246201 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_15246201 != null ? matched_nodes_15246201.length : 0) == 0)) {
    F.line = 622;
    var selector_15246207 = nimCopy(null, cfg_15246168.selector, NTI112);
    F.line = 623;
    var fmt_res_15246208 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_15246208[0] != null) { fmt_res_15246208[0] = (fmt_res_15246208[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_15246208[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_15246208, 0, selector_15246207, []);
    F.line = 623;
    if (fmt_res_15246208[0] != null) { fmt_res_15246208[0] = (fmt_res_15246208[0]).concat(makeNimstrLit("\'")); } else { fmt_res_15246208[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_15246208[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_15255008 = null;
      F.line = 184;
      var i_15319871 = 0;
      F.line = 185;
      var l_15319872 = (matched_nodes_15246201 != null ? matched_nodes_15246201.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_15319871 < l_15319872)) break L4;
            F.line = 625;
            matched_node_15255008 = matched_nodes_15246201[chckIndx(i_15319871, 0, (matched_nodes_15246201 != null ? matched_nodes_15246201.length : 0)+0-1)-0];
            F.line = 626;
            var match_15255016 = {refresh: nimCopy(null, cfg_15246168.refresh, NTI14924512), iter: cfg_15246168.iter, node: matched_node_15255008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_15255016.node = matched_node_15255008;
            if (match_15255016.iter) {
            var Tmp5 = match_15255016;
            if (ConstSet584[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_15246168;
            if (ConstSet585[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI14924589);
            var Tmp7 = match_15255016;
            if (ConstSet586[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_15255008).createComment(toJSStr(cstrToNimstr(((matched_node_15255008).outerHTML))));
            var Tmp8 = match_15255016;
            if (ConstSet587[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_15246168.mount;
            var Tmp9 = match_15255016;
            if (ConstSet588[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_15246168.cmatches, NTI14924517);
            var Tmp10 = match_15255016;
            if (ConstSet589[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI15260029);
            F.line = 637;
            var Tmp11 = match_15255016;
            if (ConstSet590[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_15255008.parentNode.replaceChild(Tmp11.anchor, matched_node_15255008);
            }
            else {
              var Tmp12 = match_15255016;
              if (ConstSet591[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_15246168;
              if (ConstSet592[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_15255016;
              if (ConstSet593[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_15255016;
                if (ConstSet594[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_15255016;
              if (ConstSet595[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_15246168;
              if (ConstSet596[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI14924525);
              var Tmp18 = match_15255016;
              if (ConstSet597[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI15260056);
              var Tmp19 = match_15255016;
              if (ConstSet598[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_15255016;
              if (ConstSet599[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_15246168.mount == null))) {
              var Tmp21 = match_15255016;
              if (ConstSet600[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_15246168.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_15260077 = null;
                  F.line = 184;
                  var i_15319868 = 0;
                  F.line = 185;
                  var l_15319869 = (cfg_15246168.cmatches != null ? cfg_15246168.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_15319868 < l_15319869)) break L24;
                        F.line = 652;
                        submatch_15260077 = cfg_15246168.cmatches[chckIndx(i_15319868, 0, (cfg_15246168.cmatches != null ? cfg_15246168.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_15255016;
                        if (ConstSet601[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_14650218(Tmp25, "matches", submatch_15260077.compile(matched_node_15255008));
                        F.line = 188;
                        i_15319868 = addInt(i_15319868, 1);
                        if (!(((cfg_15246168.cmatches != null ? cfg_15246168.cmatches.length : 0) == l_15319869))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_15246172 != null) { result_15246172.push(match_15255016); } else { result_15246172 = [match_15255016]; };
            F.line = 188;
            i_15319871 = addInt(i_15319871, 1);
            if (!(((matched_nodes_15246201 != null ? matched_nodes_15246201.length : 0) == l_15319872))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_15246172;

}
function compile_15235658(node_15235663, configurator_15235665, equal_15235669) {
  var result_15235671 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_15235663 == null)))) {
    F.line = 664;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(664, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 665;
    var cfg_15245408 = create_15245203(configurator_15235665, equal_15235669);
    F.line = 666;
    cfg_15245408.config(cfg_15245408);
    F.line = 668;
    result_15235671 = new_15245415();
    F.line = 669;
    result_15235671.config = configurator_15235665;
    F.line = 670;
    nimCopy(result_15235671.convert, id_multi_type_selector_15245228(equal_15235669), NTI14924525);
    F.line = 671;
    result_15235671.original_node = node_15235663;
    F.line = 672;
    result_15235671.node = node_15235663.cloneNode(true);
    F.line = 673;
    result_15235671.cmatches = nimCopy(null, compile_15246163(cfg_15245408, result_15235671.node), NTI15246170);
  framePtr = F.prev;

  return result_15235671;

}
function clone_15315465(comp_15315469) {
    var Tmp1;

  var result_15315471 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 949;
    var Tmp1 = comp_15315469.convert;
    if (ConstSet602[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
    result_15315471 = compile_15235658(comp_15315469.original_node, comp_15315469.config, Tmp1.eql);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15315471;

}
function as_interface_15316809(comp_15316813) {
    function HEX3Aanonymous_15316820() {
      var result_15316822 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1005;
        result_15316822 = comp_15316813.node;
      framePtr = F.prev;

      return result_15316822;

    }
    function HEX3Aanonymous_15316836(data_15316838, set_15316843, refresh_list_15316844) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1007;
        update_15270720(comp_15316813, data_15316838, set_15316843, refresh_list_15316844);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15317536() {
      var result_15317542 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1009;
        result_15317542 = as_interface_15316809(clone_15315465(comp_15316813));
      framePtr = F.prev;

      return result_15317542;

    }

  var result_15316815 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1003;
    result_15316815 = {node: HEX3Aanonymous_15316820, update: HEX3Aanonymous_15316836, clone: HEX3Aanonymous_15317536};
  framePtr = F.prev;

  return result_15316815;

}
function late_15260963(late_comp_15260969) {
function resolve_comp_15260977() {
  var result_15260983 = null;

  var F={procname:"late.resolveComp",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((comp_15260976 == null)) {
    F.line = 1045;
    var late_15260992 = late_comp_15260969();
    if ((late_15260992 == null)) {
    F.line = 1047;
    var fmt_res_15261001 = mnewString(0);
    F.line = 1047;
    if (fmt_res_15261001 != null) { fmt_res_15261001 = (fmt_res_15261001).concat(makeNimstrLit("Late component not resolved in time")); } else { fmt_res_15261001 = makeNimstrLit("Late component not resolved in time"); };
    F.line = 1047;
    raiseException({message: nimCopy(null, fmt_res_15261001, NTI112), parent: null, m_type: NTI10206021, name: null, trace: null, up: null}, "CompileLateError");
    }
    
    F.line = 1048;
    comp_15260976 = late_15260992;
    }
    
    F.line = 1049;
    result_15260983 = comp_15260976;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15260983;

}
    function create_15270015() {
        function HEX3Aanonymous_15270026() {
          var result_15270028 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1054;
            result_15270028 = resolve_comp_15260977().node;
          framePtr = F.prev;

          return result_15270028;

        }
        function HEX3Aanonymous_15270042(data_15270044, set_15270049, refresh_list_15270050) {
          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1056;
            update_15270720(resolve_comp_15260977(), data_15270044, set_15270049, refresh_list_15270050);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_15315107() {
          var result_15315113 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 1058;
            result_15315113 = as_interface_15316809(clone_15315465(resolve_comp_15260977()));
          framePtr = F.prev;

          return result_15315113;

        }

      var result_15270021 = null;

      var F={procname:"late.create",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1052;
        result_15270021 = {node: HEX3Aanonymous_15270026, update: HEX3Aanonymous_15270042, clone: HEX3Aanonymous_15315107};
      framePtr = F.prev;

      return result_15270021;

    }

  var result_15260971 = null;

  var F={procname:"late.late",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1041;
    var comp_15260976 = null;
    F.line = 1061;
    result_15260971 = create_15270015();
  framePtr = F.prev;

  return result_15260971;

}
async function init_comp_15319339(set_component_15319347, node_15319349, creator_15319351) {
  var result_15319353 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var n_15319375 = (await node_15319349);
    F.line = 22;
    set_component_15319347(creator_15319351(n_15319375));
    F.line = 131;
    result_15319353 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15319353;

}
function declare_15260550(registry_15260553, component_15260556, component_15260556_Idx, node_15260558, creator_15260565) {
    function HEX3Aanonymous_15260571(c_15260577) {
      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 30;
        comp_15260570 = c_15260577;
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15260592() {
      var result_15260598 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 31;
        result_15260598 = comp_15260570;
      framePtr = F.prev;

      return result_15260598;

    }
    function HEX3Aanonymous_15319332() {
      var result_15319337 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 32;
        result_15319337 = init_comp_15319339(set_component_15260591, node_15260558, creator_15260565);
      framePtr = F.prev;

      return result_15319337;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 29;
    var comp_15260570 = null;
    F.line = 30;
    var set_component_15260591 = HEX3Aanonymous_15260571;
    F.line = 31;
    component_15260556[component_15260556_Idx] = late_15260963(HEX3Aanonymous_15260592);
    F.line = 32;
    if (registry_15260553.Field0 != null) { registry_15260553.Field0.push(HEX3Aanonymous_15319332); } else { registry_15260553.Field0 = [HEX3Aanonymous_15319332]; };
  framePtr = F.prev;

  
}
function compile_15235176(registry_15235179, component_15235182, component_15235182_Idx, node_15235184, configurator_15235186, equal_15235190) {
    function HEX3Aanonymous_15235583(node_15235585) {
      var result_15235655 = null;

      var F={procname:"compile.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 36;
        result_15235655 = compile_15235658(node_15235585, configurator_15235186, equal_15235190);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_15235655;

    }

  var F={procname:"compile.compile",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 35;
    declare_15260550(registry_15235179, component_15235182, component_15235182_Idx, node_15235184, HEX3Aanonymous_15235583);
  framePtr = F.prev;

  
}
function refresh_15040960(c_15040965, refresh_15040967, before_15040968, after_15040969) {
    function HEX3Aanonymous_15040974(re_15040980) {
      var F={procname:"refresh.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 500;
        refresh_15040967(re_15040980.node, re_15040980.data);
      framePtr = F.prev;

      
    }

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 499;
    if (c_15040965.refresh != null) { c_15040965.refresh.push({refresh: HEX3Aanonymous_15040974, before: before_15040968, after: (after_15040969 || !(before_15040968)), init: false, reads: refresh_all_10270524}); } else { c_15040965.refresh = [{refresh: HEX3Aanonymous_15040974, before: before_15040968, after: (after_15040969 || !(before_15040968)), init: false, reads: refresh_all_10270524}]; };
  framePtr = F.prev;

  
}
function compile_14982365(cfg_14982370, node_14982371) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_14982421 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_14982421 = nimCopy(null, [], NTI14982436);
    F.line = 620;
    if (eqStrings(cfg_14982370.selector, [])) {
    Tmp1 = [node_14982371];
    }
    else {
    Tmp1 = node_14982371.querySelectorAll(toJSStr(cfg_14982370.selector));
    }
    
    var matched_nodes_14982450 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_14982450 != null ? matched_nodes_14982450.length : 0) == 0)) {
    F.line = 622;
    var selector_14982456 = nimCopy(null, cfg_14982370.selector, NTI112);
    F.line = 623;
    var fmt_res_14982457 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_14982457[0] != null) { fmt_res_14982457[0] = (fmt_res_14982457[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_14982457[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_14982457, 0, selector_14982456, []);
    F.line = 623;
    if (fmt_res_14982457[0] != null) { fmt_res_14982457[0] = (fmt_res_14982457[0]).concat(makeNimstrLit("\'")); } else { fmt_res_14982457[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_14982457[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_14990008 = null;
      F.line = 184;
      var i_15319926 = 0;
      F.line = 185;
      var l_15319927 = (matched_nodes_14982450 != null ? matched_nodes_14982450.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_15319926 < l_15319927)) break L4;
            F.line = 625;
            matched_node_14990008 = matched_nodes_14982450[chckIndx(i_15319926, 0, (matched_nodes_14982450 != null ? matched_nodes_14982450.length : 0)+0-1)-0];
            F.line = 626;
            var match_14990016 = {refresh: nimCopy(null, cfg_14982370.refresh, NTI14975616), iter: cfg_14982370.iter, node: matched_node_14990008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_14990016.node = matched_node_14990008;
            if (match_14990016.iter) {
            var Tmp5 = match_14990016;
            if (ConstSet603[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_14982370;
            if (ConstSet604[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI14975671);
            var Tmp7 = match_14990016;
            if (ConstSet605[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_14990008).createComment(toJSStr(cstrToNimstr(((matched_node_14990008).outerHTML))));
            var Tmp8 = match_14990016;
            if (ConstSet606[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_14982370.mount;
            var Tmp9 = match_14990016;
            if (ConstSet607[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_14982370.cmatches, NTI14975621);
            var Tmp10 = match_14990016;
            if (ConstSet608[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI14995029);
            F.line = 637;
            var Tmp11 = match_14990016;
            if (ConstSet609[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_14990008.parentNode.replaceChild(Tmp11.anchor, matched_node_14990008);
            }
            else {
              var Tmp12 = match_14990016;
              if (ConstSet610[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_14982370;
              if (ConstSet611[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_14990016;
              if (ConstSet612[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_14990016;
                if (ConstSet613[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_14990016;
              if (ConstSet614[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_14982370;
              if (ConstSet615[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI14975629);
              var Tmp18 = match_14990016;
              if (ConstSet616[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI14995056);
              var Tmp19 = match_14990016;
              if (ConstSet617[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_14990016;
              if (ConstSet618[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_14982370.mount == null))) {
              var Tmp21 = match_14990016;
              if (ConstSet619[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_14982370.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_14995077 = null;
                  F.line = 184;
                  var i_15319923 = 0;
                  F.line = 185;
                  var l_15319924 = (cfg_14982370.cmatches != null ? cfg_14982370.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_15319923 < l_15319924)) break L24;
                        F.line = 652;
                        submatch_14995077 = cfg_14982370.cmatches[chckIndx(i_15319923, 0, (cfg_14982370.cmatches != null ? cfg_14982370.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_14990016;
                        if (ConstSet620[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_13845218(Tmp25, "matches", submatch_14995077.compile(matched_node_14990008));
                        F.line = 188;
                        i_15319923 = addInt(i_15319923, 1);
                        if (!(((cfg_14982370.cmatches != null ? cfg_14982370.cmatches.length : 0) == l_15319924))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_14982421 != null) { result_14982421.push(match_14990016); } else { result_14982421 = [match_14990016]; };
            F.line = 188;
            i_15319926 = addInt(i_15319926, 1);
            if (!(((matched_nodes_14982450 != null ? matched_nodes_14982450.length : 0) == l_15319927))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_14982421;

}
function sub_15035394(ts_15035399, val_15035401, val_15035401_Idx, set_val_15035403, update_15035404) {
    function HEX3Aanonymous_15035417(new_value_15035419, changed_path_15035421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_15035399.set(val_15035401, val_15035401_Idx, new_value_15035419);
        F.line = 360;
        var new_paths_15035423 = null;
        L1: do {
          F.line = 361;
          var p_15035430 = null;
          F.line = 184;
          var i_15319968 = 0;
          F.line = 185;
          var l_15319969 = (changed_path_15035421 != null ? changed_path_15035421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319968 < l_15319969)) break L3;
                F.line = 361;
                p_15035430 = changed_path_15035421[chckIndx(i_15319968, 0, (changed_path_15035421 != null ? changed_path_15035421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_15035423 != null) { new_paths_15035423.push(HEX26_13760256(ts_15035399.id, p_15035430)); } else { new_paths_15035423 = [HEX26_13760256(ts_15035399.id, p_15035430)]; };
                F.line = 188;
                i_15319968 = addInt(i_15319968, 1);
                if (!(((changed_path_15035421 != null ? changed_path_15035421.length : 0) == l_15319969))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_15035403 == null))) {
        F.line = 364;
        set_val_15035403(val_15035401[val_15035401_Idx], new_paths_15035423);
        }
        else {
        if (!((update_15035404 == null))) {
        F.line = 367;
        update_15035404({paths: nimCopy(null, new_paths_15035423, NTI15035422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_15035406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_15035403 == null) && (update_15035404 == null))) {
    F.line = 357;
    result_15035406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_15035406 = HEX3Aanonymous_15035417;
  } while (false);
  framePtr = F.prev;

  return result_15035406;

}
function create_iter_item_15035505(match_15035510, parent_node_15035511) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_15035513 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_15035518 = null;
    F.line = 683;
    var node_15035519 = null;
      var Tmp1 = match_15035510;
      if (ConstSet634[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_15035510;
    if (ConstSet635[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_15035518 = Tmp2.mount_template.clone();
    F.line = 686;
    node_15035519 = comp_15035518.node();
    }
    else {
      F.line = 688;
      node_15035519 = match_15035510.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_15035510;
    if (ConstSet636[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_15035513 = {serial: 0, mount: comp_15035518, node: node_15035519, matches: compile_13885586(Tmp3.match_templates, node_15035519), skip: false};
    F.line = 694;
    var Tmp4 = match_15035510;
    if (ConstSet637[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_15035511.insertBefore(node_15035519, Tmp4.anchor);
  framePtr = F.prev;

  return result_15035513;

}
function update_do_15006948(match_15006953, init_val_15006954, set_val_15006956, refresh_list_15006957) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_15015261() {
            var result_15015263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_15015263 = nimCopy(null, item_15015252, NTI112);
            framePtr = F.prev;

            return result_15015263;

          }
          var Tmp16;
            function HEX3Aanonymous_15015281(new_value_15015283, path_15015300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_15015301 = mnewString(0);
                F.line = 747;
                if (fmt_res_15015301 != null) { fmt_res_15015301 = (fmt_res_15015301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_15015301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_15015301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15025017(new_value_15025019, path_15025036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_15025037 = mnewString(0);
                F.line = 754;
                if (fmt_res_15025037 != null) { fmt_res_15025037 = (fmt_res_15025037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_15025037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_15025037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15035050(refresh_list_15035052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_15006618(match_15006953, val_15015201[0], set_val_15006956, refresh_list_15035052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_15035765() {
        var result_15035767 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_15035767 = nimCopy(null, converted_val_15035756, NTI112);
        framePtr = F.prev;

        return result_15035767;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_15035847(refresh_list_15035849) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_15006618(match_15006953, val_15015201[0], set_val_15006956, refresh_list_15035849);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_15006956 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_15015201 = [init_val_15006954];
    if (match_15006953.iter) {
    F.line = 720;
    var i_15015203 = 0;
    F.line = 721;
    var Tmp1 = match_15006953;
    if (ConstSet621[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_15015206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_15015207 = null;
    F.line = 723;
    var it_simple_15015212 = null;
    F.line = 724;
    var it_serial_15015217 = null;
    F.line = 725;
    var it_select_15015225 = null;
    F.line = 726;
    var Tmp2 = match_15006953;
    if (ConstSet622[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_15006953;
      if (ConstSet624[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet623[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_15015212 = Tmp4.simple(val_15015201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_15006953;
      if (ConstSet626[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet625[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_15015217 = Tmp6.serial(val_15015201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_15006953;
      if (ConstSet628[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet627[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_15015225 = Tmp8.selector(val_15015201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_15006953;
            if (ConstSet629[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15015203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_15006953;
          if (ConstSet630[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_15015203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_15015250 = [Tmp11];
          F.line = 736;
          var changed_15015251 = is_changed_10240207(refresh_list_15006957);
          F.line = 737;
          var item_15015252 = null;
          F.line = 738;
          var accessor_15015277 = {get: HEX3Aanonymous_15015261, set: null, m_type: NTI13760634};
          F.line = 741;
          var Tmp16 = match_15006953;
          if (ConstSet631[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_15015280 = it_simple_15015212();
            if ((it_15015280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_15015252 = nimCopy(null, it_15015280["Field1"], NTI112);
            F.line = 746;
            accessor_15015277.set = HEX3Aanonymous_15015281;
            break;
          case 1:
            F.line = 750;
            var it_15025016 = it_serial_15015217(serial_15015250, 0);
            if ((it_15025016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_15015252 = nimCopy(null, it_15025016["Field1"], NTI112);
            F.line = 753;
            accessor_15015277.set = HEX3Aanonymous_15025017;
            break;
          case 2:
            F.line = 757;
            var it_15035015 = it_select_15015225();
            if ((it_15035015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_15015252 = nimCopy(null, it_15035015.get(val_15015201[0]), NTI112);
            F.line = 760;
            accessor_15015277.set = sub_15035394(it_15035015, val_15015201, 0, set_val_15006956, HEX3Aanonymous_15035050);
            F.line = 762;
            sub_list_15015207 = walk_10245019(refresh_list_15006957, it_15035015.id);
            F.line = 763;
            changed_15015251 = is_changed_10240207(sub_list_15015207);
            break;
          }
          F.line = 766;
          var iter_item_15035488 = null;
          F.line = 767;
          var inited_15035489 = false;
            var Tmp17 = match_15006953;
            if (ConstSet632[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15015203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_15006953;
          if (ConstSet633[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_15035488 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_15015203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_15035489 = true;
          F.line = 773;
          changed_15015251 = true;
          }
          else {
            F.line = 775;
            iter_item_15035488 = create_iter_item_15035505(match_15006953, parent_node_15015206);
            F.line = 776;
            var Tmp21 = match_15006953;
            if (ConstSet638[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_15035488); } else { Tmp22 = [iter_item_15035488]; };
            F.line = 777;
            inited_15035489 = false;
            if (!((serial_15015250[0] == iter_item_15035488.serial))) {
            F.line = 779;
            changed_15015251 = true;
            }
            
          }
          
          F.line = 782;
          var e_15035610 = {get: accessor_15015277.get, set: accessor_15015277.set, node: iter_item_15035488.node, data: nimCopy(null, item_15015252, NTI112), init: !(inited_15035489), before: true, skip: iter_item_15035488.skip, m_type: NTI13760630};
          L23: do {
            F.line = 790;
            var refresh_15035617 = null;
            F.line = 184;
            var i_15319936 = 0;
            F.line = 185;
            var l_15319937 = (match_15006953.refresh != null ? match_15006953.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_15319936 < l_15319937)) break L25;
                  F.line = 790;
                  refresh_15035617 = match_15006953.refresh[chckIndx(i_15319936, 0, (match_15006953.refresh != null ? match_15006953.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_15035618 = refresh_15035617.before;
                    if (!exec_15035618) Tmp26 = false; else {                      var Tmp27 = match_15006953;
                      if (ConstSet639[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_15035618 = is_changed_10270456(sub_list_15015207, refresh_15035617.reads);
                  }
                  
                    if (exec_15035618) Tmp28 = true; else {                      if (!!(inited_15035489)) Tmp29 = false; else {                        Tmp29 = refresh_15035617.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_15035610.data = nimCopy(null, item_15015252, NTI112);
                  F.line = 796;
                  refresh_15035617.refresh(e_15035610);
                  F.line = 797;
                  iter_item_15035488.skip = e_15035610.skip;
                  }
                  
                  F.line = 188;
                  i_15319936 = addInt(i_15319936, 1);
                  if (!(((match_15006953.refresh != null ? match_15006953.refresh.length : 0) == l_15319937))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_15035488.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_15035488.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_15035488.mount.update(item_15015252, accessor_15015277.set, sub_list_15015207);
          }
          
          if (!(iter_item_15035488.skip)) {
          L31: do {
            F.line = 805;
            var submatch_15035640 = null;
            F.line = 184;
            var i_15319940 = 0;
            F.line = 185;
            var l_15319941 = (iter_item_15035488.matches != null ? iter_item_15035488.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_15319940 < l_15319941)) break L33;
                  F.line = 805;
                  submatch_15035640 = iter_item_15035488.matches[chckIndx(i_15319940, 0, (iter_item_15035488.matches != null ? iter_item_15035488.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_15035640.update(item_15015252, accessor_15015277.set, sub_list_15015207);
                  F.line = 188;
                  i_15319940 = addInt(i_15319940, 1);
                  if (!(((iter_item_15035488.matches != null ? iter_item_15035488.matches.length : 0) == l_15319941))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_15035610 = {get: accessor_15015277.get, set: accessor_15015277.set, node: iter_item_15035488.node, data: nimCopy(null, item_15015252, NTI112), init: !(inited_15035489), before: false, skip: iter_item_15035488.skip, m_type: NTI13760630};
          L34: do {
            F.line = 817;
            var refresh_15035651 = null;
            F.line = 184;
            var i_15319945 = 0;
            F.line = 185;
            var l_15319946 = (match_15006953.refresh != null ? match_15006953.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_15319945 < l_15319946)) break L36;
                  F.line = 817;
                  refresh_15035651 = match_15006953.refresh[chckIndx(i_15319945, 0, (match_15006953.refresh != null ? match_15006953.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_15035652 = refresh_15035651.after;
                    if (!exec_15035652) Tmp37 = false; else {                      var Tmp38 = match_15006953;
                      if (ConstSet640[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_15035652 = is_changed_10270456(sub_list_15015207, refresh_15035651.reads);
                  }
                  
                  if (exec_15035652) {
                  F.line = 822;
                  e_15035610.data = nimCopy(null, item_15015252, NTI112);
                  F.line = 823;
                  refresh_15035651.refresh(e_15035610);
                  F.line = 824;
                  iter_item_15035488.skip = e_15035610.skip;
                  }
                  
                  F.line = 188;
                  i_15319945 = addInt(i_15319945, 1);
                  if (!(((match_15006953.refresh != null ? match_15006953.refresh.length : 0) == l_15319946))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_15015203 = addInt(i_15015203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_15006953;
          if (ConstSet641[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_15015203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_15006953;
          if (ConstSet642[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_13905493(pop_13905243(Tmp43, "items"), parent_node_15015206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_15035753 = is_changed_10240207(refresh_list_15006957);
      F.line = 833;
      var sub_list_15035754 = null;
      F.line = 834;
      var node_15035755 = match_15006953.node;
      F.line = 835;
      var converted_val_15035756 = null;
      F.line = 836;
      var accessor_15035781 = {get: HEX3Aanonymous_15035765, set: null, m_type: NTI13760634};
      F.line = 840;
      var Tmp44 = match_15006953;
      if (ConstSet643[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_15006953;
        if (ConstSet645[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet644[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_15035756 = nimCopy(null, Tmp46.simple(val_15015201[0]), NTI112);
        F.line = 843;
        changed_15035753 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_15006953;
        if (ConstSet646[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_15035789 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_15006953;
        if (ConstSet648[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet647[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_15035756 = nimCopy(null, Tmp49.serial(val_15015201[0], serial_15035789, 0), NTI112);
          var Tmp50 = match_15006953;
          if (ConstSet649[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_15035789[0] == Tmp50.serial))) {
        F.line = 849;
        changed_15035753 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_15006953;
        if (ConstSet651[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet650[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_15006953;
        if (ConstSet652[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_15035801 = Tmp52.compare(val_15015201[0], Tmp53.value);
        F.line = 853;
        converted_val_15035756 = nimCopy(null, res_15035801.Field0, NTI112);
        var Tmp54 = match_15006953;
        if (ConstSet653[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = nimCopy(null, res_15035801.Field0, NTI112);
        if (res_15035801.Field1) {
        F.line = 856;
        changed_15035753 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_15006953;
        if (ConstSet655[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet654[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_15035807 = Tmp56.obj;
        F.line = 860;
        converted_val_15035756 = nimCopy(null, obj_15035807.get(val_15015201[0]), NTI112);
        F.line = 861;
        sub_list_15035754 = walk_10245019(refresh_list_15006957, obj_15035807.id);
        F.line = 862;
        changed_15035753 = is_changed_10240207(sub_list_15035754);
          if (!changed_15035753) Tmp57 = false; else {            var Tmp58 = match_15006953;
            if (ConstSet657[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet656[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_15006953;
        if (ConstSet659[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet658[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_15006953;
        if (ConstSet660[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_15035753 = !(Tmp61.eql(converted_val_15035756, Tmp62.value));
        }
        
        F.line = 865;
        accessor_15035781.set = sub_15035394(obj_15035807, val_15015201, 0, set_val_15006956, HEX3Aanonymous_15035847);
        break;
      }
        var Tmp64 = match_15006953;
        if (ConstSet661[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_15006953;
          if (ConstSet662[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_15006953;
      if (ConstSet663[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_15006953;
      if (ConstSet664[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_15006953;
      if (ConstSet665[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_15035755.parentNode.replaceChild(Tmp68.mount.node(), node_15035755);
      }
      
      F.line = 875;
      var Tmp69 = match_15006953;
      if (ConstSet666[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_15036232 = Tmp69.inited;
      if (!(inited_15036232)) {
      F.line = 876;
      changed_15035753 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_15006953;
      if (ConstSet667[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_15036239 = {get: accessor_15035781.get, set: accessor_15035781.set, node: node_15035755, data: nimCopy(null, converted_val_15035756, NTI112), init: !(inited_15036232), before: changed_15035753, skip: Tmp70.skip, m_type: NTI13760630};
      L71: do {
        F.line = 885;
        var refresh_15036246 = null;
        F.line = 184;
        var i_15319952 = 0;
        F.line = 185;
        var l_15319953 = (match_15006953.refresh != null ? match_15006953.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_15319952 < l_15319953)) break L73;
              F.line = 885;
              refresh_15036246 = match_15006953.refresh[chckIndx(i_15319952, 0, (match_15006953.refresh != null ? match_15006953.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_15036247 = changed_15035753;
                if (!exec_15036247) Tmp74 = false; else {                  var Tmp75 = match_15006953;
                  if (ConstSet668[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_15036247 = is_changed_10270456(sub_list_15035754, refresh_15036246.reads);
              }
              
              F.line = 891;
              if (!refresh_15036246.before) Tmp77 = false; else {                Tmp77 = (exec_15036247 || !(inited_15036232));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_15036246.init) Tmp78 = false; else {                  Tmp78 = !(inited_15036232);                }                Tmp76 = Tmp78;              }              exec_15036247 = Tmp76;
              if (exec_15036247) {
              F.line = 893;
              e_15036239.data = nimCopy(null, converted_val_15035756, NTI112);
              F.line = 894;
              refresh_15036246.refresh(e_15036239);
              var Tmp79 = match_15006953;
              if (ConstSet669[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_15036239.skip;
              }
              
              F.line = 188;
              i_15319952 = addInt(i_15319952, 1);
              if (!(((match_15006953.refresh != null ? match_15006953.refresh.length : 0) == l_15319953))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_15036232)) {
      var Tmp80 = match_15006953;
      if (ConstSet670[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_15035753) Tmp82 = false; else {          var Tmp83 = match_15006953;
          if (ConstSet671[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_15006953;
          if (ConstSet672[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_15006953;
      if (ConstSet673[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_15035755 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_15006953;
      if (ConstSet674[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_15035756, accessor_15035781.set, sub_list_15035754);
      }
      
        if (!changed_15035753) Tmp87 = false; else {          var Tmp88 = match_15006953;
          if (ConstSet675[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_15036285 = null;
        F.line = 182;
        var colontmp__15319956 = null;
        F.line = 906;
        var Tmp90 = match_15006953;
        if (ConstSet676[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__15319956 = Tmp90.matches;
        F.line = 184;
        var i_15319957 = 0;
        F.line = 185;
        var l_15319958 = (colontmp__15319956 != null ? colontmp__15319956.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_15319957 < l_15319958)) break L92;
              F.line = 906;
              submatch_15036285 = colontmp__15319956[chckIndx(i_15319957, 0, (colontmp__15319956 != null ? colontmp__15319956.length : 0)+0-1)-0];
              F.line = 907;
              submatch_15036285.update(converted_val_15035756, accessor_15035781.set, sub_list_15035754);
              F.line = 188;
              i_15319957 = addInt(i_15319957, 1);
              if (!(((colontmp__15319956 != null ? colontmp__15319956.length : 0) == l_15319958))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_15035753) {
      F.line = 910;
      var Tmp93 = match_15006953;
      if (ConstSet677[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_15036292 = {get: accessor_15035781.get, set: accessor_15035781.set, node: node_15035755, data: nimCopy(null, converted_val_15035756, NTI112), init: !(inited_15036232), before: false, skip: Tmp93.skip, m_type: NTI13760630};
      L94: do {
        F.line = 918;
        var refresh_15036299 = null;
        F.line = 184;
        var i_15319962 = 0;
        F.line = 185;
        var l_15319963 = (match_15006953.refresh != null ? match_15006953.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_15319962 < l_15319963)) break L96;
              F.line = 918;
              refresh_15036299 = match_15006953.refresh[chckIndx(i_15319962, 0, (match_15006953.refresh != null ? match_15006953.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_15036300 = refresh_15036299.after;
                if (!exec_15036300) Tmp97 = false; else {                  var Tmp98 = match_15006953;
                  if (ConstSet678[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_15036300 = is_changed_10270456(sub_list_15035754, refresh_15036299.reads);
              }
              
              if (exec_15036300) {
              F.line = 923;
              e_15036292.data = nimCopy(null, converted_val_15035756, NTI112);
              F.line = 924;
              refresh_15036299.refresh(e_15036292);
              var Tmp99 = match_15006953;
              if (ConstSet679[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_15036292.skip;
              }
              
              F.line = 188;
              i_15319962 = addInt(i_15319962, 1);
              if (!(((match_15006953.refresh != null ? match_15006953.refresh.length : 0) == l_15319963))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_15006618(match_15006623, init_val_15006624, set_val_15006626, refresh_list_15006627) {
    function HEX3Aanonymous_15006628() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_15006948(match_15006623, init_val_15006624, set_val_15006626, refresh_list_15006627);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_15036376 = HEX3Aanonymous_15006628;
    if (!((match_15006623.runner == null))) {
    F.line = 706;
    add_last_13906260(match_15006623.runner.fifo, run_15036376);
    }
    else {
      F.line = 708;
      match_15006623.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_15006623.runner.fifo, run_15036376);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_15006623.runner.fifo))) break L3;
            F.line = 712;
            var run_item_15040054 = pop_first_13950047(match_15006623.runner.fifo);
            F.line = 713;
            run_item_15040054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_15006623.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_15006524(match_15006529) {
    function HEX3Aanonymous_15006536(data_15006538, set_15006543, refresh_list_15006544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_15006618(match_15006529, data_15006538, set_15006543, refresh_list_15006544);
      framePtr = F.prev;

      
    }

  var result_15006531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_15006531 = {update: HEX3Aanonymous_15006536};
  framePtr = F.prev;

  return result_15006531;

}
function as_interface_14981461(config_14981466) {
    function HEX3Aanonymous_14981473(node_14981475) {
      var result_14981481 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_14981481 = nimCopy(null, [], NTI14981496);
        L1: do {
          F.line = 997;
          var comp_match_15005214 = null;
          F.line = 182;
          var colontmp__15319912 = null;
          F.line = 997;
          colontmp__15319912 = compile_14982365(config_14981466, node_14981475);
          F.line = 184;
          var i_15319914 = 0;
          F.line = 185;
          var l_15319915 = (colontmp__15319912 != null ? colontmp__15319912.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15319914 < l_15319915)) break L3;
                F.line = 997;
                comp_match_15005214 = colontmp__15319912[chckIndx(i_15319914, 0, (colontmp__15319912 != null ? colontmp__15319912.length : 0)+0-1)-0];
                F.line = 998;
                if (result_14981481 != null) { result_14981481.push(as_interface_15006524(comp_match_15005214)); } else { result_14981481 = [as_interface_15006524(comp_match_15005214)]; };
                F.line = 188;
                i_15319914 = addInt(i_15319914, 1);
                if (!(((colontmp__15319912 != null ? colontmp__15319912.length : 0) == l_15319915))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_14981481;

    }

  var result_14981468 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_14981468 = {compile: HEX3Aanonymous_14981473};
  framePtr = F.prev;

  return result_14981468;

}
function match_14980113(c_14980119, selector_14980120, convert_14980122, actions_14980128) {
  var result_14980130 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 408;
    result_14980130 = {selector: nimCopy(null, selector_14980120, NTI112), refresh: [], mount: null, iter: false, convert: nimCopy(null, convert_14980122, NTI14975629), m_type: NTI14975611, cmatches: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    F.line = 414;
    if (c_14980119.cmatches != null) { c_14980119.cmatches.push(as_interface_14981461(result_14980130)); } else { c_14980119.cmatches = [as_interface_14981461(result_14980130)]; };
    if (!((actions_14980128 == null))) {
    F.line = 416;
    actions_14980128(result_14980130);
    }
    
  framePtr = F.prev;

  return result_14980130;

}
function match_14977481(c_14977487, selector_14977488, convert_14977490, actions_14977496) {
  var result_14977498 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 432;
    var type_selector_14977506 = {kind: 3, obj: convert_14977490, simple: null, serial: null, compare: null, eql: null};
    F.line = 435;
    result_14977498 = match_14980113(c_14977487, selector_14977488, type_selector_14977506, actions_14977496);
  framePtr = F.prev;

  return result_14977498;

}
function HEX7C_14965216(p1_14965223, p2_14965226) {
    function HEX3Aanonymous_14965230(x_14965232) {
      var result_14965233 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_14965233 = nimCopy(null, p2_14965226(p1_14965223(x_14965232)), NTI112);
      framePtr = F.prev;

      return result_14965233;

    }

  var result_14965229 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_14965229 = HEX3Aanonymous_14965230;
  framePtr = F.prev;

  return result_14965229;

}
function HEX7C_14940436(p1_14940443, p2_14940446) {
    function HEX3Aanonymous_14940450(x_14940452) {
      var result_14940453 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_14940453 = p2_14940446(p1_14940443(x_14940452));
      framePtr = F.prev;

      return result_14940453;

    }

  var result_14940449 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_14940449 = HEX3Aanonymous_14940450;
  framePtr = F.prev;

  return result_14940449;

}
function access_14925388(c_14925393) {
    function HEX3Aanonymous_14925403(data_14925405) {
      var result_14925406 = null;

      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 211;
        result_14925406 = data_14925405;
      framePtr = F.prev;

      return result_14925406;

    }
    function HEX3Aanonymous_14925420(data_14925423, data_14925423_Idx, value_14925424) {
      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 212;
        data_14925423[data_14925423_Idx] = value_14925424;
      framePtr = F.prev;

      
    }

  var result_14925395 = null;

  var F={procname:"access.access",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_14925395 = {get: HEX3Aanonymous_14925403, set: HEX3Aanonymous_14925420, id: []};
  framePtr = F.prev;

  return result_14925395;

}
function new_14940207() {
  var result_14940211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_14940401 = null;
    F.line = 851;
    r_14940401 = ({num: null, subject: null, from_h: null, date: null, message_id: null, references: null, bytes: null, lines: null});
    F.line = 852;
    result_14940211 = r_14940401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_14940211;

}
function iter_15233379(c_15233385, selector_15233386, iter_15233388, actions_15233394) {
  var result_15233396 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 593;
    result_15233396 = {selector: nimCopy(null, selector_15233386, NTI112), refresh: [], mount: null, iter: true, iterate: nimCopy(null, iter_15233388, NTI14615501), cmatches: [], m_type: NTI14615351, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null})};
    F.line = 600;
    if (c_15233385.cmatches != null) { c_15233385.cmatches.push(as_interface_14627456(result_15233396)); } else { c_15233385.cmatches = [as_interface_14627456(result_15233396)]; };
    if (!((actions_15233394 == null))) {
    F.line = 602;
    actions_15233394(result_15233396);
    }
    
  framePtr = F.prev;

  return result_15233396;

}
function iter_15232518(c_15232524, selector_15232525, it_15232527, actions_15232533) {
  var result_15232535 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 608;
    result_15232535 = iter_15233379(c_15232524, selector_15232525, {kind: 0, simple: it_15232527, serial: null, selector: null}, actions_15232533);
  framePtr = F.prev;

  return result_15232535;

}
function compile_15172274(cfg_15172279, node_15172280) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_15172330 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_15172330 = nimCopy(null, [], NTI15172345);
    F.line = 620;
    if (eqStrings(cfg_15172279.selector, [])) {
    Tmp1 = [node_15172280];
    }
    else {
    Tmp1 = node_15172280.querySelectorAll(toJSStr(cfg_15172279.selector));
    }
    
    var matched_nodes_15172359 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_15172359 != null ? matched_nodes_15172359.length : 0) == 0)) {
    F.line = 622;
    var selector_15172365 = nimCopy(null, cfg_15172279.selector, NTI112);
    F.line = 623;
    var fmt_res_15172366 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_15172366[0] != null) { fmt_res_15172366[0] = (fmt_res_15172366[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_15172366[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_15172366, 0, selector_15172365, []);
    F.line = 623;
    if (fmt_res_15172366[0] != null) { fmt_res_15172366[0] = (fmt_res_15172366[0]).concat(makeNimstrLit("\'")); } else { fmt_res_15172366[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_15172366[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_15180008 = null;
      F.line = 184;
      var i_15320012 = 0;
      F.line = 185;
      var l_15320013 = (matched_nodes_15172359 != null ? matched_nodes_15172359.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_15320012 < l_15320013)) break L4;
            F.line = 625;
            matched_node_15180008 = matched_nodes_15172359[chckIndx(i_15320012, 0, (matched_nodes_15172359 != null ? matched_nodes_15172359.length : 0)+0-1)-0];
            F.line = 626;
            var match_15180016 = {refresh: nimCopy(null, cfg_15172279.refresh, NTI15165795), iter: cfg_15172279.iter, node: matched_node_15180008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_15180016.node = matched_node_15180008;
            if (match_15180016.iter) {
            var Tmp5 = match_15180016;
            if (ConstSet680[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_15172279;
            if (ConstSet681[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI15165850);
            var Tmp7 = match_15180016;
            if (ConstSet682[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_15180008).createComment(toJSStr(cstrToNimstr(((matched_node_15180008).outerHTML))));
            var Tmp8 = match_15180016;
            if (ConstSet683[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_15172279.mount;
            var Tmp9 = match_15180016;
            if (ConstSet684[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_15172279.cmatches, NTI15165800);
            var Tmp10 = match_15180016;
            if (ConstSet685[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI15185029);
            F.line = 637;
            var Tmp11 = match_15180016;
            if (ConstSet686[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_15180008.parentNode.replaceChild(Tmp11.anchor, matched_node_15180008);
            }
            else {
              var Tmp12 = match_15180016;
              if (ConstSet687[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_15172279;
              if (ConstSet688[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_15180016;
              if (ConstSet689[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_15180016;
                if (ConstSet690[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_15180016;
              if (ConstSet691[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_15172279;
              if (ConstSet692[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI15165808);
              var Tmp18 = match_15180016;
              if (ConstSet693[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI15185056);
              var Tmp19 = match_15180016;
              if (ConstSet694[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_15180016;
              if (ConstSet695[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_15172279.mount == null))) {
              var Tmp21 = match_15180016;
              if (ConstSet696[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_15172279.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_15185077 = null;
                  F.line = 184;
                  var i_15320009 = 0;
                  F.line = 185;
                  var l_15320010 = (cfg_15172279.cmatches != null ? cfg_15172279.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_15320009 < l_15320010)) break L24;
                        F.line = 652;
                        submatch_15185077 = cfg_15172279.cmatches[chckIndx(i_15320009, 0, (cfg_15172279.cmatches != null ? cfg_15172279.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_15180016;
                        if (ConstSet697[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_14745218(Tmp25, "matches", submatch_15185077.compile(matched_node_15180008));
                        F.line = 188;
                        i_15320009 = addInt(i_15320009, 1);
                        if (!(((cfg_15172279.cmatches != null ? cfg_15172279.cmatches.length : 0) == l_15320010))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_15172330 != null) { result_15172330.push(match_15180016); } else { result_15172330 = [match_15180016]; };
            F.line = 188;
            i_15320012 = addInt(i_15320012, 1);
            if (!(((matched_nodes_15172359 != null ? matched_nodes_15172359.length : 0) == l_15320013))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_15172330;

}
function sub_15225394(ts_15225399, val_15225401, val_15225401_Idx, set_val_15225403, update_15225404) {
    function HEX3Aanonymous_15225417(new_value_15225419, changed_path_15225421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_15225399.set(val_15225401, val_15225401_Idx, new_value_15225419);
        F.line = 360;
        var new_paths_15225423 = null;
        L1: do {
          F.line = 361;
          var p_15225430 = null;
          F.line = 184;
          var i_15320054 = 0;
          F.line = 185;
          var l_15320055 = (changed_path_15225421 != null ? changed_path_15225421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15320054 < l_15320055)) break L3;
                F.line = 361;
                p_15225430 = changed_path_15225421[chckIndx(i_15320054, 0, (changed_path_15225421 != null ? changed_path_15225421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_15225423 != null) { new_paths_15225423.push(HEX26_13760256(ts_15225399.id, p_15225430)); } else { new_paths_15225423 = [HEX26_13760256(ts_15225399.id, p_15225430)]; };
                F.line = 188;
                i_15320054 = addInt(i_15320054, 1);
                if (!(((changed_path_15225421 != null ? changed_path_15225421.length : 0) == l_15320055))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_15225403 == null))) {
        F.line = 364;
        set_val_15225403(val_15225401[val_15225401_Idx], new_paths_15225423);
        }
        else {
        if (!((update_15225404 == null))) {
        F.line = 367;
        update_15225404({paths: nimCopy(null, new_paths_15225423, NTI15225422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_15225406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_15225403 == null) && (update_15225404 == null))) {
    F.line = 357;
    result_15225406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_15225406 = HEX3Aanonymous_15225417;
  } while (false);
  framePtr = F.prev;

  return result_15225406;

}
function create_iter_item_15225505(match_15225510, parent_node_15225511) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_15225513 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_15225518 = null;
    F.line = 683;
    var node_15225519 = null;
      var Tmp1 = match_15225510;
      if (ConstSet711[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_15225510;
    if (ConstSet712[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_15225518 = Tmp2.mount_template.clone();
    F.line = 686;
    node_15225519 = comp_15225518.node();
    }
    else {
      F.line = 688;
      node_15225519 = match_15225510.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_15225510;
    if (ConstSet713[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_15225513 = {serial: 0, mount: comp_15225518, node: node_15225519, matches: compile_14785571(Tmp3.match_templates, node_15225519), skip: false};
    F.line = 694;
    var Tmp4 = match_15225510;
    if (ConstSet714[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_15225511.insertBefore(node_15225519, Tmp4.anchor);
  framePtr = F.prev;

  return result_15225513;

}
function update_do_15196948(match_15196953, init_val_15196954, set_val_15196956, refresh_list_15196957) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_15205261() {
            var result_15205263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_15205263 = nimCopy(null, item_15205252, NTI14196146);
            framePtr = F.prev;

            return result_15205263;

          }
          var Tmp16;
            function HEX3Aanonymous_15205281(new_value_15205283, path_15205300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_15205301 = mnewString(0);
                F.line = 747;
                if (fmt_res_15205301 != null) { fmt_res_15205301 = (fmt_res_15205301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_15205301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_15205301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15215017(new_value_15215019, path_15215036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_15215037 = mnewString(0);
                F.line = 754;
                if (fmt_res_15215037 != null) { fmt_res_15215037 = (fmt_res_15215037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_15215037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_15215037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15225050(refresh_list_15225052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_15196618(match_15196953, val_15205201[0], set_val_15196956, refresh_list_15225052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_15225765() {
        var result_15225767 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_15225767 = nimCopy(null, converted_val_15225756, NTI14196146);
        framePtr = F.prev;

        return result_15225767;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_15225847(refresh_list_15225849) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_15196618(match_15196953, val_15205201[0], set_val_15196956, refresh_list_15225849);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_15196956 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_15205201 = [init_val_15196954];
    if (match_15196953.iter) {
    F.line = 720;
    var i_15205203 = 0;
    F.line = 721;
    var Tmp1 = match_15196953;
    if (ConstSet698[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_15205206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_15205207 = null;
    F.line = 723;
    var it_simple_15205212 = null;
    F.line = 724;
    var it_serial_15205217 = null;
    F.line = 725;
    var it_select_15205225 = null;
    F.line = 726;
    var Tmp2 = match_15196953;
    if (ConstSet699[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_15196953;
      if (ConstSet701[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet700[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_15205212 = Tmp4.simple(val_15205201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_15196953;
      if (ConstSet703[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet702[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_15205217 = Tmp6.serial(val_15205201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_15196953;
      if (ConstSet705[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet704[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_15205225 = Tmp8.selector(val_15205201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_15196953;
            if (ConstSet706[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15205203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_15196953;
          if (ConstSet707[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_15205203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_15205250 = [Tmp11];
          F.line = 736;
          var changed_15205251 = is_changed_10240207(refresh_list_15196957);
          F.line = 737;
          var item_15205252 = null;
          F.line = 738;
          var accessor_15205277 = {get: HEX3Aanonymous_15205261, set: null, m_type: NTI14490012};
          F.line = 741;
          var Tmp16 = match_15196953;
          if (ConstSet708[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_15205280 = it_simple_15205212();
            if ((it_15205280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_15205252 = nimCopy(null, it_15205280["Field1"], NTI14451019);
            F.line = 746;
            accessor_15205277.set = HEX3Aanonymous_15205281;
            break;
          case 1:
            F.line = 750;
            var it_15215016 = it_serial_15205217(serial_15205250, 0);
            if ((it_15215016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_15205252 = nimCopy(null, it_15215016["Field1"], NTI14451019);
            F.line = 753;
            accessor_15205277.set = HEX3Aanonymous_15215017;
            break;
          case 2:
            F.line = 757;
            var it_15225015 = it_select_15205225();
            if ((it_15225015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_15205252 = nimCopy(null, it_15225015.get(val_15205201[0]), NTI14196146);
            F.line = 760;
            accessor_15205277.set = sub_15225394(it_15225015, val_15205201, 0, set_val_15196956, HEX3Aanonymous_15225050);
            F.line = 762;
            sub_list_15205207 = walk_10245019(refresh_list_15196957, it_15225015.id);
            F.line = 763;
            changed_15205251 = is_changed_10240207(sub_list_15205207);
            break;
          }
          F.line = 766;
          var iter_item_15225488 = null;
          F.line = 767;
          var inited_15225489 = false;
            var Tmp17 = match_15196953;
            if (ConstSet709[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15205203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_15196953;
          if (ConstSet710[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_15225488 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_15205203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_15225489 = true;
          F.line = 773;
          changed_15205251 = true;
          }
          else {
            F.line = 775;
            iter_item_15225488 = create_iter_item_15225505(match_15196953, parent_node_15205206);
            F.line = 776;
            var Tmp21 = match_15196953;
            if (ConstSet715[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_15225488); } else { Tmp22 = [iter_item_15225488]; };
            F.line = 777;
            inited_15225489 = false;
            if (!((serial_15205250[0] == iter_item_15225488.serial))) {
            F.line = 779;
            changed_15205251 = true;
            }
            
          }
          
          F.line = 782;
          var e_15225610 = {get: accessor_15205277.get, set: accessor_15205277.set, node: iter_item_15225488.node, data: nimCopy(null, item_15205252, NTI14196146), init: !(inited_15225489), before: true, skip: iter_item_15225488.skip, m_type: NTI14610792};
          L23: do {
            F.line = 790;
            var refresh_15225617 = null;
            F.line = 184;
            var i_15320022 = 0;
            F.line = 185;
            var l_15320023 = (match_15196953.refresh != null ? match_15196953.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_15320022 < l_15320023)) break L25;
                  F.line = 790;
                  refresh_15225617 = match_15196953.refresh[chckIndx(i_15320022, 0, (match_15196953.refresh != null ? match_15196953.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_15225618 = refresh_15225617.before;
                    if (!exec_15225618) Tmp26 = false; else {                      var Tmp27 = match_15196953;
                      if (ConstSet716[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_15225618 = is_changed_10270456(sub_list_15205207, refresh_15225617.reads);
                  }
                  
                    if (exec_15225618) Tmp28 = true; else {                      if (!!(inited_15225489)) Tmp29 = false; else {                        Tmp29 = refresh_15225617.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_15225610.data = nimCopy(null, item_15205252, NTI14196146);
                  F.line = 796;
                  refresh_15225617.refresh(e_15225610);
                  F.line = 797;
                  iter_item_15225488.skip = e_15225610.skip;
                  }
                  
                  F.line = 188;
                  i_15320022 = addInt(i_15320022, 1);
                  if (!(((match_15196953.refresh != null ? match_15196953.refresh.length : 0) == l_15320023))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_15225488.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_15225488.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_15225488.mount.update(item_15205252, accessor_15205277.set, sub_list_15205207);
          }
          
          if (!(iter_item_15225488.skip)) {
          L31: do {
            F.line = 805;
            var submatch_15225640 = null;
            F.line = 184;
            var i_15320026 = 0;
            F.line = 185;
            var l_15320027 = (iter_item_15225488.matches != null ? iter_item_15225488.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_15320026 < l_15320027)) break L33;
                  F.line = 805;
                  submatch_15225640 = iter_item_15225488.matches[chckIndx(i_15320026, 0, (iter_item_15225488.matches != null ? iter_item_15225488.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_15225640.update(item_15205252, accessor_15205277.set, sub_list_15205207);
                  F.line = 188;
                  i_15320026 = addInt(i_15320026, 1);
                  if (!(((iter_item_15225488.matches != null ? iter_item_15225488.matches.length : 0) == l_15320027))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_15225610 = {get: accessor_15205277.get, set: accessor_15205277.set, node: iter_item_15225488.node, data: nimCopy(null, item_15205252, NTI14196146), init: !(inited_15225489), before: false, skip: iter_item_15225488.skip, m_type: NTI14610792};
          L34: do {
            F.line = 817;
            var refresh_15225651 = null;
            F.line = 184;
            var i_15320031 = 0;
            F.line = 185;
            var l_15320032 = (match_15196953.refresh != null ? match_15196953.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_15320031 < l_15320032)) break L36;
                  F.line = 817;
                  refresh_15225651 = match_15196953.refresh[chckIndx(i_15320031, 0, (match_15196953.refresh != null ? match_15196953.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_15225652 = refresh_15225651.after;
                    if (!exec_15225652) Tmp37 = false; else {                      var Tmp38 = match_15196953;
                      if (ConstSet717[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_15225652 = is_changed_10270456(sub_list_15205207, refresh_15225651.reads);
                  }
                  
                  if (exec_15225652) {
                  F.line = 822;
                  e_15225610.data = nimCopy(null, item_15205252, NTI14196146);
                  F.line = 823;
                  refresh_15225651.refresh(e_15225610);
                  F.line = 824;
                  iter_item_15225488.skip = e_15225610.skip;
                  }
                  
                  F.line = 188;
                  i_15320031 = addInt(i_15320031, 1);
                  if (!(((match_15196953.refresh != null ? match_15196953.refresh.length : 0) == l_15320032))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_15205203 = addInt(i_15205203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_15196953;
          if (ConstSet718[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_15205203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_15196953;
          if (ConstSet719[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_14805493(pop_14805243(Tmp43, "items"), parent_node_15205206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_15225753 = is_changed_10240207(refresh_list_15196957);
      F.line = 833;
      var sub_list_15225754 = null;
      F.line = 834;
      var node_15225755 = match_15196953.node;
      F.line = 835;
      var converted_val_15225756 = null;
      F.line = 836;
      var accessor_15225781 = {get: HEX3Aanonymous_15225765, set: null, m_type: NTI14490012};
      F.line = 840;
      var Tmp44 = match_15196953;
      if (ConstSet720[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_15196953;
        if (ConstSet722[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet721[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_15225756 = nimCopy(null, Tmp46.simple(val_15205201[0]), NTI14196146);
        F.line = 843;
        changed_15225753 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_15196953;
        if (ConstSet723[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_15225789 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_15196953;
        if (ConstSet725[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet724[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_15225756 = nimCopy(null, Tmp49.serial(val_15205201[0], serial_15225789, 0), NTI14196146);
          var Tmp50 = match_15196953;
          if (ConstSet726[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_15225789[0] == Tmp50.serial))) {
        F.line = 849;
        changed_15225753 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_15196953;
        if (ConstSet728[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet727[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_15196953;
        if (ConstSet729[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_15225801 = Tmp52.compare(val_15205201[0], Tmp53.value);
        F.line = 853;
        converted_val_15225756 = nimCopy(null, res_15225801.Field0, NTI14196146);
        var Tmp54 = match_15196953;
        if (ConstSet730[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = nimCopy(null, res_15225801.Field0, NTI14196146);
        if (res_15225801.Field1) {
        F.line = 856;
        changed_15225753 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_15196953;
        if (ConstSet732[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet731[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_15225807 = Tmp56.obj;
        F.line = 860;
        converted_val_15225756 = nimCopy(null, obj_15225807.get(val_15205201[0]), NTI14196146);
        F.line = 861;
        sub_list_15225754 = walk_10245019(refresh_list_15196957, obj_15225807.id);
        F.line = 862;
        changed_15225753 = is_changed_10240207(sub_list_15225754);
          if (!changed_15225753) Tmp57 = false; else {            var Tmp58 = match_15196953;
            if (ConstSet734[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet733[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_15196953;
        if (ConstSet736[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet735[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_15196953;
        if (ConstSet737[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_15225753 = !(Tmp61.eql(converted_val_15225756, Tmp62.value));
        }
        
        F.line = 865;
        accessor_15225781.set = sub_15225394(obj_15225807, val_15205201, 0, set_val_15196956, HEX3Aanonymous_15225847);
        break;
      }
        var Tmp64 = match_15196953;
        if (ConstSet738[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_15196953;
          if (ConstSet739[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_15196953;
      if (ConstSet740[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_15196953;
      if (ConstSet741[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_15196953;
      if (ConstSet742[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_15225755.parentNode.replaceChild(Tmp68.mount.node(), node_15225755);
      }
      
      F.line = 875;
      var Tmp69 = match_15196953;
      if (ConstSet743[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_15226232 = Tmp69.inited;
      if (!(inited_15226232)) {
      F.line = 876;
      changed_15225753 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_15196953;
      if (ConstSet744[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_15226239 = {get: accessor_15225781.get, set: accessor_15225781.set, node: node_15225755, data: nimCopy(null, converted_val_15225756, NTI14196146), init: !(inited_15226232), before: changed_15225753, skip: Tmp70.skip, m_type: NTI14610792};
      L71: do {
        F.line = 885;
        var refresh_15226246 = null;
        F.line = 184;
        var i_15320038 = 0;
        F.line = 185;
        var l_15320039 = (match_15196953.refresh != null ? match_15196953.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_15320038 < l_15320039)) break L73;
              F.line = 885;
              refresh_15226246 = match_15196953.refresh[chckIndx(i_15320038, 0, (match_15196953.refresh != null ? match_15196953.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_15226247 = changed_15225753;
                if (!exec_15226247) Tmp74 = false; else {                  var Tmp75 = match_15196953;
                  if (ConstSet745[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_15226247 = is_changed_10270456(sub_list_15225754, refresh_15226246.reads);
              }
              
              F.line = 891;
              if (!refresh_15226246.before) Tmp77 = false; else {                Tmp77 = (exec_15226247 || !(inited_15226232));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_15226246.init) Tmp78 = false; else {                  Tmp78 = !(inited_15226232);                }                Tmp76 = Tmp78;              }              exec_15226247 = Tmp76;
              if (exec_15226247) {
              F.line = 893;
              e_15226239.data = nimCopy(null, converted_val_15225756, NTI14196146);
              F.line = 894;
              refresh_15226246.refresh(e_15226239);
              var Tmp79 = match_15196953;
              if (ConstSet746[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_15226239.skip;
              }
              
              F.line = 188;
              i_15320038 = addInt(i_15320038, 1);
              if (!(((match_15196953.refresh != null ? match_15196953.refresh.length : 0) == l_15320039))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_15226232)) {
      var Tmp80 = match_15196953;
      if (ConstSet747[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_15225753) Tmp82 = false; else {          var Tmp83 = match_15196953;
          if (ConstSet748[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_15196953;
          if (ConstSet749[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_15196953;
      if (ConstSet750[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_15225755 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_15196953;
      if (ConstSet751[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_15225756, accessor_15225781.set, sub_list_15225754);
      }
      
        if (!changed_15225753) Tmp87 = false; else {          var Tmp88 = match_15196953;
          if (ConstSet752[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_15226285 = null;
        F.line = 182;
        var colontmp__15320042 = null;
        F.line = 906;
        var Tmp90 = match_15196953;
        if (ConstSet753[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__15320042 = Tmp90.matches;
        F.line = 184;
        var i_15320043 = 0;
        F.line = 185;
        var l_15320044 = (colontmp__15320042 != null ? colontmp__15320042.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_15320043 < l_15320044)) break L92;
              F.line = 906;
              submatch_15226285 = colontmp__15320042[chckIndx(i_15320043, 0, (colontmp__15320042 != null ? colontmp__15320042.length : 0)+0-1)-0];
              F.line = 907;
              submatch_15226285.update(converted_val_15225756, accessor_15225781.set, sub_list_15225754);
              F.line = 188;
              i_15320043 = addInt(i_15320043, 1);
              if (!(((colontmp__15320042 != null ? colontmp__15320042.length : 0) == l_15320044))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_15225753) {
      F.line = 910;
      var Tmp93 = match_15196953;
      if (ConstSet754[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_15226292 = {get: accessor_15225781.get, set: accessor_15225781.set, node: node_15225755, data: nimCopy(null, converted_val_15225756, NTI14196146), init: !(inited_15226232), before: false, skip: Tmp93.skip, m_type: NTI14610792};
      L94: do {
        F.line = 918;
        var refresh_15226299 = null;
        F.line = 184;
        var i_15320048 = 0;
        F.line = 185;
        var l_15320049 = (match_15196953.refresh != null ? match_15196953.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_15320048 < l_15320049)) break L96;
              F.line = 918;
              refresh_15226299 = match_15196953.refresh[chckIndx(i_15320048, 0, (match_15196953.refresh != null ? match_15196953.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_15226300 = refresh_15226299.after;
                if (!exec_15226300) Tmp97 = false; else {                  var Tmp98 = match_15196953;
                  if (ConstSet755[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_15226300 = is_changed_10270456(sub_list_15225754, refresh_15226299.reads);
              }
              
              if (exec_15226300) {
              F.line = 923;
              e_15226292.data = nimCopy(null, converted_val_15225756, NTI14196146);
              F.line = 924;
              refresh_15226299.refresh(e_15226292);
              var Tmp99 = match_15196953;
              if (ConstSet756[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_15226292.skip;
              }
              
              F.line = 188;
              i_15320048 = addInt(i_15320048, 1);
              if (!(((match_15196953.refresh != null ? match_15196953.refresh.length : 0) == l_15320049))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_15196618(match_15196623, init_val_15196624, set_val_15196626, refresh_list_15196627) {
    function HEX3Aanonymous_15196628() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_15196948(match_15196623, init_val_15196624, set_val_15196626, refresh_list_15196627);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_15226376 = HEX3Aanonymous_15196628;
    if (!((match_15196623.runner == null))) {
    F.line = 706;
    add_last_13906260(match_15196623.runner.fifo, run_15226376);
    }
    else {
      F.line = 708;
      match_15196623.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_15196623.runner.fifo, run_15226376);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_15196623.runner.fifo))) break L3;
            F.line = 712;
            var run_item_15230054 = pop_first_13950047(match_15196623.runner.fifo);
            F.line = 713;
            run_item_15230054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_15196623.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_15196524(match_15196529) {
    function HEX3Aanonymous_15196536(data_15196538, set_15196543, refresh_list_15196544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_15196618(match_15196529, data_15196538, set_15196543, refresh_list_15196544);
      framePtr = F.prev;

      
    }

  var result_15196531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_15196531 = {update: HEX3Aanonymous_15196536};
  framePtr = F.prev;

  return result_15196531;

}
function as_interface_15171370(config_15171375) {
    function HEX3Aanonymous_15171382(node_15171384) {
      var result_15171390 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_15171390 = nimCopy(null, [], NTI15171405);
        L1: do {
          F.line = 997;
          var comp_match_15195214 = null;
          F.line = 182;
          var colontmp__15319998 = null;
          F.line = 997;
          colontmp__15319998 = compile_15172274(config_15171375, node_15171384);
          F.line = 184;
          var i_15320000 = 0;
          F.line = 185;
          var l_15320001 = (colontmp__15319998 != null ? colontmp__15319998.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_15320000 < l_15320001)) break L3;
                F.line = 997;
                comp_match_15195214 = colontmp__15319998[chckIndx(i_15320000, 0, (colontmp__15319998 != null ? colontmp__15319998.length : 0)+0-1)-0];
                F.line = 998;
                if (result_15171390 != null) { result_15171390.push(as_interface_15196524(comp_match_15195214)); } else { result_15171390 = [as_interface_15196524(comp_match_15195214)]; };
                F.line = 188;
                i_15320000 = addInt(i_15320000, 1);
                if (!(((colontmp__15319998 != null ? colontmp__15319998.length : 0) == l_15320001))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_15171390;

    }

  var result_15171377 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_15171377 = {compile: HEX3Aanonymous_15171382};
  framePtr = F.prev;

  return result_15171377;

}
function match_15170022(c_15170028, selector_15170029, convert_15170031, actions_15170037) {
  var result_15170039 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 408;
    result_15170039 = {selector: nimCopy(null, selector_15170029, NTI112), refresh: [], mount: null, iter: false, convert: nimCopy(null, convert_15170031, NTI15165808), m_type: NTI15165790, cmatches: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    F.line = 414;
    if (c_15170028.cmatches != null) { c_15170028.cmatches.push(as_interface_15171370(result_15170039)); } else { c_15170028.cmatches = [as_interface_15171370(result_15170039)]; };
    if (!((actions_15170037 == null))) {
    F.line = 416;
    actions_15170037(result_15170039);
    }
    
  framePtr = F.prev;

  return result_15170039;

}
function match_15167391(c_15167397, convert_15167399, actions_15167405) {
  var result_15167407 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 448;
    var type_selector_15167415 = {kind: 3, obj: convert_15167399, simple: null, serial: null, compare: null, eql: null};
    F.line = 451;
    result_15167407 = match_15170022(c_15167397, [], type_selector_15167415, actions_15167405);
  framePtr = F.prev;

  return result_15167407;

}
function HEX7C_15155216(p1_15155223, p2_15155226) {
    function HEX3Aanonymous_15155230(x_15155232) {
      var result_15155233 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_15155233 = nimCopy(null, p2_15155226(p1_15155223(x_15155232)), NTI14196146);
      framePtr = F.prev;

      return result_15155233;

    }

  var result_15155229 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_15155229 = HEX3Aanonymous_15155230;
  framePtr = F.prev;

  return result_15155229;

}
function HEX3Aanonymous_14530432(c_14530625) {
    function HEX3Aanonymous_14530874(ev_14530880) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
        if (!(eqStrings(ev_14530880.data.group, ev_14530880.data.loaded_group))) {
        F.line = 35;
        init_14455001(ev_14530880);
        }
        else {
          F.line = 37;
        console.log("Already loaded %v", toJSStr(ev_14530880.data.loaded_group));
        }
        
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14600001(arg0_14600003) {
      var result_14600009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 39;
        var arg1_14600010 = nimCopy(null, arg0_14600003.threads, NTI14451019);
        F.line = 69;
        result_14600009 = nimCopy(null, arg1_14600010, NTI14451019);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_14600009;

    }
    function HEX3Aanonymous_14600260(dataHEX60gensym14585990_14600263, dataHEX60gensym14585990_14600263_Idx, val3HEX60gensym14585991_14605007) {
        function HEX3Aanonymous_14610001(arg0_14610003, value_14610009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 39;
            var arg1_14610010 = nimCopy(null, arg0_14610003.threads, NTI14451019);
            F.line = 122;
            arg1_14610010 = nimCopy(null, value_14610009, NTI14451019);
            F.line = 134;
            arg0_14610003.threads = nimCopy(null, arg1_14610010, NTI14451019);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym14585992_14605008 = access_14585835(c_14530625).get(dataHEX60gensym14585990_14600263[dataHEX60gensym14585990_14600263_Idx]);
        F.line = 183;
        var set2HEX60gensym14585993_14610214 = HEX3Aanonymous_14610001;
        F.line = 184;
        set2HEX60gensym14585993_14610214(val2HEX60gensym14585992_14605008, val3HEX60gensym14585991_14605007);
        F.line = 185;
        access_14585835(c_14530625).set(dataHEX60gensym14585990_14600263, dataHEX60gensym14585990_14600263_Idx, val2HEX60gensym14585992_14605008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14610771(threads_14610974) {
        function HEX3Aanonymous_14615343(thread_14615538) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 41;
            mount_14617803(thread_14615538, thread_component_14451095[0]);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
        iter_14625232(threads_14610974, makeNimstrLit("li.thread"), seq_iterator_14611225, HEX3Aanonymous_14615343);
      framePtr = F.prev;

      
    }

  var F={procname:"threads.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
  framePtr = F;
    F.line = 33;
    refresh_before_14535535(c_14530625, HEX3Aanonymous_14530874);
    match_14716840(c_14530625, ({get: HEX7C_14600216(access_14585835(c_14530625).get, HEX3Aanonymous_14600001), set: HEX3Aanonymous_14600260, id: HEX26_13760256(access_14585835(c_14530625).id, [makeNimstrLit("threads")])}), HEX3Aanonymous_14610771);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_14924495(c_14924621) {
    function HEX3Aanonymous_14940001(arg0_14940003) {
      var result_14940009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 46;
        var arg1_14940010 = arg0_14940003.article;
        if ((arg1_14940010 == null)) {
        F.line = 46;
        arg1_14940010 = new_14940207();
        }
        
        F.line = 69;
        result_14940009 = arg1_14940010;
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_14940009;

    }
    function HEX3Aanonymous_14940495(dataHEX60gensym14925543_14940498, dataHEX60gensym14925543_14940498_Idx, val3HEX60gensym14925544_14945007) {
        function HEX3Aanonymous_14950001(arg0_14950003, value_14950009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 46;
            var arg1_14950010 = arg0_14950003.article;
            if ((arg1_14950010 == null)) {
            F.line = 46;
            arg1_14950010 = new_14940207();
            }
            
            F.line = 122;
            arg1_14950010 = value_14950009;
            F.line = 134;
            arg0_14950003.article = arg1_14950010;
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym14925545_14945008 = access_14925388(c_14924621).get(dataHEX60gensym14925543_14940498[dataHEX60gensym14925543_14940498_Idx]);
        F.line = 183;
        var set2HEX60gensym14925546_14950224 = HEX3Aanonymous_14950001;
        F.line = 184;
        set2HEX60gensym14925546_14950224(val2HEX60gensym14925545_14945008, val3HEX60gensym14925544_14945007);
        F.line = 185;
        access_14925388(c_14924621).set(dataHEX60gensym14925543_14940498, dataHEX60gensym14925543_14940498_Idx, val2HEX60gensym14925545_14945008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_14965001(arg0_14965003) {
      var result_14965009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 46;
        var arg1_14965010 = nimCopy(null, arg0_14965003.subject, NTI112);
        F.line = 69;
        result_14965009 = nimCopy(null, arg1_14965010, NTI112);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_14965009;

    }
    function HEX3Aanonymous_14965275(dataHEX60gensym14950280_14965278, dataHEX60gensym14950280_14965278_Idx, val3HEX60gensym14950281_14970007) {
        function HEX3Aanonymous_14975001(arg0_14975003, value_14975009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 46;
            var arg1_14975010 = nimCopy(null, arg0_14975003.subject, NTI112);
            F.line = 122;
            arg1_14975010 = nimCopy(null, value_14975009, NTI112);
            F.line = 134;
            arg0_14975003.subject = nimCopy(null, arg1_14975010, NTI112);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym14950282_14970008 = ({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_14940001), set: HEX3Aanonymous_14940495, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).get(dataHEX60gensym14950280_14965278[dataHEX60gensym14950280_14965278_Idx]);
        F.line = 183;
        var set2HEX60gensym14950283_14975214 = HEX3Aanonymous_14975001;
        F.line = 184;
        set2HEX60gensym14950283_14975214(val2HEX60gensym14950282_14970008, val3HEX60gensym14950281_14970007);
        F.line = 185;
        ({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_14940001), set: HEX3Aanonymous_14940495, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).set(dataHEX60gensym14950280_14965278, dataHEX60gensym14950280_14965278_Idx, val2HEX60gensym14950282_14970008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15055001(arg0_15055003) {
      var result_15055009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 47;
        var arg1_15055010 = arg0_15055003.article;
        if ((arg1_15055010 == null)) {
        F.line = 47;
        arg1_15055010 = new_14940207();
        }
        
        F.line = 69;
        result_15055009 = arg1_15055010;
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_15055009;

    }
    function HEX3Aanonymous_15055239(dataHEX60gensym15041789_15055242, dataHEX60gensym15041789_15055242_Idx, val3HEX60gensym15041790_15060007) {
        function HEX3Aanonymous_15065001(arg0_15065003, value_15065009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 47;
            var arg1_15065010 = arg0_15065003.article;
            if ((arg1_15065010 == null)) {
            F.line = 47;
            arg1_15065010 = new_14940207();
            }
            
            F.line = 122;
            arg1_15065010 = value_15065009;
            F.line = 134;
            arg0_15065003.article = arg1_15065010;
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym15041791_15060008 = access_14925388(c_14924621).get(dataHEX60gensym15041789_15055242[dataHEX60gensym15041789_15055242_Idx]);
        F.line = 183;
        var set2HEX60gensym15041792_15065224 = HEX3Aanonymous_15065001;
        F.line = 184;
        set2HEX60gensym15041792_15065224(val2HEX60gensym15041791_15060008, val3HEX60gensym15041790_15060007);
        F.line = 185;
        access_14925388(c_14924621).set(dataHEX60gensym15041789_15055242, dataHEX60gensym15041789_15055242_Idx, val2HEX60gensym15041791_15060008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15080001(arg0_15080003) {
      var result_15080009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 47;
        var arg1_15080010 = nimCopy(null, arg0_15080003.from_h, NTI112);
        F.line = 69;
        result_15080009 = nimCopy(null, arg1_15080010, NTI112);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_15080009;

    }
    function HEX3Aanonymous_15080229(dataHEX60gensym15065265_15080232, dataHEX60gensym15065265_15080232_Idx, val3HEX60gensym15065266_15085007) {
        function HEX3Aanonymous_15090001(arg0_15090003, value_15090009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 47;
            var arg1_15090010 = nimCopy(null, arg0_15090003.from_h, NTI112);
            F.line = 122;
            arg1_15090010 = nimCopy(null, value_15090009, NTI112);
            F.line = 134;
            arg0_15090003.from_h = nimCopy(null, arg1_15090010, NTI112);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym15065267_15085008 = ({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15055001), set: HEX3Aanonymous_15055239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).get(dataHEX60gensym15065265_15080232[dataHEX60gensym15065265_15080232_Idx]);
        F.line = 183;
        var set2HEX60gensym15065268_15090214 = HEX3Aanonymous_15090001;
        F.line = 184;
        set2HEX60gensym15065268_15090214(val2HEX60gensym15065267_15085008, val3HEX60gensym15065266_15085007);
        F.line = 185;
        ({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15055001), set: HEX3Aanonymous_15055239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).set(dataHEX60gensym15065265_15080232, dataHEX60gensym15065265_15080232_Idx, val2HEX60gensym15065267_15085008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15105001(arg0_15105003) {
      var result_15105009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 48;
        var arg1_15105010 = arg0_15105003.article;
        if ((arg1_15105010 == null)) {
        F.line = 48;
        arg1_15105010 = new_14940207();
        }
        
        F.line = 69;
        result_15105009 = arg1_15105010;
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_15105009;

    }
    function HEX3Aanonymous_15105239(dataHEX60gensym15093864_15105242, dataHEX60gensym15093864_15105242_Idx, val3HEX60gensym15093865_15110007) {
        function HEX3Aanonymous_15115001(arg0_15115003, value_15115009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 48;
            var arg1_15115010 = arg0_15115003.article;
            if ((arg1_15115010 == null)) {
            F.line = 48;
            arg1_15115010 = new_14940207();
            }
            
            F.line = 122;
            arg1_15115010 = value_15115009;
            F.line = 134;
            arg0_15115003.article = arg1_15115010;
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym15093866_15110008 = access_14925388(c_14924621).get(dataHEX60gensym15093864_15105242[dataHEX60gensym15093864_15105242_Idx]);
        F.line = 183;
        var set2HEX60gensym15093867_15115224 = HEX3Aanonymous_15115001;
        F.line = 184;
        set2HEX60gensym15093867_15115224(val2HEX60gensym15093866_15110008, val3HEX60gensym15093865_15110007);
        F.line = 185;
        access_14925388(c_14924621).set(dataHEX60gensym15093864_15105242, dataHEX60gensym15093864_15105242_Idx, val2HEX60gensym15093866_15110008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15130001(arg0_15130003) {
      var result_15130009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 48;
        var arg1_15130010 = nimCopy(null, arg0_15130003.date, NTI112);
        F.line = 69;
        result_15130009 = nimCopy(null, arg1_15130010, NTI112);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_15130009;

    }
    function HEX3Aanonymous_15130229(dataHEX60gensym15115265_15130232, dataHEX60gensym15115265_15130232_Idx, val3HEX60gensym15115266_15135007) {
        function HEX3Aanonymous_15140001(arg0_15140003, value_15140009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 48;
            var arg1_15140010 = nimCopy(null, arg0_15140003.date, NTI112);
            F.line = 122;
            arg1_15140010 = nimCopy(null, value_15140009, NTI112);
            F.line = 134;
            arg0_15140003.date = nimCopy(null, arg1_15140010, NTI112);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym15115267_15135008 = ({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15105001), set: HEX3Aanonymous_15105239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).get(dataHEX60gensym15115265_15130232[dataHEX60gensym15115265_15130232_Idx]);
        F.line = 183;
        var set2HEX60gensym15115268_15140214 = HEX3Aanonymous_15140001;
        F.line = 184;
        set2HEX60gensym15115268_15140214(val2HEX60gensym15115267_15135008, val3HEX60gensym15115266_15135007);
        F.line = 185;
        ({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15105001), set: HEX3Aanonymous_15105239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).set(dataHEX60gensym15115265_15130232, dataHEX60gensym15115265_15130232_Idx, val2HEX60gensym15115267_15135008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15155001(arg0_15155003) {
      var result_15155009 = null;

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 50;
        var arg1_15155010 = nimCopy(null, arg0_15155003.children, NTI14196146);
        F.line = 69;
        result_15155009 = nimCopy(null, arg1_15155010, NTI14196146);
        break BeforeRet;
      } while (false);
      framePtr = F.prev;

      return result_15155009;

    }
    function HEX3Aanonymous_15155275(dataHEX60gensym15143864_15155278, dataHEX60gensym15143864_15155278_Idx, val3HEX60gensym15143865_15160007) {
        function HEX3Aanonymous_15165001(arg0_15165003, value_15165009) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
          framePtr = F;
            F.line = 50;
            var arg1_15165010 = nimCopy(null, arg0_15165003.children, NTI14196146);
            F.line = 122;
            arg1_15165010 = nimCopy(null, value_15165009, NTI14196146);
            F.line = 134;
            arg0_15165003.children = nimCopy(null, arg1_15165010, NTI14196146);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 182;
        var val2HEX60gensym15143866_15160008 = access_14925388(c_14924621).get(dataHEX60gensym15143864_15155278[dataHEX60gensym15143864_15155278_Idx]);
        F.line = 183;
        var set2HEX60gensym15143867_15165214 = HEX3Aanonymous_15165001;
        F.line = 184;
        set2HEX60gensym15143867_15165214(val2HEX60gensym15143866_15160008, val3HEX60gensym15143865_15160007);
        F.line = 185;
        access_14925388(c_14924621).set(dataHEX60gensym15143864_15155278, dataHEX60gensym15143864_15155278_Idx, val2HEX60gensym15143866_15160008);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_15230703(thread_15230710) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
      framePtr = F;
        F.line = 51;
        mount_14617803(thread_15230710, thread_component_14451095[0]);
      framePtr = F.prev;

      
    }

  var F={procname:"threads.:anonymous",prev:framePtr,filename:"threads.nim",line:0};
  framePtr = F;
    F.line = 46;
    refresh_15040960(match_14977481(c_14924621, makeNimstrLit("a.subject"), ({get: HEX7C_14965216(({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_14940001), set: HEX3Aanonymous_14940495, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).get, HEX3Aanonymous_14965001), set: HEX3Aanonymous_14965275, id: HEX26_13760256(({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_14940001), set: HEX3Aanonymous_14940495, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).id, [makeNimstrLit("subject")])}), null), set_text_13685072(), false, false);
    F.line = 47;
    refresh_15040960(match_14977481(c_14924621, makeNimstrLit("a.from"), ({get: HEX7C_14965216(({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15055001), set: HEX3Aanonymous_15055239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).get, HEX3Aanonymous_15080001), set: HEX3Aanonymous_15080229, id: HEX26_13760256(({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15055001), set: HEX3Aanonymous_15055239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).id, [makeNimstrLit("from_h")])}), null), set_text_13685072(), false, false);
    F.line = 48;
    refresh_15040960(match_14977481(c_14924621, makeNimstrLit(".date"), ({get: HEX7C_14965216(({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15105001), set: HEX3Aanonymous_15105239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).get, HEX3Aanonymous_15130001), set: HEX3Aanonymous_15130229, id: HEX26_13760256(({get: HEX7C_14940436(access_14925388(c_14924621).get, HEX3Aanonymous_15105001), set: HEX3Aanonymous_15105239, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("article")])}).id, [makeNimstrLit("date")])}), null), set_text_13685072(), false, false);
    iter_15232518(match_15167391(c_14924621, ({get: HEX7C_15155216(access_14925388(c_14924621).get, HEX3Aanonymous_15155001), set: HEX3Aanonymous_15155275, id: HEX26_13760256(access_14925388(c_14924621).id, [makeNimstrLit("children")])}), null), makeNimstrLit("li"), seq_iterator_14611225, HEX3Aanonymous_15230703);
  framePtr = F.prev;

  
}
var template_threads_14530390 = fetch_template_13555001(makeNimstrLit("views/threads.html"), makeNimstrLit("template.threads"), true);
compile_14810602(components_10273124[0], threads_component_14451058, 0, template_threads_14530390, HEX3Aanonymous_14530432, null);
var template_thread_14924453 = fetch_template_13555001(makeNimstrLit("views/threads.html"), makeNimstrLit("template.thread"), true);
compile_15235176(components_10273124[0], thread_component_14451095, 0, template_thread_14924453, HEX3Aanonymous_14924495, null);
function grow_15355016(s_15355021) {
    var Tmp1;

  var F={procname:"grow.grow",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    if ((s_15355021.max <= s_15355021.top)) {
    F.line = 22;
    raiseException({message: (s_15355021.name || []).concat(makeNimstrLit(" stack overflow, depth>") || [],cstrToNimstr((s_15355021.max)+"") || []), parent: null, m_type: NTI10296201, matchLen: 0, matchMax: 0, name: null, trace: null, up: null}, "NPegException");
    }
    
    F.line = 23;
    if (s_15355021.frames === null) s_15355021.frames = [];
               if (s_15355021.frames.length < (Tmp1 = chckRange(mulInt((s_15355021.frames != null ? s_15355021.frames.length : 0), 2), 0, 2147483647), Tmp1)) { for (var i=s_15355021.frames.length;i<Tmp1;++i) s_15355021.frames.push(({ip: 0, si: 0, rp: 0, cp: 0, pp: 0})); }
               else { s_15355021.frames.length = Tmp1; };
  framePtr = F.prev;

  
}
function grow_10535016(s_10535021) {
    var Tmp1;

  var F={procname:"grow.grow",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    if ((s_10535021.max <= s_10535021.top)) {
    F.line = 22;
    raiseException({message: (s_10535021.name || []).concat(makeNimstrLit(" stack overflow, depth>") || [],cstrToNimstr((s_10535021.max)+"") || []), parent: null, m_type: NTI10296201, matchLen: 0, matchMax: 0, name: null, trace: null, up: null}, "NPegException");
    }
    
    F.line = 23;
    if (s_10535021.frames === null) s_10535021.frames = [];
               if (s_10535021.frames.length < (Tmp1 = chckRange(mulInt((s_10535021.frames != null ? s_10535021.frames.length : 0), 2), 0, 2147483647), Tmp1)) { for (var i=s_10535021.frames.length;i<Tmp1;++i) s_10535021.frames.push(0); }
               else { s_10535021.frames.length = Tmp1; };
  framePtr = F.prev;

  
}
function grow_15460016(s_15460021) {
    var Tmp1;

  var F={procname:"grow.grow",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    if ((s_15460021.max <= s_15460021.top)) {
    F.line = 22;
    raiseException({message: (s_15460021.name || []).concat(makeNimstrLit(" stack overflow, depth>") || [],cstrToNimstr((s_15460021.max)+"") || []), parent: null, m_type: NTI10296201, matchLen: 0, matchMax: 0, name: null, trace: null, up: null}, "NPegException");
    }
    
    F.line = 23;
    if (s_15460021.frames === null) s_15460021.frames = [];
               if (s_15460021.frames.length < (Tmp1 = chckRange(mulInt((s_15460021.frames != null ? s_15460021.frames.length : 0), 2), 0, 2147483647), Tmp1)) { for (var i=s_15460021.frames.length;i<Tmp1;++i) s_15460021.frames.push(({cft: 0, name: null, si: 0, ck: 0, sPushed: null})); }
               else { s_15460021.frames.length = Tmp1; };
  framePtr = F.prev;

  
}
function new_seq_11555204(len_11555207) {
  var result_11555209 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_11555209 = new Array(len_11555207); for (var i=0;i<len_11555207;++i) {result_11555209[i]=null;}  framePtr = F.prev;

  return result_11555209;

}
function collect_captures_11550462(caps_11550466) {
              var Tmp4;

  var result_11550468 = null;

  var F={procname:"collectCaptures.collectCaptures",prev:framePtr,filename:"capture.nim",line:0};
  framePtr = F;
    F.line = 78;
    F.line = 569;
    var resultHEX60gensym11550469_11555260 = new_seq_11555204(0);
    L1: do {
      F.line = 570;
      var it_11565214 = null;
      F.line = 184;
      var i_15890194 = 0;
      F.line = 185;
      var l_15890195 = (caps_11550466 != null ? caps_11550466.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_15890194 < l_15890195)) break L3;
            F.line = 570;
            it_11565214 = caps_11550466[chckIndx(i_15890194, 0, (caps_11550466 != null ? caps_11550466.length : 0)+0-1)-0];
              if ((it_11565214.ck == 0)) Tmp4 = true; else {                Tmp4 = (it_11565214.ck == 1);              }            if (Tmp4) {
            F.line = 571;
            if (resultHEX60gensym11550469_11555260 != null) { resultHEX60gensym11550469_11555260.push(it_11565214); } else { resultHEX60gensym11550469_11555260 = [it_11565214]; };
            }
            
            F.line = 188;
            i_15890194 = addInt(i_15890194, 1);
            if (!(((caps_11550466 != null ? caps_11550466.length : 0) == l_15890195))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_11550468 = nimCopy(null, resultHEX60gensym11550469_11555260, NTI11555208);
  framePtr = F.prev;

  return result_11550468;

}
function init_stack_10525038(name_10525041, len_10525042, max_10525043) {
  var result_10525055 = ({name: null, top: 0, max: 0, frames: null});

  var F={procname:"initStack.initStack",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    F.line = 16;
    result_10525055.name = nimCopy(null, name_10525041, NTI112);
    F.line = 17;
    if (result_10525055.frames === null) result_10525055.frames = [];
               if (result_10525055.frames.length < chckRange(len_10525042, 0, 2147483647)) { for (var i=result_10525055.frames.length;i<chckRange(len_10525042, 0, 2147483647);++i) result_10525055.frames.push(0); }
               else { result_10525055.frames.length = chckRange(len_10525042, 0, 2147483647); };
    F.line = 18;
    result_10525055.max = max_10525043;
  framePtr = F.prev;

  return result_10525055;

}
function slice_10510057(s_10510060, i_from_10510061, i_to_10510062) {
  var result_10510063 = null;

  var F={procname:"common.slice",prev:framePtr,filename:"common.nim",line:0};
  framePtr = F;
    F.line = 337;
    var len_10510064 = subInt(i_to_10510062, i_from_10510061);
    F.line = 338;
    (result_10510063 == null ? result_10510063 = mnewString(chckRange(len_10510064, 0, 2147483647)) : result_10510063.length = chckRange(len_10510064, 0, 2147483647));
    L1: do {
      F.line = 339;
      var i_10510072 = 0;
      F.line = 106;
      var i_15890205 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_15890205 < len_10510064)) break L3;
            F.line = 339;
            i_10510072 = i_15890205;
            F.line = 340;
            result_10510063[chckIndx(i_10510072, 0, (result_10510063 != null ? result_10510063.length : 0)+0-1)-0] = s_10510060[chckIndx(addInt(i_10510072, i_from_10510061), 0, (s_10510060 != null ? s_10510060.length : 0)+0-1)-0];
            F.line = 109;
            i_15890205 = addInt(i_15890205, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10510063;

}
function fix_captures_15570035(s_15570039, cap_stack_15570051, fm_15570052) {
              var Tmp6;
              var Tmp7;

  var result_15570054 = null;

  var F={procname:"fixCaptures.fixCaptures",prev:framePtr,filename:"capture.nim",line:0};
  framePtr = F;
    if (!((0 < cap_stack_15570051.top))) {
    F.line = 31;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/capture.nim(31, 10) `\x0A0 < capStack.top` "));
    }
    
      if (!((0 < cap_stack_15570051.top))) {
      F.line = 32;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(36, 10) `capStack.top > 0` "));
      }
      
    if (!((cap_stack_15570051.frames[chckIndx(subInt(cap_stack_15570051.top, 1), 0, (cap_stack_15570051.frames != null ? cap_stack_15570051.frames.length : 0)+0-1)-0].cft == 1))) {
    F.line = 32;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/capture.nim(32, 10) `capStack.peek.cft == cftClose` "));
    }
    
    F.line = 38;
    var i_from_15610402 = 0;
    if ((fm_15570052 == 1)) {
    F.line = 41;
    var i_15610408 = subInt(cap_stack_15570051.top, 1);
    F.line = 42;
    var depth_15610410 = 0;
    L1: do {
      F.line = 43;
        L2: while (true) {
        if (!true) break L2;
            if (!((i_15610408 < cap_stack_15570051.top))) {
            F.line = 40;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(40, 10) `i < capStack.top` "));
            }
            
          if ((cap_stack_15570051.frames[chckIndx(i_15610408, 0, (cap_stack_15570051.frames != null ? cap_stack_15570051.frames.length : 0)+0-1)-0].cft == 1)) {
          F.line = 44;
          depth_15610410 = addInt(depth_15610410, 1);
          }
          else {
            F.line = 44;
          depth_15610410 = subInt(depth_15610410, 1);
          }
          
          if ((depth_15610410 == 0)) {
          F.line = 45;
          break L1;
          }
          
          F.line = 46;
          i_15610408 = subInt(i_15610408, 1);
        }
    } while(false);
    F.line = 47;
    i_from_15610402 = i_15610408;
    }
    
    F.line = 51;
    var stack_15625238 = [init_stack_10525038(makeNimstrLit("captures"), 8, 2147483647)];
    L3: do {
      F.line = 52;
      var i_15625244 = 0;
      F.line = 106;
      var i_15890202 = i_from_15610402;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_15890202 < cap_stack_15570051.top)) break L5;
            F.line = 52;
            i_15625244 = i_15890202;
            F.line = 53;
            if (!((i_15625244 < cap_stack_15570051.top))) {
            F.line = 40;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(40, 10) `i < capStack.top` "));
            }
            
            var c_15640205 = nimCopy(null, cap_stack_15570051.frames[chckIndx(i_15625244, 0, (cap_stack_15570051.frames != null ? cap_stack_15570051.frames.length : 0)+0-1)-0], NTI15325224);
            if ((c_15640205.cft == 0)) {
            if (((stack_15625238[0].frames != null ? stack_15625238[0].frames.length : 0) <= stack_15625238[0].top)) {
            F.line = 26;
            grow_10535016(stack_15625238[0]);
            }
            
            F.line = 55;
            stack_15625238[0].frames[chckIndx(stack_15625238[0].top, 0, (stack_15625238[0].frames != null ? stack_15625238[0].frames.length : 0)+0-1)-0] = (result_15570054 != null ? result_15570054.length : 0);
            F.line = 55;
            stack_15625238[0].top = addInt(stack_15625238[0].top, 1);
            F.line = 56;
            if (result_15570054 != null) { result_15570054.push({ck: c_15640205.ck, si: c_15640205.si, name: nimCopy(null, c_15640205.name, NTI112), s: null, len: 0}); } else { result_15570054 = [{ck: c_15640205.ck, si: c_15640205.si, name: nimCopy(null, c_15640205.name, NTI112), s: null, len: 0}]; };
            }
            else {
              F.line = 58;
              if (!((0 < stack_15625238[0].top))) {
              F.line = 31;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(31, 10) `stack.top > 0` "));
              }
              
              F.line = 32;
              stack_15625238[0].top = subInt(stack_15625238[0].top, 1);
              var i2_15670211 = stack_15625238[0].frames[chckIndx(stack_15625238[0].top, 0, (stack_15625238[0].frames != null ? stack_15625238[0].frames.length : 0)+0-1)-0];
              if (!((result_15570054[chckIndx(i2_15670211, 0, (result_15570054 != null ? result_15570054.length : 0)+0-1)-0].ck == c_15640205.ck))) {
              F.line = 59;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/capture.nim(59, 14) `result[i2].ck == c.ck` "));
              }
              
              if ((ConstSet757[c_15640205.ck] != undefined)) {
              var Tmp6 = result_15570054[chckIndx(i2_15670211, 0, (result_15570054 != null ? result_15570054.length : 0)+0-1)-0];
              if (ConstSet758[Tmp6.ck]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'ck\' of type \'Capture\'")); }
              F.line = 63;
              if (eqStrings(c_15640205.sPushed, [])) {
              Tmp7 = slice_10510057(s_15570039, result_15570054[chckIndx(i2_15670211, 0, (result_15570054 != null ? result_15570054.length : 0)+0-1)-0].si, c_15640205.si);
              }
              else {
              Tmp7 = c_15640205.sPushed;
              }
              
              Tmp6.s = nimCopy(null, Tmp7, NTI112);
              }
              
              F.line = 69;
              result_15570054[chckIndx(i2_15670211, 0, (result_15570054 != null ? result_15570054.length : 0)+0-1)-0].len = subInt(subInt((result_15570054 != null ? result_15570054.length : 0), i2_15670211), 1);
            }
            
            F.line = 109;
            i_15890202 = addInt(i_15890202, 1);
          }
      } while(false);
    } while(false);
    if (!((stack_15625238[0].top == 0))) {
    F.line = 70;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/capture.nim(70, 10) `stack.top == 0` "));
    }
    
    F.line = 74;
    cap_stack_15570051.top = i_from_15610402;
  framePtr = F.prev;

  return result_15570054;

}
function fnHEX60gensym15321376_15325290(ms_np_15325295, s_np_15325296, route_15325297, route_15325297_Idx) {
              function fn_15690254(capture_15690259, ms_np_15690264, route_15690266, route_15690266_Idx) {
                  var Tmp1;

                var result_15690267 = false;

                var F={procname:"fn`gensym15321376.fn",prev:framePtr,filename:"codegen.nim",line:0};
                framePtr = F;
                  F.line = 230;
                  result_15690267 = true;
                  F.line = 39;
                  route_15690266[route_15690266_Idx].route = 1;
                  F.line = 40;
                  var Tmp1 = capture_15690259[chckIndx(1, 0, (capture_15690259 != null ? capture_15690259.length : 0)+0-1)-0];
                  if (ConstSet759[Tmp1.ck]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'ck\' of type \'Capture\'")); }
                  route_15690266[route_15690266_Idx].group_name = nimCopy(null, Tmp1.s, NTI112);
                framePtr = F.prev;

                return result_15690267;

              }
              function fn_15815078(capture_15815083, ms_np_15815088, route_15815090, route_15815090_Idx) {
                var result_15815091 = false;

                var F={procname:"fn`gensym15321376.fn",prev:framePtr,filename:"codegen.nim",line:0};
                framePtr = F;
                  F.line = 230;
                  result_15815091 = true;
                  F.line = 42;
                  route_15815090[route_15815090_Idx].route = 0;
                framePtr = F.prev;

                return result_15815091;

              }
      var Tmp5;

  var result_15325298 = ({ok: false, matchLen: 0, matchMax: 0, cs: null});

  var F={procname:"fn`gensym15321376.fn`gensym15321376",prev:framePtr,filename:"codegen.nim",line:0};
  framePtr = F;
    F.line = 411;
    var ip_np_15325303 = chckRange(ms_np_15325295.ip, 0, 33);
    F.line = 412;
    var si_np_15325304 = ms_np_15325295.si;
    F.line = 413;
    var simax_np_15325305 = ms_np_15325295.simax;
    L1: do {
      F.line = 401;
        L2: while (true) {
        if (!true) break L2;
          F.line = 393;
          switch (ip_np_15325303) {
          case 0:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 35))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 1;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 3;
            }
            
            break;
          case 1:
            F.line = 205;
            ip_np_15325303 = 3;
            break;
          case 2:
            F.line = 296;
            ip_np_15325303 = 3;
            break;
          case 3:
            if (((ms_np_15325295.backStack.frames != null ? ms_np_15325295.backStack.frames.length : 0) <= ms_np_15325295.backStack.top)) {
            F.line = 26;
            grow_15355016(ms_np_15325295.backStack);
            }
            
            F.line = 184;
            nimCopy(ms_np_15325295.backStack.frames[chckIndx(ms_np_15325295.backStack.top, 0, (ms_np_15325295.backStack.frames != null ? ms_np_15325295.backStack.frames.length : 0)+0-1)-0], {ip: 6, si: addInt(si_np_15325304, 0), rp: ms_np_15325295.retStack.top, cp: ms_np_15325295.capStack.top, pp: ms_np_15325295.precStack.top}, NTI10702204);
            F.line = 184;
            ms_np_15325295.backStack.top = addInt(ms_np_15325295.backStack.top, 1);
            F.line = 182;
            ip_np_15325303 = 4;
            break;
          case 4:
            if (((ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0) <= ms_np_15325295.retStack.top)) {
            F.line = 26;
            grow_10535016(ms_np_15325295.retStack);
            }
            
            F.line = 199;
            ms_np_15325295.retStack.frames[chckIndx(ms_np_15325295.retStack.top, 0, (ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0)+0-1)-0] = addInt(ip_np_15325303, 1);
            F.line = 199;
            ms_np_15325295.retStack.top = addInt(ms_np_15325295.retStack.top, 1);
            F.line = 197;
            ip_np_15325303 = 8;
            break;
          case 5:
            F.line = 191;
            if (!((0 < ms_np_15325295.backStack.top))) {
            F.line = 31;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(31, 10) `ms_NP.backStack.top > 0` "));
            }
            
            F.line = 32;
            ms_np_15325295.backStack.top = subInt(ms_np_15325295.backStack.top, 1);
            ms_np_15325295.backStack.frames[chckIndx(ms_np_15325295.backStack.top, 0, (ms_np_15325295.backStack.frames != null ? ms_np_15325295.backStack.frames.length : 0)+0-1)-0];
            F.line = 189;
            ip_np_15325303 = 7;
            break;
          case 6:
            F.line = 205;
            ip_np_15325303 = 27;
            break;
          case 7:
            if ((0 < ms_np_15325295.retStack.top)) {
            F.line = 279;
            if (!((0 < ms_np_15325295.retStack.top))) {
            F.line = 31;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(31, 10) `ms_NP.retStack.top > 0` "));
            }
            
            F.line = 32;
            ms_np_15325295.retStack.top = subInt(ms_np_15325295.retStack.top, 1);
            ip_np_15325303 = chckRange(ms_np_15325295.retStack.frames[chckIndx(ms_np_15325295.retStack.top, 0, (ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0)+0-1)-0], 0, 33);
            }
            else {
              F.line = 282;
              result_15325298.ok = true;
              F.line = 283;
              simax_np_15325305 = nimMax(simax_np_15325305, si_np_15325304);
              F.line = 284;
              break L1;
            }
            
            break;
          case 8:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 47))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 9;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 33;
            }
            
            break;
          case 9:
            if (((ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0) <= ms_np_15325295.capStack.top)) {
            F.line = 26;
            grow_15460016(ms_np_15325295.capStack);
            }
            
            F.line = 215;
            nimCopy(ms_np_15325295.capStack.frames[chckIndx(ms_np_15325295.capStack.top, 0, (ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0)+0-1)-0], {cft: 0, si: addInt(si_np_15325304, -1), ck: 1, name: [], sPushed: null}, NTI15325224);
            F.line = 215;
            ms_np_15325295.capStack.top = addInt(ms_np_15325295.capStack.top, 1);
            F.line = 213;
            ip_np_15325303 = 10;
            break;
          case 10:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 103))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 11;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 33;
            }
            
            break;
          case 11:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 114))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 12;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 33;
            }
            
            break;
          case 12:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 111))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 13;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 33;
            }
            
            break;
          case 13:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 117))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 14;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 33;
            }
            
            break;
          case 14:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 112))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 15;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 33;
            }
            
            break;
          case 15:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 47))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 16;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 33;
            }
            
            break;
          case 16:
            if (((ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0) <= ms_np_15325295.capStack.top)) {
            F.line = 26;
            grow_15460016(ms_np_15325295.capStack);
            }
            
            F.line = 215;
            nimCopy(ms_np_15325295.capStack.frames[chckIndx(ms_np_15325295.capStack.top, 0, (ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0)+0-1)-0], {cft: 0, si: addInt(si_np_15325304, 0), ck: 0, name: [], sPushed: null}, NTI15325224);
            F.line = 215;
            ms_np_15325295.capStack.top = addInt(ms_np_15325295.capStack.top, 1);
            F.line = 213;
            ip_np_15325303 = 17;
            break;
          case 17:
            if (((ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0) <= ms_np_15325295.retStack.top)) {
            F.line = 26;
            grow_10535016(ms_np_15325295.retStack);
            }
            
            F.line = 199;
            ms_np_15325295.retStack.frames[chckIndx(ms_np_15325295.retStack.top, 0, (ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0)+0-1)-0] = addInt(ip_np_15325303, 1);
            F.line = 199;
            ms_np_15325295.retStack.top = addInt(ms_np_15325295.retStack.top, 1);
            F.line = 197;
            ip_np_15325303 = 24;
            break;
          case 18:
            if (((ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0) <= ms_np_15325295.capStack.top)) {
            F.line = 26;
            grow_15460016(ms_np_15325295.capStack);
            }
            
            F.line = 248;
            nimCopy(ms_np_15325295.capStack.frames[chckIndx(ms_np_15325295.capStack.top, 0, (ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0)+0-1)-0], {cft: 1, si: si_np_15325304, ck: 0, name: null, sPushed: null}, NTI15325224);
            F.line = 248;
            ms_np_15325295.capStack.top = addInt(ms_np_15325295.capStack.top, 1);
            F.line = 246;
            ip_np_15325303 = 19;
            break;
          case 19:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 47))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 20;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 22;
            }
            
            break;
          case 20:
            F.line = 205;
            ip_np_15325303 = 22;
            break;
          case 21:
            F.line = 296;
            ip_np_15325303 = 22;
            break;
          case 22:
            if (((ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0) <= ms_np_15325295.capStack.top)) {
            F.line = 26;
            grow_15460016(ms_np_15325295.capStack);
            }
            
            F.line = 227;
            nimCopy(ms_np_15325295.capStack.frames[chckIndx(ms_np_15325295.capStack.top, 0, (ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0)+0-1)-0], {cft: 1, si: si_np_15325304, ck: 1, name: null, sPushed: null}, NTI15325224);
            F.line = 227;
            ms_np_15325295.capStack.top = addInt(ms_np_15325295.capStack.top, 1);
            F.line = 228;
            var captureHEX60gensym15321358_15690253 = collect_captures_11550462(fix_captures_15570035(s_np_15325296, ms_np_15325295.capStack, 1));
            if (fn_15690254(captureHEX60gensym15321358_15690253, ms_np_15325295, route_15325297, route_15325297_Idx)) {
            F.line = 225;
            ip_np_15325303 = 23;
            }
            else {
              F.line = 225;
              ip_np_15325303 = 33;
            }
            
            break;
          case 23:
            if ((0 < ms_np_15325295.retStack.top)) {
            F.line = 279;
            if (!((0 < ms_np_15325295.retStack.top))) {
            F.line = 31;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(31, 10) `ms_NP.retStack.top > 0` "));
            }
            
            F.line = 32;
            ms_np_15325295.retStack.top = subInt(ms_np_15325295.retStack.top, 1);
            ip_np_15325303 = chckRange(ms_np_15325295.retStack.frames[chckIndx(ms_np_15325295.retStack.top, 0, (ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0)+0-1)-0], 0, 33);
            }
            else {
              F.line = 282;
              result_15325298.ok = true;
              F.line = 283;
              simax_np_15325305 = nimMax(simax_np_15325305, si_np_15325304);
              F.line = 284;
              break L1;
            }
            
            break;
          case 24:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (ConstSet760[s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0]] != undefined))) {
            F.line = 166;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 163;
            ip_np_15325303 = 25;
            }
            else {
              F.line = 163;
              ip_np_15325303 = 33;
            }
            
            break;
          case 25:
            L3: do {
              F.line = 175;
                L4: while (true) {
                if (!((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (ConstSet761[s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0]] != undefined))) break L4;
                  F.line = 176;
                  si_np_15325304 = addInt(si_np_15325304, 1);
                }
            } while(false);
            F.line = 173;
            ip_np_15325303 = 26;
            break;
          case 26:
            if ((0 < ms_np_15325295.retStack.top)) {
            F.line = 279;
            if (!((0 < ms_np_15325295.retStack.top))) {
            F.line = 31;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(31, 10) `ms_NP.retStack.top > 0` "));
            }
            
            F.line = 32;
            ms_np_15325295.retStack.top = subInt(ms_np_15325295.retStack.top, 1);
            ip_np_15325303 = chckRange(ms_np_15325295.retStack.frames[chckIndx(ms_np_15325295.retStack.top, 0, (ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0)+0-1)-0], 0, 33);
            }
            else {
              F.line = 282;
              result_15325298.ok = true;
              F.line = 283;
              simax_np_15325305 = nimMax(simax_np_15325305, si_np_15325304);
              F.line = 284;
              break L1;
            }
            
            break;
          case 27:
            if (((ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0) <= ms_np_15325295.capStack.top)) {
            F.line = 26;
            grow_15460016(ms_np_15325295.capStack);
            }
            
            F.line = 215;
            nimCopy(ms_np_15325295.capStack.frames[chckIndx(ms_np_15325295.capStack.top, 0, (ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0)+0-1)-0], {cft: 0, si: addInt(si_np_15325304, 0), ck: 1, name: [], sPushed: null}, NTI15325224);
            F.line = 215;
            ms_np_15325295.capStack.top = addInt(ms_np_15325295.capStack.top, 1);
            F.line = 213;
            ip_np_15325303 = 28;
            break;
          case 28:
            if (((si_np_15325304 < (s_np_15325296 != null ? s_np_15325296.length : 0)) && (s_np_15325296[chckIndx(si_np_15325304, 0, (s_np_15325296 != null ? s_np_15325296.length : 0)+0-1)-0] == 47))) {
            F.line = 146;
            si_np_15325304 = addInt(si_np_15325304, 1);
            F.line = 143;
            ip_np_15325303 = 29;
            }
            else {
              F.line = 143;
              ip_np_15325303 = 31;
            }
            
            break;
          case 29:
            F.line = 205;
            ip_np_15325303 = 31;
            break;
          case 30:
            F.line = 296;
            ip_np_15325303 = 31;
            break;
          case 31:
            if (((ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0) <= ms_np_15325295.capStack.top)) {
            F.line = 26;
            grow_15460016(ms_np_15325295.capStack);
            }
            
            F.line = 227;
            nimCopy(ms_np_15325295.capStack.frames[chckIndx(ms_np_15325295.capStack.top, 0, (ms_np_15325295.capStack.frames != null ? ms_np_15325295.capStack.frames.length : 0)+0-1)-0], {cft: 1, si: si_np_15325304, ck: 1, name: null, sPushed: null}, NTI15325224);
            F.line = 227;
            ms_np_15325295.capStack.top = addInt(ms_np_15325295.capStack.top, 1);
            F.line = 228;
            var captureHEX60gensym15321371_15815077 = collect_captures_11550462(fix_captures_15570035(s_np_15325296, ms_np_15325295.capStack, 1));
            if (fn_15815078(captureHEX60gensym15321371_15815077, ms_np_15325295, route_15325297, route_15325297_Idx)) {
            F.line = 225;
            ip_np_15325303 = 32;
            }
            else {
              F.line = 225;
              ip_np_15325303 = 33;
            }
            
            break;
          case 32:
            if ((0 < ms_np_15325295.retStack.top)) {
            F.line = 279;
            if (!((0 < ms_np_15325295.retStack.top))) {
            F.line = 31;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(31, 10) `ms_NP.retStack.top > 0` "));
            }
            
            F.line = 32;
            ms_np_15325295.retStack.top = subInt(ms_np_15325295.retStack.top, 1);
            ip_np_15325303 = chckRange(ms_np_15325295.retStack.frames[chckIndx(ms_np_15325295.retStack.top, 0, (ms_np_15325295.retStack.frames != null ? ms_np_15325295.retStack.frames.length : 0)+0-1)-0], 0, 33);
            }
            else {
              F.line = 282;
              result_15325298.ok = true;
              F.line = 283;
              simax_np_15325305 = nimMax(simax_np_15325305, si_np_15325304);
              F.line = 284;
              break L1;
            }
            
            break;
          case 33:
            F.line = 329;
            simax_np_15325305 = nimMax(simax_np_15325305, si_np_15325304);
            if ((0 < ms_np_15325295.backStack.top)) {
            F.line = 332;
            if (!((0 < ms_np_15325295.backStack.top))) {
            F.line = 31;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.nimble/pkgs/npeg-0.22.2/npeg/stack.nim(31, 10) `ms_NP.backStack.top > 0` "));
            }
            
            F.line = 32;
            ms_np_15325295.backStack.top = subInt(ms_np_15325295.backStack.top, 1);
            var tHEX60gensym15321372_15880211 = nimCopy(null, ms_np_15325295.backStack.frames[chckIndx(ms_np_15325295.backStack.top, 0, (ms_np_15325295.backStack.frames != null ? ms_np_15325295.backStack.frames.length : 0)+0-1)-0], NTI10702204);
            F.line = 333;
            var __15880212 = {Field0: tHEX60gensym15321372_15880211.ip, Field1: tHEX60gensym15321372_15880211.si, Field2: tHEX60gensym15321372_15880211.rp, Field3: tHEX60gensym15321372_15880211.cp, Field4: tHEX60gensym15321372_15880211.pp};
            F.line = 333;
            ip_np_15325303 = chckRange(__15880212["Field0"], 0, 33);
            F.line = 333;
            si_np_15325304 = __15880212["Field1"];
            F.line = 333;
            ms_np_15325295.retStack.top = __15880212["Field2"];
            F.line = 333;
            ms_np_15325295.capStack.top = __15880212["Field3"];
            F.line = 333;
            ms_np_15325295.precStack.top = __15880212["Field4"];
            }
            else {
              F.line = 336;
              break L1;
            }
            
            break;
          }
        }
    } while(false);
    F.line = 401;
    ms_np_15325295.ip = ip_np_15325303;
    F.line = 401;
    ms_np_15325295.si = si_np_15325304;
    F.line = 401;
    ms_np_15325295.simax = simax_np_15325305;
    F.line = 439;
    result_15325298.matchLen = ms_np_15325295.si;
    F.line = 440;
    result_15325298.matchMax = ms_np_15325295.simax;
      if (!result_15325298.ok) Tmp5 = false; else {        Tmp5 = (0 < ms_np_15325295.capStack.top);      }    if (Tmp5) {
    F.line = 442;
    result_15325298.cs = nimCopy(null, fix_captures_15570035(s_np_15325296, ms_np_15325295.capStack, 0), NTI11550428);
    }
    
  framePtr = F.prev;

  return result_15325298;

}
var route_parser_15890104 = nimCopy(null, {fn: fnHEX60gensym15321376_15325290}, NTI15325204);
async function init_comp_16511395(set_component_16511403, node_16511405, creator_16511407) {
  var result_16511409 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var n_16511431 = (await node_16511405);
    F.line = 22;
    set_component_16511403(creator_16511407(n_16511431));
    F.line = 131;
    result_16511409 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16511409;

}
function declare_16511356(registry_16511359, component_16511362, component_16511362_Idx, node_16511364, creator_16511366) {
    function HEX3Aanonymous_16511367(c_16511373) {
      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 25;
        component_16511362[component_16511362_Idx] = c_16511373;
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_16511388() {
      var result_16511393 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 26;
        result_16511393 = init_comp_16511395(set_component_16511387, node_16511364, creator_16511366);
      framePtr = F.prev;

      return result_16511393;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 25;
    var set_component_16511387 = HEX3Aanonymous_16511367;
    F.line = 26;
    if (registry_16511359.Field0 != null) { registry_16511359.Field0.push(HEX3Aanonymous_16511388); } else { registry_16511359.Field0 = [HEX3Aanonymous_16511388]; };
  framePtr = F.prev;

  
}
function id_type_selector_16269579() {
    function HEX3Aanonymous_16269591(data_16269593) {
      var result_16269594 = null;

      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 303;
        result_16269594 = data_16269593;
      framePtr = F.prev;

      return result_16269594;

    }
    function HEX3Aanonymous_16269608(data_16269611, data_16269611_Idx, value_16269612) {
      var F={procname:"idTypeSelector.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 304;
        data_16269611[data_16269611_Idx] = value_16269612;
      framePtr = F.prev;

      
    }

  var result_16269583 = null;

  var F={procname:"idTypeSelector.idTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 302;
    result_16269583 = {get: HEX3Aanonymous_16269591, set: HEX3Aanonymous_16269608, id: []};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16269583;

}
function id_multi_type_selector_16510228(equal_16510234) {
  var result_16510236 = ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null});

  var F={procname:"idMultiTypeSelector.idMultiTypeSelector",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 308;
    nimCopy(result_16510236, {kind: 3, eql: equal_16510234, obj: id_type_selector_16269579(), simple: null, serial: null, compare: null}, NTI15900245);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16510236;

}
function create_16510203(config_16510209, equal_16510213) {
  var result_16510222 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 398;
    result_16510222 = {iter: false, convert: id_multi_type_selector_16510228(equal_16510213), config: config_16510209, m_type: NTI16510217, selector: null, refresh: null, cmatches: null, mount: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16510222;

}
function new_16510312() {
  var result_16510316 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_16510401 = null;
    F.line = 851;
    r_16510401 = ({cmatches: null, config: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), original_node: null, node: null, data: null});
    F.line = 852;
    result_16510316 = r_16510401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16510316;

}
function add_16295218(x_16295223, x_16295223_Idx, y_16295225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_16295231 = (x_16295223[x_16295223_Idx] != null ? x_16295223[x_16295223_Idx].length : 0);
    F.line = 1209;
    if (x_16295223[x_16295223_Idx] === null) x_16295223[x_16295223_Idx] = [];
               if (x_16295223[x_16295223_Idx].length < (Tmp1 = chckRange(addInt(xl_16295231, (y_16295225 != null ? y_16295225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_16295223[x_16295223_Idx].length;i<Tmp1;++i) x_16295223[x_16295223_Idx].push(null); }
               else { x_16295223[x_16295223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_16295256 = 0;
      F.line = 66;
      var colontmp__16511558 = 0;
      F.line = 1210;
      colontmp__16511558 = (y_16295225 != null ? (y_16295225.length-1) : -1);
      F.line = 77;
      var res_16511559 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_16511559 <= colontmp__16511558)) break L4;
            F.line = 1210;
            i_16295256 = res_16511559;
            F.line = 1210;
            x_16295223[x_16295223_Idx][chckIndx(addInt(xl_16295231, i_16295256), 0, (x_16295223[x_16295223_Idx] != null ? x_16295223[x_16295223_Idx].length : 0)+0-1)-0] = y_16295225[chckIndx(i_16295256, 0, (y_16295225 != null ? y_16295225.length : 0)+0-1)-0];
            F.line = 80;
            res_16511559 = addInt(res_16511559, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_16274555(cfg_16274560, node_16274561) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_16274564 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_16274564 = nimCopy(null, [], NTI16274579);
    F.line = 620;
    if (eqStrings(cfg_16274560.selector, [])) {
    Tmp1 = [node_16274561];
    }
    else {
    Tmp1 = node_16274561.querySelectorAll(toJSStr(cfg_16274560.selector));
    }
    
    var matched_nodes_16274593 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_16274593 != null ? matched_nodes_16274593.length : 0) == 0)) {
    F.line = 622;
    var selector_16274599 = nimCopy(null, cfg_16274560.selector, NTI112);
    F.line = 623;
    var fmt_res_16274600 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_16274600[0] != null) { fmt_res_16274600[0] = (fmt_res_16274600[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_16274600[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_16274600, 0, selector_16274599, []);
    F.line = 623;
    if (fmt_res_16274600[0] != null) { fmt_res_16274600[0] = (fmt_res_16274600[0]).concat(makeNimstrLit("\'")); } else { fmt_res_16274600[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_16274600[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_16280008 = null;
      F.line = 184;
      var i_16511554 = 0;
      F.line = 185;
      var l_16511555 = (matched_nodes_16274593 != null ? matched_nodes_16274593.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_16511554 < l_16511555)) break L4;
            F.line = 625;
            matched_node_16280008 = matched_nodes_16274593[chckIndx(i_16511554, 0, (matched_nodes_16274593 != null ? matched_nodes_16274593.length : 0)+0-1)-0];
            F.line = 626;
            var match_16280016 = {refresh: nimCopy(null, cfg_16274560.refresh, NTI15900473), iter: cfg_16274560.iter, node: matched_node_16280008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_16280016.node = matched_node_16280008;
            if (match_16280016.iter) {
            var Tmp5 = match_16280016;
            if (ConstSet762[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_16274560;
            if (ConstSet763[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI15900366);
            var Tmp7 = match_16280016;
            if (ConstSet764[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_16280008).createComment(toJSStr(cstrToNimstr(((matched_node_16280008).outerHTML))));
            var Tmp8 = match_16280016;
            if (ConstSet765[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_16274560.mount;
            var Tmp9 = match_16280016;
            if (ConstSet766[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_16274560.cmatches, NTI15900478);
            var Tmp10 = match_16280016;
            if (ConstSet767[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI16285029);
            F.line = 637;
            var Tmp11 = match_16280016;
            if (ConstSet768[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_16280008.parentNode.replaceChild(Tmp11.anchor, matched_node_16280008);
            }
            else {
              var Tmp12 = match_16280016;
              if (ConstSet769[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_16274560;
              if (ConstSet770[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_16280016;
              if (ConstSet771[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_16280016;
                if (ConstSet772[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_16280016;
              if (ConstSet773[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_16274560;
              if (ConstSet774[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI15900245);
              var Tmp18 = match_16280016;
              if (ConstSet775[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI16285056);
              var Tmp19 = match_16280016;
              if (ConstSet776[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_16280016;
              if (ConstSet777[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_16274560.mount == null))) {
              var Tmp21 = match_16280016;
              if (ConstSet778[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_16274560.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_16295214 = null;
                  F.line = 184;
                  var i_16511551 = 0;
                  F.line = 185;
                  var l_16511552 = (cfg_16274560.cmatches != null ? cfg_16274560.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_16511551 < l_16511552)) break L24;
                        F.line = 652;
                        submatch_16295214 = cfg_16274560.cmatches[chckIndx(i_16511551, 0, (cfg_16274560.cmatches != null ? cfg_16274560.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_16280016;
                        if (ConstSet779[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_16295218(Tmp25, "matches", submatch_16295214.compile(matched_node_16280008));
                        F.line = 188;
                        i_16511551 = addInt(i_16511551, 1);
                        if (!(((cfg_16274560.cmatches != null ? cfg_16274560.cmatches.length : 0) == l_16511552))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_16274564 != null) { result_16274564.push(match_16280016); } else { result_16274564 = [match_16280016]; };
            F.line = 188;
            i_16511554 = addInt(i_16511554, 1);
            if (!(((matched_nodes_16274593 != null ? matched_nodes_16274593.length : 0) == l_16511555))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_16274564;

}
function compile_16504935(node_16504940, configurator_16504942, equal_16504946) {
  var result_16504948 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_16504940 == null)))) {
    F.line = 664;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(664, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 665;
    var cfg_16510305 = create_16510203(configurator_16504942, equal_16504946);
    F.line = 666;
    cfg_16510305.config(cfg_16510305);
    F.line = 668;
    result_16504948 = new_16510312();
    F.line = 669;
    result_16504948.config = configurator_16504942;
    F.line = 670;
    nimCopy(result_16504948.convert, id_multi_type_selector_16510228(equal_16504946), NTI15900245);
    F.line = 671;
    result_16504948.original_node = node_16504940;
    F.line = 672;
    result_16504948.node = node_16504940.cloneNode(true);
    F.line = 673;
    result_16504948.cmatches = nimCopy(null, compile_16274555(cfg_16510305, result_16504948.node), NTI16274562);
  framePtr = F.prev;

  return result_16504948;

}
function refresh_16065538(c_16065543, refresh_16065545, before_16065546, after_16065547, reads_16065548) {
    var Tmp1;
      var Tmp2;

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (c_16065543.iter) {
    F.line = 511;
    var Tmp1 = c_16065543;
    if (ConstSet780[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    switch (Tmp1.iterate.kind) {
    case 0:
      F.line = 513;
      var fmt_res_16065550 = mnewString(0);
      F.line = 513;
      if (fmt_res_16065550 != null) { fmt_res_16065550 = (fmt_res_16065550).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates")); } else { fmt_res_16065550 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates"); };
      F.line = 513;
      raiseException({message: nimCopy(null, fmt_res_16065550, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 1:
      F.line = 515;
      var fmt_res_16075002 = mnewString(0);
      F.line = 515;
      if (fmt_res_16075002 != null) { fmt_res_16075002 = (fmt_res_16075002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates")); } else { fmt_res_16075002 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates"); };
      F.line = 515;
      raiseException({message: nimCopy(null, fmt_res_16075002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 2:
      break;
    }
    }
    else {
      F.line = 519;
      var Tmp2 = c_16065543;
      if (ConstSet781[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      switch (Tmp2.convert.kind) {
      case 0:
        F.line = 521;
        var fmt_res_16085003 = mnewString(0);
        F.line = 521;
        if (fmt_res_16085003 != null) { fmt_res_16085003 = (fmt_res_16085003).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates")); } else { fmt_res_16085003 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates"); };
        F.line = 521;
        raiseException({message: nimCopy(null, fmt_res_16085003, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 1:
        F.line = 523;
        var fmt_res_16095002 = mnewString(0);
        F.line = 523;
        if (fmt_res_16095002 != null) { fmt_res_16095002 = (fmt_res_16095002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates")); } else { fmt_res_16095002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates"); };
        F.line = 523;
        raiseException({message: nimCopy(null, fmt_res_16095002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 2:
        F.line = 525;
        var fmt_res_16105002 = mnewString(0);
        F.line = 525;
        if (fmt_res_16105002 != null) { fmt_res_16105002 = (fmt_res_16105002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates")); } else { fmt_res_16105002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates"); };
        F.line = 525;
        raiseException({message: nimCopy(null, fmt_res_16105002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 3:
        break;
      }
    }
    
    F.line = 528;
    if (c_16065543.refresh != null) { c_16065543.refresh.push({refresh: refresh_16065545, before: before_16065546, after: (after_16065547 || !(before_16065546)), init: false, reads: reads_16065548}); } else { c_16065543.refresh = [{refresh: refresh_16065545, before: before_16065546, after: (after_16065547 || !(before_16065546)), init: false, reads: reads_16065548}]; };
  framePtr = F.prev;

  
}
function add_15955218(x_15955223, x_15955223_Idx, y_15955225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_15955231 = (x_15955223[x_15955223_Idx] != null ? x_15955223[x_15955223_Idx].length : 0);
    F.line = 1209;
    if (x_15955223[x_15955223_Idx] === null) x_15955223[x_15955223_Idx] = [];
               if (x_15955223[x_15955223_Idx].length < (Tmp1 = chckRange(addInt(xl_15955231, (y_15955225 != null ? y_15955225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_15955223[x_15955223_Idx].length;i<Tmp1;++i) x_15955223[x_15955223_Idx].push(null); }
               else { x_15955223[x_15955223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_15955256 = 0;
      F.line = 66;
      var colontmp__16511606 = 0;
      F.line = 1210;
      colontmp__16511606 = (y_15955225 != null ? (y_15955225.length-1) : -1);
      F.line = 77;
      var res_16511607 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_16511607 <= colontmp__16511606)) break L4;
            F.line = 1210;
            i_15955256 = res_16511607;
            F.line = 1210;
            x_15955223[x_15955223_Idx][chckIndx(addInt(xl_15955231, i_15955256), 0, (x_15955223[x_15955223_Idx] != null ? x_15955223[x_15955223_Idx].length : 0)+0-1)-0] = y_15955225[chckIndx(i_15955256, 0, (y_15955225 != null ? y_15955225.length : 0)+0-1)-0];
            F.line = 80;
            res_16511607 = addInt(res_16511607, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_15932400(cfg_15932405, node_15932406) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_15932470 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_15932470 = nimCopy(null, [], NTI15932485);
    F.line = 620;
    if (eqStrings(cfg_15932405.selector, [])) {
    Tmp1 = [node_15932406];
    }
    else {
    Tmp1 = node_15932406.querySelectorAll(toJSStr(cfg_15932405.selector));
    }
    
    var matched_nodes_15932499 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_15932499 != null ? matched_nodes_15932499.length : 0) == 0)) {
    F.line = 622;
    var selector_15932505 = nimCopy(null, cfg_15932405.selector, NTI112);
    F.line = 623;
    var fmt_res_15932506 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_15932506[0] != null) { fmt_res_15932506[0] = (fmt_res_15932506[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_15932506[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_15932506, 0, selector_15932505, []);
    F.line = 623;
    if (fmt_res_15932506[0] != null) { fmt_res_15932506[0] = (fmt_res_15932506[0]).concat(makeNimstrLit("\'")); } else { fmt_res_15932506[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_15932506[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_15940008 = null;
      F.line = 184;
      var i_16511602 = 0;
      F.line = 185;
      var l_16511603 = (matched_nodes_15932499 != null ? matched_nodes_15932499.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_16511602 < l_16511603)) break L4;
            F.line = 625;
            matched_node_15940008 = matched_nodes_15932499[chckIndx(i_16511602, 0, (matched_nodes_15932499 != null ? matched_nodes_15932499.length : 0)+0-1)-0];
            F.line = 626;
            var match_15940016 = {refresh: nimCopy(null, cfg_15932405.refresh, NTI15927079), iter: cfg_15932405.iter, node: matched_node_15940008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_15940016.node = matched_node_15940008;
            if (match_15940016.iter) {
            var Tmp5 = match_15940016;
            if (ConstSet782[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_15932405;
            if (ConstSet783[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI15927194);
            var Tmp7 = match_15940016;
            if (ConstSet784[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_15940008).createComment(toJSStr(cstrToNimstr(((matched_node_15940008).outerHTML))));
            var Tmp8 = match_15940016;
            if (ConstSet785[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_15932405.mount;
            var Tmp9 = match_15940016;
            if (ConstSet786[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_15932405.cmatches, NTI15927118);
            var Tmp10 = match_15940016;
            if (ConstSet787[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI15945029);
            F.line = 637;
            var Tmp11 = match_15940016;
            if (ConstSet788[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_15940008.parentNode.replaceChild(Tmp11.anchor, matched_node_15940008);
            }
            else {
              var Tmp12 = match_15940016;
              if (ConstSet789[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_15932405;
              if (ConstSet790[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_15940016;
              if (ConstSet791[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_15940016;
                if (ConstSet792[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_15940016;
              if (ConstSet793[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_15932405;
              if (ConstSet794[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI15927152);
              var Tmp18 = match_15940016;
              if (ConstSet795[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI15945056);
              var Tmp19 = match_15940016;
              if (ConstSet796[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_15940016;
              if (ConstSet797[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_15932405.mount == null))) {
              var Tmp21 = match_15940016;
              if (ConstSet798[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_15932405.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_15955214 = null;
                  F.line = 184;
                  var i_16511599 = 0;
                  F.line = 185;
                  var l_16511600 = (cfg_15932405.cmatches != null ? cfg_15932405.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_16511599 < l_16511600)) break L24;
                        F.line = 652;
                        submatch_15955214 = cfg_15932405.cmatches[chckIndx(i_16511599, 0, (cfg_15932405.cmatches != null ? cfg_15932405.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_15940016;
                        if (ConstSet799[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_15955218(Tmp25, "matches", submatch_15955214.compile(matched_node_15940008));
                        F.line = 188;
                        i_16511599 = addInt(i_16511599, 1);
                        if (!(((cfg_15932405.cmatches != null ? cfg_15932405.cmatches.length : 0) == l_16511600))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_15932470 != null) { result_15932470.push(match_15940016); } else { result_15932470 = [match_15940016]; };
            F.line = 188;
            i_16511602 = addInt(i_16511602, 1);
            if (!(((matched_nodes_15932499 != null ? matched_nodes_15932499.length : 0) == l_16511603))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_15932470;

}
function sub_15995394(ts_15995399, val_15995401, val_15995401_Idx, set_val_15995403, update_15995404) {
    function HEX3Aanonymous_15995417(new_value_15995419, changed_path_15995421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_15995399.set(val_15995401, val_15995401_Idx, new_value_15995419);
        F.line = 360;
        var new_paths_15995423 = null;
        L1: do {
          F.line = 361;
          var p_15995430 = null;
          F.line = 184;
          var i_16511653 = 0;
          F.line = 185;
          var l_16511654 = (changed_path_15995421 != null ? changed_path_15995421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511653 < l_16511654)) break L3;
                F.line = 361;
                p_15995430 = changed_path_15995421[chckIndx(i_16511653, 0, (changed_path_15995421 != null ? changed_path_15995421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_15995423 != null) { new_paths_15995423.push(HEX26_13760256(ts_15995399.id, p_15995430)); } else { new_paths_15995423 = [HEX26_13760256(ts_15995399.id, p_15995430)]; };
                F.line = 188;
                i_16511653 = addInt(i_16511653, 1);
                if (!(((changed_path_15995421 != null ? changed_path_15995421.length : 0) == l_16511654))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_15995403 == null))) {
        F.line = 364;
        set_val_15995403(val_15995401[val_15995401_Idx], new_paths_15995423);
        }
        else {
        if (!((update_15995404 == null))) {
        F.line = 367;
        update_15995404({paths: nimCopy(null, new_paths_15995423, NTI15995422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_15995406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_15995403 == null) && (update_15995404 == null))) {
    F.line = 357;
    result_15995406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_15995406 = HEX3Aanonymous_15995417;
  } while (false);
  framePtr = F.prev;

  return result_15995406;

}
function compile_15995586(cfgs_15995591, node_15995592) {
  var result_15995595 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_15995595[0] = nimCopy(null, [], NTI15995610);
    L1: do {
      F.line = 658;
      var cfg_15995617 = null;
      F.line = 184;
      var i_16511659 = 0;
      F.line = 185;
      var l_16511660 = (cfgs_15995591 != null ? cfgs_15995591.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_16511659 < l_16511660)) break L3;
            F.line = 658;
            cfg_15995617 = cfgs_15995591[chckIndx(i_16511659, 0, (cfgs_15995591 != null ? cfgs_15995591.length : 0)+0-1)-0];
            F.line = 659;
            add_15955218(result_15995595, 0, cfg_15995617.compile(node_15995592));
            F.line = 188;
            i_16511659 = addInt(i_16511659, 1);
            if (!(((cfgs_15995591 != null ? cfgs_15995591.length : 0) == l_16511660))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_15995595[0];

}
function create_iter_item_15995520(match_15995525, parent_node_15995526) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_15995528 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_15995533 = null;
    F.line = 683;
    var node_15995534 = null;
      var Tmp1 = match_15995525;
      if (ConstSet813[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_15995525;
    if (ConstSet814[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_15995533 = Tmp2.mount_template.clone();
    F.line = 686;
    node_15995534 = comp_15995533.node();
    }
    else {
      F.line = 688;
      node_15995534 = match_15995525.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_15995525;
    if (ConstSet815[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_15995528 = {serial: 0, mount: comp_15995533, node: node_15995534, matches: compile_15995586(Tmp3.match_templates, node_15995534), skip: false};
    F.line = 694;
    var Tmp4 = match_15995525;
    if (ConstSet816[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_15995526.insertBefore(node_15995534, Tmp4.anchor);
  framePtr = F.prev;

  return result_15995528;

}
function detach_16015493(iter_item_16015497, parent_node_16015498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_16015498.removeChild(iter_item_16015497.node);
  framePtr = F.prev;

  
}
function pop_16015243(s_16015248, s_16015248_Idx) {
  var result_16015249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_16015255 = subInt((s_16015248[s_16015248_Idx] != null ? s_16015248[s_16015248_Idx].length : 0), 1);
    F.line = 1784;
    result_16015249 = s_16015248[s_16015248_Idx][chckIndx(l_16015255, 0, (s_16015248[s_16015248_Idx] != null ? s_16015248[s_16015248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_16015248[s_16015248_Idx] === null) s_16015248[s_16015248_Idx] = [];
               if (s_16015248[s_16015248_Idx].length < chckRange(l_16015255, 0, 2147483647)) { for (var i=s_16015248[s_16015248_Idx].length;i<chckRange(l_16015255, 0, 2147483647);++i) s_16015248[s_16015248_Idx].push(null); }
               else { s_16015248[s_16015248_Idx].length = chckRange(l_16015255, 0, 2147483647); };
  framePtr = F.prev;

  return result_16015249;

}
function update_do_15966880(match_15966885, init_val_15966886, set_val_15966888, refresh_list_15966889) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_15975261() {
            var result_15975263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_15975263 = item_15975252;
            framePtr = F.prev;

            return result_15975263;

          }
          var Tmp16;
            function HEX3Aanonymous_15975281(new_value_15975283, path_15975300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_15975301 = mnewString(0);
                F.line = 747;
                if (fmt_res_15975301 != null) { fmt_res_15975301 = (fmt_res_15975301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_15975301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_15975301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15985017(new_value_15985019, path_15985036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_15985037 = mnewString(0);
                F.line = 754;
                if (fmt_res_15985037 != null) { fmt_res_15985037 = (fmt_res_15985037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_15985037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_15985037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_15995050(refresh_list_15995052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_15966550(match_15966885, val_15975201[0], set_val_15966888, refresh_list_15995052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_16015524() {
        var result_16015526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_16015526 = converted_val_16015515;
        framePtr = F.prev;

        return result_16015526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_16015606(refresh_list_16015608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_15966550(match_15966885, val_15975201[0], set_val_15966888, refresh_list_16015608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_15966888 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_15975201 = [init_val_15966886];
    if (match_15966885.iter) {
    F.line = 720;
    var i_15975203 = 0;
    F.line = 721;
    var Tmp1 = match_15966885;
    if (ConstSet800[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_15975206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_15975207 = null;
    F.line = 723;
    var it_simple_15975212 = null;
    F.line = 724;
    var it_serial_15975217 = null;
    F.line = 725;
    var it_select_15975225 = null;
    F.line = 726;
    var Tmp2 = match_15966885;
    if (ConstSet801[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_15966885;
      if (ConstSet803[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet802[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_15975212 = Tmp4.simple(val_15975201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_15966885;
      if (ConstSet805[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet804[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_15975217 = Tmp6.serial(val_15975201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_15966885;
      if (ConstSet807[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet806[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_15975225 = Tmp8.selector(val_15975201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_15966885;
            if (ConstSet808[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15975203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_15966885;
          if (ConstSet809[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_15975203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_15975250 = [Tmp11];
          F.line = 736;
          var changed_15975251 = is_changed_10240207(refresh_list_15966889);
          F.line = 737;
          var item_15975252 = null;
          F.line = 738;
          var accessor_15975277 = {get: HEX3Aanonymous_15975261, set: null, m_type: NTI15927052};
          F.line = 741;
          var Tmp16 = match_15966885;
          if (ConstSet810[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_15975280 = it_simple_15975212();
            if ((it_15975280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_15975252 = it_15975280["Field1"];
            F.line = 746;
            accessor_15975277.set = HEX3Aanonymous_15975281;
            break;
          case 1:
            F.line = 750;
            var it_15985016 = it_serial_15975217(serial_15975250, 0);
            if ((it_15985016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_15975252 = it_15985016["Field1"];
            F.line = 753;
            accessor_15975277.set = HEX3Aanonymous_15985017;
            break;
          case 2:
            F.line = 757;
            var it_15995015 = it_select_15975225();
            if ((it_15995015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_15975252 = it_15995015.get(val_15975201[0]);
            F.line = 760;
            accessor_15975277.set = sub_15995394(it_15995015, val_15975201, 0, set_val_15966888, HEX3Aanonymous_15995050);
            F.line = 762;
            sub_list_15975207 = walk_10245019(refresh_list_15966889, it_15995015.id);
            F.line = 763;
            changed_15975251 = is_changed_10240207(sub_list_15975207);
            break;
          }
          F.line = 766;
          var iter_item_15995503 = null;
          F.line = 767;
          var inited_15995504 = false;
            var Tmp17 = match_15966885;
            if (ConstSet811[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_15975203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_15966885;
          if (ConstSet812[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_15995503 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_15975203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_15995504 = true;
          F.line = 773;
          changed_15975251 = true;
          }
          else {
            F.line = 775;
            iter_item_15995503 = create_iter_item_15995520(match_15966885, parent_node_15975206);
            F.line = 776;
            var Tmp21 = match_15966885;
            if (ConstSet817[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_15995503); } else { Tmp22 = [iter_item_15995503]; };
            F.line = 777;
            inited_15995504 = false;
            if (!((serial_15975250[0] == iter_item_15995503.serial))) {
            F.line = 779;
            changed_15975251 = true;
            }
            
          }
          
          F.line = 782;
          var e_15995687 = {get: accessor_15975277.get, set: accessor_15975277.set, node: iter_item_15995503.node, data: item_15975252, init: !(inited_15995504), before: true, skip: iter_item_15995503.skip, m_type: NTI15927048};
          L23: do {
            F.line = 790;
            var refresh_16005214 = null;
            F.line = 184;
            var i_16511620 = 0;
            F.line = 185;
            var l_16511621 = (match_15966885.refresh != null ? match_15966885.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_16511620 < l_16511621)) break L25;
                  F.line = 790;
                  refresh_16005214 = match_15966885.refresh[chckIndx(i_16511620, 0, (match_15966885.refresh != null ? match_15966885.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_16005215 = refresh_16005214.before;
                    if (!exec_16005215) Tmp26 = false; else {                      var Tmp27 = match_15966885;
                      if (ConstSet818[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_16005215 = is_changed_10270456(sub_list_15975207, refresh_16005214.reads);
                  }
                  
                    if (exec_16005215) Tmp28 = true; else {                      if (!!(inited_15995504)) Tmp29 = false; else {                        Tmp29 = refresh_16005214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_15995687.data = item_15975252;
                  F.line = 796;
                  refresh_16005214.refresh(e_15995687);
                  F.line = 797;
                  iter_item_15995503.skip = e_15995687.skip;
                  }
                  
                  F.line = 188;
                  i_16511620 = addInt(i_16511620, 1);
                  if (!(((match_15966885.refresh != null ? match_15966885.refresh.length : 0) == l_16511621))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_15995503.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_15995503.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_15995503.mount.update(item_15975252, accessor_15975277.set, sub_list_15975207);
          }
          
          if (!(iter_item_15995503.skip)) {
          L31: do {
            F.line = 805;
            var submatch_16015214 = null;
            F.line = 184;
            var i_16511625 = 0;
            F.line = 185;
            var l_16511626 = (iter_item_15995503.matches != null ? iter_item_15995503.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_16511625 < l_16511626)) break L33;
                  F.line = 805;
                  submatch_16015214 = iter_item_15995503.matches[chckIndx(i_16511625, 0, (iter_item_15995503.matches != null ? iter_item_15995503.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_16015214.update(item_15975252, accessor_15975277.set, sub_list_15975207);
                  F.line = 188;
                  i_16511625 = addInt(i_16511625, 1);
                  if (!(((iter_item_15995503.matches != null ? iter_item_15995503.matches.length : 0) == l_16511626))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_15995687 = {get: accessor_15975277.get, set: accessor_15975277.set, node: iter_item_15995503.node, data: item_15975252, init: !(inited_15995504), before: false, skip: iter_item_15995503.skip, m_type: NTI15927048};
          L34: do {
            F.line = 817;
            var refresh_16015225 = null;
            F.line = 184;
            var i_16511630 = 0;
            F.line = 185;
            var l_16511631 = (match_15966885.refresh != null ? match_15966885.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_16511630 < l_16511631)) break L36;
                  F.line = 817;
                  refresh_16015225 = match_15966885.refresh[chckIndx(i_16511630, 0, (match_15966885.refresh != null ? match_15966885.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_16015226 = refresh_16015225.after;
                    if (!exec_16015226) Tmp37 = false; else {                      var Tmp38 = match_15966885;
                      if (ConstSet819[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_16015226 = is_changed_10270456(sub_list_15975207, refresh_16015225.reads);
                  }
                  
                  if (exec_16015226) {
                  F.line = 822;
                  e_15995687.data = item_15975252;
                  F.line = 823;
                  refresh_16015225.refresh(e_15995687);
                  F.line = 824;
                  iter_item_15995503.skip = e_15995687.skip;
                  }
                  
                  F.line = 188;
                  i_16511630 = addInt(i_16511630, 1);
                  if (!(((match_15966885.refresh != null ? match_15966885.refresh.length : 0) == l_16511631))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_15975203 = addInt(i_15975203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_15966885;
          if (ConstSet820[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_15975203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_15966885;
          if (ConstSet821[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_16015493(pop_16015243(Tmp43, "items"), parent_node_15975206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_16015512 = is_changed_10240207(refresh_list_15966889);
      F.line = 833;
      var sub_list_16015513 = null;
      F.line = 834;
      var node_16015514 = match_15966885.node;
      F.line = 835;
      var converted_val_16015515 = null;
      F.line = 836;
      var accessor_16015540 = {get: HEX3Aanonymous_16015524, set: null, m_type: NTI15927052};
      F.line = 840;
      var Tmp44 = match_15966885;
      if (ConstSet822[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_15966885;
        if (ConstSet824[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet823[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_16015515 = Tmp46.simple(val_15975201[0]);
        F.line = 843;
        changed_16015512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_15966885;
        if (ConstSet825[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_16015548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_15966885;
        if (ConstSet827[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet826[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_16015515 = Tmp49.serial(val_15975201[0], serial_16015548, 0);
          var Tmp50 = match_15966885;
          if (ConstSet828[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_16015548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_16015512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_15966885;
        if (ConstSet830[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet829[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_15966885;
        if (ConstSet831[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_16015560 = Tmp52.compare(val_15975201[0], Tmp53.value);
        F.line = 853;
        converted_val_16015515 = res_16015560.Field0;
        var Tmp54 = match_15966885;
        if (ConstSet832[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = res_16015560.Field0;
        if (res_16015560.Field1) {
        F.line = 856;
        changed_16015512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_15966885;
        if (ConstSet834[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet833[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_16015566 = Tmp56.obj;
        F.line = 860;
        converted_val_16015515 = obj_16015566.get(val_15975201[0]);
        F.line = 861;
        sub_list_16015513 = walk_10245019(refresh_list_15966889, obj_16015566.id);
        F.line = 862;
        changed_16015512 = is_changed_10240207(sub_list_16015513);
          if (!changed_16015512) Tmp57 = false; else {            var Tmp58 = match_15966885;
            if (ConstSet836[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet835[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_15966885;
        if (ConstSet838[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet837[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_15966885;
        if (ConstSet839[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_16015512 = !(Tmp61.eql(converted_val_16015515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_16015540.set = sub_15995394(obj_16015566, val_15975201, 0, set_val_15966888, HEX3Aanonymous_16015606);
        break;
      }
        var Tmp64 = match_15966885;
        if (ConstSet840[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_15966885;
          if (ConstSet841[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_15966885;
      if (ConstSet842[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_15966885;
      if (ConstSet843[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_15966885;
      if (ConstSet844[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_16015514.parentNode.replaceChild(Tmp68.mount.node(), node_16015514);
      }
      
      F.line = 875;
      var Tmp69 = match_15966885;
      if (ConstSet845[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_16015991 = Tmp69.inited;
      if (!(inited_16015991)) {
      F.line = 876;
      changed_16015512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_15966885;
      if (ConstSet846[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_16015998 = {get: accessor_16015540.get, set: accessor_16015540.set, node: node_16015514, data: converted_val_16015515, init: !(inited_16015991), before: changed_16015512, skip: Tmp70.skip, m_type: NTI15927048};
      L71: do {
        F.line = 885;
        var refresh_16016005 = null;
        F.line = 184;
        var i_16511637 = 0;
        F.line = 185;
        var l_16511638 = (match_15966885.refresh != null ? match_15966885.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_16511637 < l_16511638)) break L73;
              F.line = 885;
              refresh_16016005 = match_15966885.refresh[chckIndx(i_16511637, 0, (match_15966885.refresh != null ? match_15966885.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_16016006 = changed_16015512;
                if (!exec_16016006) Tmp74 = false; else {                  var Tmp75 = match_15966885;
                  if (ConstSet847[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_16016006 = is_changed_10270456(sub_list_16015513, refresh_16016005.reads);
              }
              
              F.line = 891;
              if (!refresh_16016005.before) Tmp77 = false; else {                Tmp77 = (exec_16016006 || !(inited_16015991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_16016005.init) Tmp78 = false; else {                  Tmp78 = !(inited_16015991);                }                Tmp76 = Tmp78;              }              exec_16016006 = Tmp76;
              if (exec_16016006) {
              F.line = 893;
              e_16015998.data = converted_val_16015515;
              F.line = 894;
              refresh_16016005.refresh(e_16015998);
              var Tmp79 = match_15966885;
              if (ConstSet848[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_16015998.skip;
              }
              
              F.line = 188;
              i_16511637 = addInt(i_16511637, 1);
              if (!(((match_15966885.refresh != null ? match_15966885.refresh.length : 0) == l_16511638))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_16015991)) {
      var Tmp80 = match_15966885;
      if (ConstSet849[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_16015512) Tmp82 = false; else {          var Tmp83 = match_15966885;
          if (ConstSet850[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_15966885;
          if (ConstSet851[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_15966885;
      if (ConstSet852[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_16015514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_15966885;
      if (ConstSet853[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_16015515, accessor_16015540.set, sub_list_16015513);
      }
      
        if (!changed_16015512) Tmp87 = false; else {          var Tmp88 = match_15966885;
          if (ConstSet854[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_16016044 = null;
        F.line = 182;
        var colontmp__16511641 = null;
        F.line = 906;
        var Tmp90 = match_15966885;
        if (ConstSet855[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__16511641 = Tmp90.matches;
        F.line = 184;
        var i_16511642 = 0;
        F.line = 185;
        var l_16511643 = (colontmp__16511641 != null ? colontmp__16511641.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_16511642 < l_16511643)) break L92;
              F.line = 906;
              submatch_16016044 = colontmp__16511641[chckIndx(i_16511642, 0, (colontmp__16511641 != null ? colontmp__16511641.length : 0)+0-1)-0];
              F.line = 907;
              submatch_16016044.update(converted_val_16015515, accessor_16015540.set, sub_list_16015513);
              F.line = 188;
              i_16511642 = addInt(i_16511642, 1);
              if (!(((colontmp__16511641 != null ? colontmp__16511641.length : 0) == l_16511643))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_16015512) {
      F.line = 910;
      var Tmp93 = match_15966885;
      if (ConstSet856[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_16016051 = {get: accessor_16015540.get, set: accessor_16015540.set, node: node_16015514, data: converted_val_16015515, init: !(inited_16015991), before: false, skip: Tmp93.skip, m_type: NTI15927048};
      L94: do {
        F.line = 918;
        var refresh_16016058 = null;
        F.line = 184;
        var i_16511647 = 0;
        F.line = 185;
        var l_16511648 = (match_15966885.refresh != null ? match_15966885.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_16511647 < l_16511648)) break L96;
              F.line = 918;
              refresh_16016058 = match_15966885.refresh[chckIndx(i_16511647, 0, (match_15966885.refresh != null ? match_15966885.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_16016059 = refresh_16016058.after;
                if (!exec_16016059) Tmp97 = false; else {                  var Tmp98 = match_15966885;
                  if (ConstSet857[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_16016059 = is_changed_10270456(sub_list_16015513, refresh_16016058.reads);
              }
              
              if (exec_16016059) {
              F.line = 923;
              e_16016051.data = converted_val_16015515;
              F.line = 924;
              refresh_16016058.refresh(e_16016051);
              var Tmp99 = match_15966885;
              if (ConstSet858[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_16016051.skip;
              }
              
              F.line = 188;
              i_16511647 = addInt(i_16511647, 1);
              if (!(((match_15966885.refresh != null ? match_15966885.refresh.length : 0) == l_16511648))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_15966550(match_15966555, init_val_15966556, set_val_15966558, refresh_list_15966559) {
    function HEX3Aanonymous_15966560() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_15966880(match_15966555, init_val_15966556, set_val_15966558, refresh_list_15966559);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_16016270 = HEX3Aanonymous_15966560;
    if (!((match_15966555.runner == null))) {
    F.line = 706;
    add_last_13906260(match_15966555.runner.fifo, run_16016270);
    }
    else {
      F.line = 708;
      match_15966555.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_15966555.runner.fifo, run_16016270);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_15966555.runner.fifo))) break L3;
            F.line = 712;
            var run_item_16020054 = pop_first_13950047(match_15966555.runner.fifo);
            F.line = 713;
            run_item_16020054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_15966555.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_15966524(match_15966529) {
    function HEX3Aanonymous_15966536(data_15966538, set_15966543, refresh_list_15966544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_15966550(match_15966529, data_15966538, set_15966543, refresh_list_15966544);
      framePtr = F.prev;

      
    }

  var result_15966531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_15966531 = {update: HEX3Aanonymous_15966536};
  framePtr = F.prev;

  return result_15966531;

}
function as_interface_15931496(config_15931501) {
    function HEX3Aanonymous_15931508(node_15931510) {
      var result_15931516 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_15931516 = nimCopy(null, [], NTI15931531);
        L1: do {
          F.line = 997;
          var comp_match_15965214 = null;
          F.line = 182;
          var colontmp__16511587 = null;
          F.line = 997;
          colontmp__16511587 = compile_15932400(config_15931501, node_15931510);
          F.line = 184;
          var i_16511589 = 0;
          F.line = 185;
          var l_16511590 = (colontmp__16511587 != null ? colontmp__16511587.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511589 < l_16511590)) break L3;
                F.line = 997;
                comp_match_15965214 = colontmp__16511587[chckIndx(i_16511589, 0, (colontmp__16511587 != null ? colontmp__16511587.length : 0)+0-1)-0];
                F.line = 998;
                if (result_15931516 != null) { result_15931516.push(as_interface_15966524(comp_match_15965214)); } else { result_15931516 = [as_interface_15966524(comp_match_15965214)]; };
                F.line = 188;
                i_16511589 = addInt(i_16511589, 1);
                if (!(((colontmp__16511587 != null ? colontmp__16511587.length : 0) == l_16511590))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_15931516;

    }

  var result_15931503 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_15931503 = {compile: HEX3Aanonymous_15931508};
  framePtr = F.prev;

  return result_15931503;

}
function match_15930148(c_15930154, selector_15930155, convert_15930157, actions_15930163) {
  var result_15930165 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 408;
    result_15930165 = {selector: nimCopy(null, selector_15930155, NTI112), refresh: [], mount: null, iter: false, convert: nimCopy(null, convert_15930157, NTI15927152), m_type: NTI15927035, cmatches: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    F.line = 414;
    if (c_15930154.cmatches != null) { c_15930154.cmatches.push(as_interface_15931496(result_15930165)); } else { c_15930154.cmatches = [as_interface_15931496(result_15930165)]; };
    if (!((actions_15930163 == null))) {
    F.line = 416;
    actions_15930163(result_15930165);
    }
    
  framePtr = F.prev;

  return result_15930165;

}
function match_15927517(c_15927523, convert_15927525, actions_15927531) {
  var result_15927533 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 448;
    var type_selector_15927541 = {kind: 3, obj: convert_15927525, simple: null, serial: null, compare: null, eql: null};
    F.line = 451;
    result_15927533 = match_15930148(c_15927523, [], type_selector_15927541, actions_15927531);
  framePtr = F.prev;

  return result_15927533;

}
function HEX7C_15915436(p1_15915443, p2_15915446) {
    function HEX3Aanonymous_15915450(x_15915452) {
      var result_15915453 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_15915453 = p2_15915446(p1_15915443(x_15915452));
      framePtr = F.prev;

      return result_15915453;

    }

  var result_15915449 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_15915449 = HEX3Aanonymous_15915450;
  framePtr = F.prev;

  return result_15915449;

}
function access_15901680(c_15901685) {
    function HEX3Aanonymous_15901695(data_15901697) {
      var result_15901698 = null;

      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 211;
        result_15901698 = data_15901697;
      framePtr = F.prev;

      return result_15901698;

    }
    function HEX3Aanonymous_15901727(data_15901730, data_15901730_Idx, value_15901731) {
      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 212;
        data_15901730[data_15901730_Idx] = value_15901731;
      framePtr = F.prev;

      
    }

  var result_15901687 = null;

  var F={procname:"access.access",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_15901687 = {get: HEX3Aanonymous_15901695, set: HEX3Aanonymous_15901727, id: []};
  framePtr = F.prev;

  return result_15901687;

}
function new_15915207() {
  var result_15915211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_15915401 = null;
    F.line = 851;
    r_15915401 = ({hash: null, route: 0, group_name: null});
    F.line = 852;
    result_15915211 = r_15915401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15915211;

}
function init_stack_15892474(name_15892477, len_15892478, max_15892479) {
  var result_15892483 = ({name: null, top: 0, max: 0, frames: null});

  var F={procname:"initStack.initStack",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    F.line = 16;
    result_15892483.name = nimCopy(null, name_15892477, NTI112);
    F.line = 17;
    if (result_15892483.frames === null) result_15892483.frames = [];
               if (result_15892483.frames.length < chckRange(len_15892478, 0, 2147483647)) { for (var i=result_15892483.frames.length;i<chckRange(len_15892478, 0, 2147483647);++i) result_15892483.frames.push(({cft: 0, name: null, si: 0, ck: 0, sPushed: null})); }
               else { result_15892483.frames.length = chckRange(len_15892478, 0, 2147483647); };
    F.line = 18;
    result_15892483.max = max_15892479;
  framePtr = F.prev;

  return result_15892483;

}
function init_stack_15892505(name_15892508, len_15892509, max_15892510) {
  var result_15892514 = ({name: null, top: 0, max: 0, frames: null});

  var F={procname:"initStack.initStack",prev:framePtr,filename:"stack.nim",line:0};
  framePtr = F;
    F.line = 16;
    result_15892514.name = nimCopy(null, name_15892508, NTI112);
    F.line = 17;
    if (result_15892514.frames === null) result_15892514.frames = [];
               if (result_15892514.frames.length < chckRange(len_15892509, 0, 2147483647)) { for (var i=result_15892514.frames.length;i<chckRange(len_15892509, 0, 2147483647);++i) result_15892514.frames.push(({ip: 0, si: 0, rp: 0, cp: 0, pp: 0})); }
               else { result_15892514.frames.length = chckRange(len_15892509, 0, 2147483647); };
    F.line = 18;
    result_15892514.max = max_15892510;
  framePtr = F.prev;

  return result_15892514;

}
function init_match_state_15892449() {
  var result_15892453 = ({ip: 0, si: 0, simax: 0, refs: ({data: null, counter: 0}), retStack: ({name: null, top: 0, max: 0, frames: null}), capStack: ({name: null, top: 0, max: 0, frames: null}), backStack: ({name: null, top: 0, max: 0, frames: null}), precStack: ({name: null, top: 0, max: 0, frames: null})});

  var F={procname:"initMatchState.initMatchState",prev:framePtr,filename:"codegen.nim",line:0};
  framePtr = F;
    F.line = 66;
    nimCopy(result_15892453, {retStack: init_stack_10525038(makeNimstrLit("return"), 8, npeg_ret_stack_size_10296126), capStack: init_stack_15892474(makeNimstrLit("capture"), 8, 2147483647), backStack: init_stack_15892505(makeNimstrLit("backtrace"), 8, npeg_back_stack_size_10296128), precStack: init_stack_10525038(makeNimstrLit("precedence"), 8, 16), ip: 0, si: 0, simax: 0, refs: ({data: null, counter: 0})}, NTI15325210);
    if (((result_15892453.precStack.frames != null ? result_15892453.precStack.frames.length : 0) <= result_15892453.precStack.top)) {
    F.line = 26;
    grow_10535016(result_15892453.precStack);
    }
    
    F.line = 72;
    result_15892453.precStack.frames[chckIndx(result_15892453.precStack.top, 0, (result_15892453.precStack.frames != null ? result_15892453.precStack.frames.length : 0)+0-1)-0] = 0;
    F.line = 72;
    result_15892453.precStack.top = addInt(result_15892453.precStack.top, 1);
  framePtr = F.prev;

  return result_15892453;

}
function match_15892436(p_15892441, s_15892443, user_data_15892445, user_data_15892445_Idx) {
  var result_15892447 = ({ok: false, matchLen: 0, matchMax: 0, cs: null});

  var F={procname:"match.match",prev:framePtr,filename:"npeg.nim",line:0};
  framePtr = F;
    F.line = 131;
    F.line = 134;
    var ms_15900090 = [init_match_state_15892449()];
    nimCopy(result_15892447, p_15892441.fn(ms_15900090[0], s_15892443, user_data_15892445, user_data_15892445_Idx), NTI11550422);
  framePtr = F.prev;

  return result_15892447;

}
function route_15890207(hash_15890209) {
  var result_15890210 = [null];

  var F={procname:"app.route",prev:framePtr,filename:"app.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 46;
    result_15890210[0] = {hash: nimCopy(null, hash_15890209, NTI112), route: 0, group_name: null};
    if (!(match_15892436(route_parser_15890104, hash_15890209, result_15890210, 0).ok)) {
    F.line = 48;
    result_15890210[0] = {route: 0, hash: null, group_name: null};
    break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_15890210[0];

}
function refresh_16230930(c_16230935, refresh_16230937, before_16230938, after_16230939) {
    function HEX3Aanonymous_16230944(re_16230950) {
      var F={procname:"refresh.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 500;
        refresh_16230937(re_16230950.node, re_16230950.data);
      framePtr = F.prev;

      
    }

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 499;
    if (c_16230935.refresh != null) { c_16230935.refresh.push({refresh: HEX3Aanonymous_16230944, before: before_16230938, after: (after_16230939 || !(before_16230938)), init: false, reads: refresh_all_10270524}); } else { c_16230935.refresh = [{refresh: HEX3Aanonymous_16230944, before: before_16230938, after: (after_16230939 || !(before_16230938)), init: false, reads: refresh_all_10270524}]; };
  framePtr = F.prev;

  
}
function compile_16172350(cfg_16172355, node_16172356) {
    var Tmp1;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
            var Tmp11;
              var Tmp12;
              var Tmp13;
              var Tmp14;
                var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
              var Tmp21;
                        var Tmp25;

  var result_16172406 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 619;
    result_16172406 = nimCopy(null, [], NTI16172421);
    F.line = 620;
    if (eqStrings(cfg_16172355.selector, [])) {
    Tmp1 = [node_16172356];
    }
    else {
    Tmp1 = node_16172356.querySelectorAll(toJSStr(cfg_16172355.selector));
    }
    
    var matched_nodes_16172435 = nimCopy(null, Tmp1, NTI13821817);
    if (((matched_nodes_16172435 != null ? matched_nodes_16172435.length : 0) == 0)) {
    F.line = 622;
    var selector_16172441 = nimCopy(null, cfg_16172355.selector, NTI112);
    F.line = 623;
    var fmt_res_16172442 = [mnewString(0)];
    F.line = 623;
    if (fmt_res_16172442[0] != null) { fmt_res_16172442[0] = (fmt_res_16172442[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_16172442[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 623;
    format_value_10130080(fmt_res_16172442, 0, selector_16172441, []);
    F.line = 623;
    if (fmt_res_16172442[0] != null) { fmt_res_16172442[0] = (fmt_res_16172442[0]).concat(makeNimstrLit("\'")); } else { fmt_res_16172442[0] = makeNimstrLit("\'"); };
    F.line = 623;
    raiseException({message: nimCopy(null, fmt_res_16172442[0], NTI112), parent: null, m_type: NTI10206019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L2: do {
      F.line = 625;
      var matched_node_16180008 = null;
      F.line = 184;
      var i_16511689 = 0;
      F.line = 185;
      var l_16511690 = (matched_nodes_16172435 != null ? matched_nodes_16172435.length : 0);
      L3: do {
        F.line = 186;
          L4: while (true) {
          if (!(i_16511689 < l_16511690)) break L4;
            F.line = 625;
            matched_node_16180008 = matched_nodes_16172435[chckIndx(i_16511689, 0, (matched_nodes_16172435 != null ? matched_nodes_16172435.length : 0)+0-1)-0];
            F.line = 626;
            var match_16180016 = {refresh: nimCopy(null, cfg_16172355.refresh, NTI16166629), iter: cfg_16172355.iter, node: matched_node_16180008, runner: null, selectorKind: 0, serial: 0, value: null, convert: ({kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}), mount_source: null, mount: null, matches: null, inited: false, skip: false, iterate: ({kind: 0, simple: null, serial: null, selector: null}), mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 630;
            match_16180016.node = matched_node_16180008;
            if (match_16180016.iter) {
            var Tmp5 = match_16180016;
            if (ConstSet859[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 632;
            var Tmp6 = cfg_16172355;
            if (ConstSet860[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp5.iterate, Tmp6.iterate, NTI16166684);
            var Tmp7 = match_16180016;
            if (ConstSet861[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 633;
            Tmp7.anchor = owner_document_10201067(matched_node_16180008).createComment(toJSStr(cstrToNimstr(((matched_node_16180008).outerHTML))));
            var Tmp8 = match_16180016;
            if (ConstSet862[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 634;
            Tmp8.mount_template = cfg_16172355.mount;
            var Tmp9 = match_16180016;
            if (ConstSet863[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 635;
            Tmp9.match_templates = nimCopy(null, cfg_16172355.cmatches, NTI16166634);
            var Tmp10 = match_16180016;
            if (ConstSet864[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 636;
            Tmp10.items = nimCopy(null, [], NTI16185029);
            F.line = 637;
            var Tmp11 = match_16180016;
            if (ConstSet865[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_16180008.parentNode.replaceChild(Tmp11.anchor, matched_node_16180008);
            }
            else {
              var Tmp12 = match_16180016;
              if (ConstSet866[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 639;
              var Tmp13 = cfg_16172355;
              if (ConstSet867[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp12.selectorKind = Tmp13.convert.kind;
              F.line = 640;
              var Tmp14 = match_16180016;
              if (ConstSet868[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp14.selectorKind) {
              case 1:
                var Tmp15 = match_16180016;
                if (ConstSet869[Tmp15.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 642;
                Tmp15.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp16 = match_16180016;
              if (ConstSet870[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 645;
              var Tmp17 = cfg_16172355;
              if (ConstSet871[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp16.convert, Tmp17.convert, NTI16166642);
              var Tmp18 = match_16180016;
              if (ConstSet872[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 646;
              Tmp18.matches = nimCopy(null, [], NTI16185056);
              var Tmp19 = match_16180016;
              if (ConstSet873[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 647;
              Tmp19.inited = false;
              var Tmp20 = match_16180016;
              if (ConstSet874[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 648;
              Tmp20.mount = null;
              if (!((cfg_16172355.mount == null))) {
              var Tmp21 = match_16180016;
              if (ConstSet875[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 650;
              Tmp21.mount_source = cfg_16172355.mount;
              }
              else {
                L22: do {
                  F.line = 652;
                  var submatch_16185077 = null;
                  F.line = 184;
                  var i_16511686 = 0;
                  F.line = 185;
                  var l_16511687 = (cfg_16172355.cmatches != null ? cfg_16172355.cmatches.length : 0);
                  L23: do {
                    F.line = 186;
                      L24: while (true) {
                      if (!(i_16511686 < l_16511687)) break L24;
                        F.line = 652;
                        submatch_16185077 = cfg_16172355.cmatches[chckIndx(i_16511686, 0, (cfg_16172355.cmatches != null ? cfg_16172355.cmatches.length : 0)+0-1)-0];
                        F.line = 653;
                        var Tmp25 = match_16180016;
                        if (ConstSet876[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_13845218(Tmp25, "matches", submatch_16185077.compile(matched_node_16180008));
                        F.line = 188;
                        i_16511686 = addInt(i_16511686, 1);
                        if (!(((cfg_16172355.cmatches != null ? cfg_16172355.cmatches.length : 0) == l_16511687))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 654;
            if (result_16172406 != null) { result_16172406.push(match_16180016); } else { result_16172406 = [match_16180016]; };
            F.line = 188;
            i_16511689 = addInt(i_16511689, 1);
            if (!(((matched_nodes_16172435 != null ? matched_nodes_16172435.length : 0) == l_16511690))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_16172406;

}
function sub_16225394(ts_16225399, val_16225401, val_16225401_Idx, set_val_16225403, update_16225404) {
    function HEX3Aanonymous_16225417(new_value_16225419, changed_path_16225421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_16225399.set(val_16225401, val_16225401_Idx, new_value_16225419);
        F.line = 360;
        var new_paths_16225423 = null;
        L1: do {
          F.line = 361;
          var p_16225430 = null;
          F.line = 184;
          var i_16511731 = 0;
          F.line = 185;
          var l_16511732 = (changed_path_16225421 != null ? changed_path_16225421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511731 < l_16511732)) break L3;
                F.line = 361;
                p_16225430 = changed_path_16225421[chckIndx(i_16511731, 0, (changed_path_16225421 != null ? changed_path_16225421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_16225423 != null) { new_paths_16225423.push(HEX26_13760256(ts_16225399.id, p_16225430)); } else { new_paths_16225423 = [HEX26_13760256(ts_16225399.id, p_16225430)]; };
                F.line = 188;
                i_16511731 = addInt(i_16511731, 1);
                if (!(((changed_path_16225421 != null ? changed_path_16225421.length : 0) == l_16511732))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_16225403 == null))) {
        F.line = 364;
        set_val_16225403(val_16225401[val_16225401_Idx], new_paths_16225423);
        }
        else {
        if (!((update_16225404 == null))) {
        F.line = 367;
        update_16225404({paths: nimCopy(null, new_paths_16225423, NTI16225422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_16225406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_16225403 == null) && (update_16225404 == null))) {
    F.line = 357;
    result_16225406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_16225406 = HEX3Aanonymous_16225417;
  } while (false);
  framePtr = F.prev;

  return result_16225406;

}
function create_iter_item_16225505(match_16225510, parent_node_16225511) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_16225513 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_16225518 = null;
    F.line = 683;
    var node_16225519 = null;
      var Tmp1 = match_16225510;
      if (ConstSet890[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_16225510;
    if (ConstSet891[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_16225518 = Tmp2.mount_template.clone();
    F.line = 686;
    node_16225519 = comp_16225518.node();
    }
    else {
      F.line = 688;
      node_16225519 = match_16225510.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_16225510;
    if (ConstSet892[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_16225513 = {serial: 0, mount: comp_16225518, node: node_16225519, matches: compile_13885586(Tmp3.match_templates, node_16225519), skip: false};
    F.line = 694;
    var Tmp4 = match_16225510;
    if (ConstSet893[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_16225511.insertBefore(node_16225519, Tmp4.anchor);
  framePtr = F.prev;

  return result_16225513;

}
function update_do_16196880(match_16196885, init_val_16196886, set_val_16196888, refresh_list_16196889) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_16205261() {
            var result_16205263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_16205263 = nimCopy(null, item_16205252, NTI112);
            framePtr = F.prev;

            return result_16205263;

          }
          var Tmp16;
            function HEX3Aanonymous_16205281(new_value_16205283, path_16205300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_16205301 = mnewString(0);
                F.line = 747;
                if (fmt_res_16205301 != null) { fmt_res_16205301 = (fmt_res_16205301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_16205301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_16205301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_16215017(new_value_16215019, path_16215036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_16215037 = mnewString(0);
                F.line = 754;
                if (fmt_res_16215037 != null) { fmt_res_16215037 = (fmt_res_16215037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_16215037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_16215037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_16225050(refresh_list_16225052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_16196550(match_16196885, val_16205201[0], set_val_16196888, refresh_list_16225052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_16225765() {
        var result_16225767 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_16225767 = nimCopy(null, converted_val_16225756, NTI112);
        framePtr = F.prev;

        return result_16225767;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_16225847(refresh_list_16225849) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_16196550(match_16196885, val_16205201[0], set_val_16196888, refresh_list_16225849);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_16196888 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_16205201 = [init_val_16196886];
    if (match_16196885.iter) {
    F.line = 720;
    var i_16205203 = 0;
    F.line = 721;
    var Tmp1 = match_16196885;
    if (ConstSet877[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_16205206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_16205207 = null;
    F.line = 723;
    var it_simple_16205212 = null;
    F.line = 724;
    var it_serial_16205217 = null;
    F.line = 725;
    var it_select_16205225 = null;
    F.line = 726;
    var Tmp2 = match_16196885;
    if (ConstSet878[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_16196885;
      if (ConstSet880[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet879[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_16205212 = Tmp4.simple(val_16205201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_16196885;
      if (ConstSet882[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet881[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_16205217 = Tmp6.serial(val_16205201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_16196885;
      if (ConstSet884[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet883[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_16205225 = Tmp8.selector(val_16205201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_16196885;
            if (ConstSet885[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_16205203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_16196885;
          if (ConstSet886[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_16205203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_16205250 = [Tmp11];
          F.line = 736;
          var changed_16205251 = is_changed_10240207(refresh_list_16196889);
          F.line = 737;
          var item_16205252 = null;
          F.line = 738;
          var accessor_16205277 = {get: HEX3Aanonymous_16205261, set: null, m_type: NTI13760634};
          F.line = 741;
          var Tmp16 = match_16196885;
          if (ConstSet887[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_16205280 = it_simple_16205212();
            if ((it_16205280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_16205252 = nimCopy(null, it_16205280["Field1"], NTI112);
            F.line = 746;
            accessor_16205277.set = HEX3Aanonymous_16205281;
            break;
          case 1:
            F.line = 750;
            var it_16215016 = it_serial_16205217(serial_16205250, 0);
            if ((it_16215016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_16205252 = nimCopy(null, it_16215016["Field1"], NTI112);
            F.line = 753;
            accessor_16205277.set = HEX3Aanonymous_16215017;
            break;
          case 2:
            F.line = 757;
            var it_16225015 = it_select_16205225();
            if ((it_16225015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_16205252 = nimCopy(null, it_16225015.get(val_16205201[0]), NTI112);
            F.line = 760;
            accessor_16205277.set = sub_16225394(it_16225015, val_16205201, 0, set_val_16196888, HEX3Aanonymous_16225050);
            F.line = 762;
            sub_list_16205207 = walk_10245019(refresh_list_16196889, it_16225015.id);
            F.line = 763;
            changed_16205251 = is_changed_10240207(sub_list_16205207);
            break;
          }
          F.line = 766;
          var iter_item_16225488 = null;
          F.line = 767;
          var inited_16225489 = false;
            var Tmp17 = match_16196885;
            if (ConstSet888[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_16205203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_16196885;
          if (ConstSet889[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_16225488 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_16205203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_16225489 = true;
          F.line = 773;
          changed_16205251 = true;
          }
          else {
            F.line = 775;
            iter_item_16225488 = create_iter_item_16225505(match_16196885, parent_node_16205206);
            F.line = 776;
            var Tmp21 = match_16196885;
            if (ConstSet894[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_16225488); } else { Tmp22 = [iter_item_16225488]; };
            F.line = 777;
            inited_16225489 = false;
            if (!((serial_16205250[0] == iter_item_16225488.serial))) {
            F.line = 779;
            changed_16205251 = true;
            }
            
          }
          
          F.line = 782;
          var e_16225610 = {get: accessor_16205277.get, set: accessor_16205277.set, node: iter_item_16225488.node, data: nimCopy(null, item_16205252, NTI112), init: !(inited_16225489), before: true, skip: iter_item_16225488.skip, m_type: NTI13760630};
          L23: do {
            F.line = 790;
            var refresh_16225617 = null;
            F.line = 184;
            var i_16511699 = 0;
            F.line = 185;
            var l_16511700 = (match_16196885.refresh != null ? match_16196885.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_16511699 < l_16511700)) break L25;
                  F.line = 790;
                  refresh_16225617 = match_16196885.refresh[chckIndx(i_16511699, 0, (match_16196885.refresh != null ? match_16196885.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_16225618 = refresh_16225617.before;
                    if (!exec_16225618) Tmp26 = false; else {                      var Tmp27 = match_16196885;
                      if (ConstSet895[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_16225618 = is_changed_10270456(sub_list_16205207, refresh_16225617.reads);
                  }
                  
                    if (exec_16225618) Tmp28 = true; else {                      if (!!(inited_16225489)) Tmp29 = false; else {                        Tmp29 = refresh_16225617.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_16225610.data = nimCopy(null, item_16205252, NTI112);
                  F.line = 796;
                  refresh_16225617.refresh(e_16225610);
                  F.line = 797;
                  iter_item_16225488.skip = e_16225610.skip;
                  }
                  
                  F.line = 188;
                  i_16511699 = addInt(i_16511699, 1);
                  if (!(((match_16196885.refresh != null ? match_16196885.refresh.length : 0) == l_16511700))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_16225488.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_16225488.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_16225488.mount.update(item_16205252, accessor_16205277.set, sub_list_16205207);
          }
          
          if (!(iter_item_16225488.skip)) {
          L31: do {
            F.line = 805;
            var submatch_16225640 = null;
            F.line = 184;
            var i_16511703 = 0;
            F.line = 185;
            var l_16511704 = (iter_item_16225488.matches != null ? iter_item_16225488.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_16511703 < l_16511704)) break L33;
                  F.line = 805;
                  submatch_16225640 = iter_item_16225488.matches[chckIndx(i_16511703, 0, (iter_item_16225488.matches != null ? iter_item_16225488.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_16225640.update(item_16205252, accessor_16205277.set, sub_list_16205207);
                  F.line = 188;
                  i_16511703 = addInt(i_16511703, 1);
                  if (!(((iter_item_16225488.matches != null ? iter_item_16225488.matches.length : 0) == l_16511704))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_16225610 = {get: accessor_16205277.get, set: accessor_16205277.set, node: iter_item_16225488.node, data: nimCopy(null, item_16205252, NTI112), init: !(inited_16225489), before: false, skip: iter_item_16225488.skip, m_type: NTI13760630};
          L34: do {
            F.line = 817;
            var refresh_16225651 = null;
            F.line = 184;
            var i_16511708 = 0;
            F.line = 185;
            var l_16511709 = (match_16196885.refresh != null ? match_16196885.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_16511708 < l_16511709)) break L36;
                  F.line = 817;
                  refresh_16225651 = match_16196885.refresh[chckIndx(i_16511708, 0, (match_16196885.refresh != null ? match_16196885.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_16225652 = refresh_16225651.after;
                    if (!exec_16225652) Tmp37 = false; else {                      var Tmp38 = match_16196885;
                      if (ConstSet896[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_16225652 = is_changed_10270456(sub_list_16205207, refresh_16225651.reads);
                  }
                  
                  if (exec_16225652) {
                  F.line = 822;
                  e_16225610.data = nimCopy(null, item_16205252, NTI112);
                  F.line = 823;
                  refresh_16225651.refresh(e_16225610);
                  F.line = 824;
                  iter_item_16225488.skip = e_16225610.skip;
                  }
                  
                  F.line = 188;
                  i_16511708 = addInt(i_16511708, 1);
                  if (!(((match_16196885.refresh != null ? match_16196885.refresh.length : 0) == l_16511709))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_16205203 = addInt(i_16205203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_16196885;
          if (ConstSet897[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_16205203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_16196885;
          if (ConstSet898[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_13905493(pop_13905243(Tmp43, "items"), parent_node_16205206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_16225753 = is_changed_10240207(refresh_list_16196889);
      F.line = 833;
      var sub_list_16225754 = null;
      F.line = 834;
      var node_16225755 = match_16196885.node;
      F.line = 835;
      var converted_val_16225756 = null;
      F.line = 836;
      var accessor_16225781 = {get: HEX3Aanonymous_16225765, set: null, m_type: NTI13760634};
      F.line = 840;
      var Tmp44 = match_16196885;
      if (ConstSet899[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_16196885;
        if (ConstSet901[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet900[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_16225756 = nimCopy(null, Tmp46.simple(val_16205201[0]), NTI112);
        F.line = 843;
        changed_16225753 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_16196885;
        if (ConstSet902[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_16225789 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_16196885;
        if (ConstSet904[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet903[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_16225756 = nimCopy(null, Tmp49.serial(val_16205201[0], serial_16225789, 0), NTI112);
          var Tmp50 = match_16196885;
          if (ConstSet905[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_16225789[0] == Tmp50.serial))) {
        F.line = 849;
        changed_16225753 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_16196885;
        if (ConstSet907[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet906[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_16196885;
        if (ConstSet908[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_16225801 = Tmp52.compare(val_16205201[0], Tmp53.value);
        F.line = 853;
        converted_val_16225756 = nimCopy(null, res_16225801.Field0, NTI112);
        var Tmp54 = match_16196885;
        if (ConstSet909[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = nimCopy(null, res_16225801.Field0, NTI112);
        if (res_16225801.Field1) {
        F.line = 856;
        changed_16225753 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_16196885;
        if (ConstSet911[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet910[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_16225807 = Tmp56.obj;
        F.line = 860;
        converted_val_16225756 = nimCopy(null, obj_16225807.get(val_16205201[0]), NTI112);
        F.line = 861;
        sub_list_16225754 = walk_10245019(refresh_list_16196889, obj_16225807.id);
        F.line = 862;
        changed_16225753 = is_changed_10240207(sub_list_16225754);
          if (!changed_16225753) Tmp57 = false; else {            var Tmp58 = match_16196885;
            if (ConstSet913[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet912[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_16196885;
        if (ConstSet915[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet914[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_16196885;
        if (ConstSet916[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_16225753 = !(Tmp61.eql(converted_val_16225756, Tmp62.value));
        }
        
        F.line = 865;
        accessor_16225781.set = sub_16225394(obj_16225807, val_16205201, 0, set_val_16196888, HEX3Aanonymous_16225847);
        break;
      }
        var Tmp64 = match_16196885;
        if (ConstSet917[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_16196885;
          if (ConstSet918[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_16196885;
      if (ConstSet919[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_16196885;
      if (ConstSet920[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_16196885;
      if (ConstSet921[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_16225755.parentNode.replaceChild(Tmp68.mount.node(), node_16225755);
      }
      
      F.line = 875;
      var Tmp69 = match_16196885;
      if (ConstSet922[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_16226232 = Tmp69.inited;
      if (!(inited_16226232)) {
      F.line = 876;
      changed_16225753 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_16196885;
      if (ConstSet923[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_16226239 = {get: accessor_16225781.get, set: accessor_16225781.set, node: node_16225755, data: nimCopy(null, converted_val_16225756, NTI112), init: !(inited_16226232), before: changed_16225753, skip: Tmp70.skip, m_type: NTI13760630};
      L71: do {
        F.line = 885;
        var refresh_16226246 = null;
        F.line = 184;
        var i_16511715 = 0;
        F.line = 185;
        var l_16511716 = (match_16196885.refresh != null ? match_16196885.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_16511715 < l_16511716)) break L73;
              F.line = 885;
              refresh_16226246 = match_16196885.refresh[chckIndx(i_16511715, 0, (match_16196885.refresh != null ? match_16196885.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_16226247 = changed_16225753;
                if (!exec_16226247) Tmp74 = false; else {                  var Tmp75 = match_16196885;
                  if (ConstSet924[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_16226247 = is_changed_10270456(sub_list_16225754, refresh_16226246.reads);
              }
              
              F.line = 891;
              if (!refresh_16226246.before) Tmp77 = false; else {                Tmp77 = (exec_16226247 || !(inited_16226232));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_16226246.init) Tmp78 = false; else {                  Tmp78 = !(inited_16226232);                }                Tmp76 = Tmp78;              }              exec_16226247 = Tmp76;
              if (exec_16226247) {
              F.line = 893;
              e_16226239.data = nimCopy(null, converted_val_16225756, NTI112);
              F.line = 894;
              refresh_16226246.refresh(e_16226239);
              var Tmp79 = match_16196885;
              if (ConstSet925[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_16226239.skip;
              }
              
              F.line = 188;
              i_16511715 = addInt(i_16511715, 1);
              if (!(((match_16196885.refresh != null ? match_16196885.refresh.length : 0) == l_16511716))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_16226232)) {
      var Tmp80 = match_16196885;
      if (ConstSet926[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_16225753) Tmp82 = false; else {          var Tmp83 = match_16196885;
          if (ConstSet927[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_16196885;
          if (ConstSet928[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_16196885;
      if (ConstSet929[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_16225755 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_16196885;
      if (ConstSet930[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_16225756, accessor_16225781.set, sub_list_16225754);
      }
      
        if (!changed_16225753) Tmp87 = false; else {          var Tmp88 = match_16196885;
          if (ConstSet931[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_16226285 = null;
        F.line = 182;
        var colontmp__16511719 = null;
        F.line = 906;
        var Tmp90 = match_16196885;
        if (ConstSet932[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__16511719 = Tmp90.matches;
        F.line = 184;
        var i_16511720 = 0;
        F.line = 185;
        var l_16511721 = (colontmp__16511719 != null ? colontmp__16511719.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_16511720 < l_16511721)) break L92;
              F.line = 906;
              submatch_16226285 = colontmp__16511719[chckIndx(i_16511720, 0, (colontmp__16511719 != null ? colontmp__16511719.length : 0)+0-1)-0];
              F.line = 907;
              submatch_16226285.update(converted_val_16225756, accessor_16225781.set, sub_list_16225754);
              F.line = 188;
              i_16511720 = addInt(i_16511720, 1);
              if (!(((colontmp__16511719 != null ? colontmp__16511719.length : 0) == l_16511721))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_16225753) {
      F.line = 910;
      var Tmp93 = match_16196885;
      if (ConstSet933[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_16226292 = {get: accessor_16225781.get, set: accessor_16225781.set, node: node_16225755, data: nimCopy(null, converted_val_16225756, NTI112), init: !(inited_16226232), before: false, skip: Tmp93.skip, m_type: NTI13760630};
      L94: do {
        F.line = 918;
        var refresh_16226299 = null;
        F.line = 184;
        var i_16511725 = 0;
        F.line = 185;
        var l_16511726 = (match_16196885.refresh != null ? match_16196885.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_16511725 < l_16511726)) break L96;
              F.line = 918;
              refresh_16226299 = match_16196885.refresh[chckIndx(i_16511725, 0, (match_16196885.refresh != null ? match_16196885.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_16226300 = refresh_16226299.after;
                if (!exec_16226300) Tmp97 = false; else {                  var Tmp98 = match_16196885;
                  if (ConstSet934[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_16226300 = is_changed_10270456(sub_list_16225754, refresh_16226299.reads);
              }
              
              if (exec_16226300) {
              F.line = 923;
              e_16226292.data = nimCopy(null, converted_val_16225756, NTI112);
              F.line = 924;
              refresh_16226299.refresh(e_16226292);
              var Tmp99 = match_16196885;
              if (ConstSet935[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_16226292.skip;
              }
              
              F.line = 188;
              i_16511725 = addInt(i_16511725, 1);
              if (!(((match_16196885.refresh != null ? match_16196885.refresh.length : 0) == l_16511726))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_16196550(match_16196555, init_val_16196556, set_val_16196558, refresh_list_16196559) {
    function HEX3Aanonymous_16196560() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_16196880(match_16196555, init_val_16196556, set_val_16196558, refresh_list_16196559);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_16226376 = HEX3Aanonymous_16196560;
    if (!((match_16196555.runner == null))) {
    F.line = 706;
    add_last_13906260(match_16196555.runner.fifo, run_16226376);
    }
    else {
      F.line = 708;
      match_16196555.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_16196555.runner.fifo, run_16226376);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_16196555.runner.fifo))) break L3;
            F.line = 712;
            var run_item_16230054 = pop_first_13950047(match_16196555.runner.fifo);
            F.line = 713;
            run_item_16230054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_16196555.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_16196524(match_16196529) {
    function HEX3Aanonymous_16196536(data_16196538, set_16196543, refresh_list_16196544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_16196550(match_16196529, data_16196538, set_16196543, refresh_list_16196544);
      framePtr = F.prev;

      
    }

  var result_16196531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_16196531 = {update: HEX3Aanonymous_16196536};
  framePtr = F.prev;

  return result_16196531;

}
function as_interface_16171446(config_16171451) {
    function HEX3Aanonymous_16171458(node_16171460) {
      var result_16171466 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_16171466 = nimCopy(null, [], NTI16171481);
        L1: do {
          F.line = 997;
          var comp_match_16195214 = null;
          F.line = 182;
          var colontmp__16511675 = null;
          F.line = 997;
          colontmp__16511675 = compile_16172350(config_16171451, node_16171460);
          F.line = 184;
          var i_16511677 = 0;
          F.line = 185;
          var l_16511678 = (colontmp__16511675 != null ? colontmp__16511675.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511677 < l_16511678)) break L3;
                F.line = 997;
                comp_match_16195214 = colontmp__16511675[chckIndx(i_16511677, 0, (colontmp__16511675 != null ? colontmp__16511675.length : 0)+0-1)-0];
                F.line = 998;
                if (result_16171466 != null) { result_16171466.push(as_interface_16196524(comp_match_16195214)); } else { result_16171466 = [as_interface_16196524(comp_match_16195214)]; };
                F.line = 188;
                i_16511677 = addInt(i_16511677, 1);
                if (!(((colontmp__16511675 != null ? colontmp__16511675.length : 0) == l_16511678))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_16171466;

    }

  var result_16171453 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_16171453 = {compile: HEX3Aanonymous_16171458};
  framePtr = F.prev;

  return result_16171453;

}
function match_16170098(c_16170104, selector_16170105, convert_16170107, actions_16170113) {
  var result_16170115 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 408;
    result_16170115 = {selector: nimCopy(null, selector_16170105, NTI112), refresh: [], mount: null, iter: false, convert: nimCopy(null, convert_16170107, NTI16166642), m_type: NTI16166624, cmatches: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    F.line = 414;
    if (c_16170104.cmatches != null) { c_16170104.cmatches.push(as_interface_16171446(result_16170115)); } else { c_16170104.cmatches = [as_interface_16171446(result_16170115)]; };
    if (!((actions_16170113 == null))) {
    F.line = 416;
    actions_16170113(result_16170115);
    }
    
  framePtr = F.prev;

  return result_16170115;

}
function match_16167466(c_16167472, selector_16167473, convert_16167475, actions_16167481) {
  var result_16167483 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 432;
    var type_selector_16167491 = {kind: 3, obj: convert_16167475, simple: null, serial: null, compare: null, eql: null};
    F.line = 435;
    result_16167483 = match_16170098(c_16167472, selector_16167473, type_selector_16167491, actions_16167481);
  framePtr = F.prev;

  return result_16167483;

}
function HEX7C_16155216(p1_16155223, p2_16155226) {
    function HEX3Aanonymous_16155230(x_16155232) {
      var result_16155233 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_16155233 = nimCopy(null, p2_16155226(p1_16155223(x_16155232)), NTI112);
      framePtr = F.prev;

      return result_16155233;

    }

  var result_16155229 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_16155229 = HEX3Aanonymous_16155230;
  framePtr = F.prev;

  return result_16155229;

}
function sub_16335394(ts_16335399, val_16335401, val_16335401_Idx, set_val_16335403, update_16335404) {
    function HEX3Aanonymous_16335417(new_value_16335419, changed_path_16335421) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_16335399.set(val_16335401, val_16335401_Idx, new_value_16335419);
        F.line = 360;
        var new_paths_16335423 = null;
        L1: do {
          F.line = 361;
          var p_16335430 = null;
          F.line = 184;
          var i_16511792 = 0;
          F.line = 185;
          var l_16511793 = (changed_path_16335421 != null ? changed_path_16335421.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511792 < l_16511793)) break L3;
                F.line = 361;
                p_16335430 = changed_path_16335421[chckIndx(i_16511792, 0, (changed_path_16335421 != null ? changed_path_16335421.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_16335423 != null) { new_paths_16335423.push(HEX26_13760256(ts_16335399.id, p_16335430)); } else { new_paths_16335423 = [HEX26_13760256(ts_16335399.id, p_16335430)]; };
                F.line = 188;
                i_16511792 = addInt(i_16511792, 1);
                if (!(((changed_path_16335421 != null ? changed_path_16335421.length : 0) == l_16511793))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_16335403 == null))) {
        F.line = 364;
        set_val_16335403(val_16335401[val_16335401_Idx], new_paths_16335423);
        }
        else {
        if (!((update_16335404 == null))) {
        F.line = 367;
        update_16335404({paths: nimCopy(null, new_paths_16335423, NTI16335422)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_16335406 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_16335403 == null) && (update_16335404 == null))) {
    F.line = 357;
    result_16335406 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_16335406 = HEX3Aanonymous_16335417;
  } while (false);
  framePtr = F.prev;

  return result_16335406;

}
function compile_16335586(cfgs_16335591, node_16335592) {
  var result_16335595 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 657;
    result_16335595[0] = nimCopy(null, [], NTI16335610);
    L1: do {
      F.line = 658;
      var cfg_16335617 = null;
      F.line = 184;
      var i_16511798 = 0;
      F.line = 185;
      var l_16511799 = (cfgs_16335591 != null ? cfgs_16335591.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_16511798 < l_16511799)) break L3;
            F.line = 658;
            cfg_16335617 = cfgs_16335591[chckIndx(i_16511798, 0, (cfgs_16335591 != null ? cfgs_16335591.length : 0)+0-1)-0];
            F.line = 659;
            add_16295218(result_16335595, 0, cfg_16335617.compile(node_16335592));
            F.line = 188;
            i_16511798 = addInt(i_16511798, 1);
            if (!(((cfgs_16335591 != null ? cfgs_16335591.length : 0) == l_16511799))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_16335595[0];

}
function create_iter_item_16335520(match_16335525, parent_node_16335526) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_16335528 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 682;
    var comp_16335533 = null;
    F.line = 683;
    var node_16335534 = null;
      var Tmp1 = match_16335525;
      if (ConstSet949[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 685;
    var Tmp2 = match_16335525;
    if (ConstSet950[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_16335533 = Tmp2.mount_template.clone();
    F.line = 686;
    node_16335534 = comp_16335533.node();
    }
    else {
      F.line = 688;
      node_16335534 = match_16335525.node.cloneNode(true);
    }
    
    F.line = 689;
    var Tmp3 = match_16335525;
    if (ConstSet951[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_16335528 = {serial: 0, mount: comp_16335533, node: node_16335534, matches: compile_16335586(Tmp3.match_templates, node_16335534), skip: false};
    F.line = 694;
    var Tmp4 = match_16335525;
    if (ConstSet952[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_16335526.insertBefore(node_16335534, Tmp4.anchor);
  framePtr = F.prev;

  return result_16335528;

}
function detach_16355493(iter_item_16355497, parent_node_16355498) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 698;
    parent_node_16355498.removeChild(iter_item_16355497.node);
  framePtr = F.prev;

  
}
function pop_16355243(s_16355248, s_16355248_Idx) {
  var result_16355249 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_16355255 = subInt((s_16355248[s_16355248_Idx] != null ? s_16355248[s_16355248_Idx].length : 0), 1);
    F.line = 1784;
    result_16355249 = s_16355248[s_16355248_Idx][chckIndx(l_16355255, 0, (s_16355248[s_16355248_Idx] != null ? s_16355248[s_16355248_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_16355248[s_16355248_Idx] === null) s_16355248[s_16355248_Idx] = [];
               if (s_16355248[s_16355248_Idx].length < chckRange(l_16355255, 0, 2147483647)) { for (var i=s_16355248[s_16355248_Idx].length;i<chckRange(l_16355255, 0, 2147483647);++i) s_16355248[s_16355248_Idx].push(null); }
               else { s_16355248[s_16355248_Idx].length = chckRange(l_16355255, 0, 2147483647); };
  framePtr = F.prev;

  return result_16355249;

}
function update_do_16306880(match_16306885, init_val_16306886, set_val_16306888, refresh_list_16306889) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          function HEX3Aanonymous_16315261() {
            var result_16315263 = null;

            var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
            framePtr = F;
              F.line = 739;
              result_16315263 = item_16315252;
            framePtr = F.prev;

            return result_16315263;

          }
          var Tmp16;
            function HEX3Aanonymous_16315281(new_value_16315283, path_16315300) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 747;
                var fmt_res_16315301 = mnewString(0);
                F.line = 747;
                if (fmt_res_16315301 != null) { fmt_res_16315301 = (fmt_res_16315301).concat(makeNimstrLit("Cannot update data with SimpleIterator")); } else { fmt_res_16315301 = makeNimstrLit("Cannot update data with SimpleIterator"); };
                F.line = 747;
                raiseException({message: nimCopy(null, fmt_res_16315301, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_16325017(new_value_16325019, path_16325036) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 754;
                var fmt_res_16325037 = mnewString(0);
                F.line = 754;
                if (fmt_res_16325037 != null) { fmt_res_16325037 = (fmt_res_16325037).concat(makeNimstrLit("Cannot update data with SerialIterator")); } else { fmt_res_16325037 = makeNimstrLit("Cannot update data with SerialIterator"); };
                F.line = 754;
                raiseException({message: nimCopy(null, fmt_res_16325037, NTI112), parent: null, m_type: NTI10206023, name: null, trace: null, up: null}, "CannotSetError");
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_16335050(refresh_list_16335052) {
              var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 761;
                update_16306550(match_16306885, val_16315201[0], set_val_16306888, refresh_list_16335052);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
                    var Tmp26;
                      var Tmp27;
                    var Tmp28;
                      var Tmp29;
            var Tmp30;
                    var Tmp37;
                      var Tmp38;
          var Tmp41;
          var Tmp42;
          var Tmp43;
      function HEX3Aanonymous_16355524() {
        var result_16355526 = null;

        var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 837;
          result_16355526 = converted_val_16355515;
        framePtr = F.prev;

        return result_16355526;

      }
      var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
        var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        var Tmp56;
          var Tmp57;
            var Tmp58;
            var Tmp59;
        var Tmp60;
        var Tmp61;
        var Tmp62;
        function HEX3Aanonymous_16355606(refresh_list_16355608) {
          var F={procname:"update_do.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 866;
            update_16306550(match_16306885, val_16315201[0], set_val_16306888, refresh_list_16355608);
          framePtr = F.prev;

          
        }
        var Tmp63;
        var Tmp64;
          var Tmp65;
      var Tmp66;
      var Tmp67;
      var Tmp68;
      var Tmp69;
      var Tmp70;
                var Tmp74;
                  var Tmp75;
              var Tmp76;
              var Tmp77;
                var Tmp78;
              var Tmp79;
      var Tmp80;
        var Tmp81;
        var Tmp82;
          var Tmp83;
          var Tmp84;
      var Tmp85;
      var Tmp86;
        var Tmp87;
          var Tmp88;
        var Tmp90;
      var Tmp93;
                var Tmp97;
                  var Tmp98;
              var Tmp99;

  var F={procname:"update_do.update_do",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_16306888 == null)))) {
    F.line = 716;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(716, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 717;
    var val_16315201 = [init_val_16306886];
    if (match_16306885.iter) {
    F.line = 720;
    var i_16315203 = 0;
    F.line = 721;
    var Tmp1 = match_16306885;
    if (ConstSet936[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_16315206 = Tmp1.anchor.parentNode;
    F.line = 722;
    var sub_list_16315207 = null;
    F.line = 723;
    var it_simple_16315212 = null;
    F.line = 724;
    var it_serial_16315217 = null;
    F.line = 725;
    var it_select_16315225 = null;
    F.line = 726;
    var Tmp2 = match_16306885;
    if (ConstSet937[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 728;
      var Tmp3 = match_16306885;
      if (ConstSet939[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet938[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_16315212 = Tmp4.simple(val_16315201[0]);
      break;
    case 1:
      F.line = 730;
      var Tmp5 = match_16306885;
      if (ConstSet941[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet940[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_16315217 = Tmp6.serial(val_16315201[0]);
      break;
    case 2:
      F.line = 732;
      var Tmp7 = match_16306885;
      if (ConstSet943[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet942[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_16315225 = Tmp8.selector(val_16315201[0]);
      break;
    }
    L9: do {
      F.line = 734;
        L10: while (true) {
        if (!true) break L10;
          F.line = 735;
            var Tmp12 = match_16306885;
            if (ConstSet944[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_16315203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_16306885;
          if (ConstSet945[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_16315203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_16315250 = [Tmp11];
          F.line = 736;
          var changed_16315251 = is_changed_10240207(refresh_list_16306889);
          F.line = 737;
          var item_16315252 = null;
          F.line = 738;
          var accessor_16315277 = {get: HEX3Aanonymous_16315261, set: null, m_type: NTI15900209};
          F.line = 741;
          var Tmp16 = match_16306885;
          if (ConstSet946[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 743;
            var it_16315280 = it_simple_16315212();
            if ((it_16315280["Field0"] == false)) {
            F.line = 744;
            break L9;
            }
            
            F.line = 745;
            item_16315252 = it_16315280["Field1"];
            F.line = 746;
            accessor_16315277.set = HEX3Aanonymous_16315281;
            break;
          case 1:
            F.line = 750;
            var it_16325016 = it_serial_16315217(serial_16315250, 0);
            if ((it_16325016["Field0"] == false)) {
            F.line = 751;
            break L9;
            }
            
            F.line = 752;
            item_16315252 = it_16325016["Field1"];
            F.line = 753;
            accessor_16315277.set = HEX3Aanonymous_16325017;
            break;
          case 2:
            F.line = 757;
            var it_16335015 = it_select_16315225();
            if ((it_16335015 == null)) {
            F.line = 758;
            break L9;
            }
            
            F.line = 759;
            item_16315252 = it_16335015.get(val_16315201[0]);
            F.line = 760;
            accessor_16315277.set = sub_16335394(it_16335015, val_16315201, 0, set_val_16306888, HEX3Aanonymous_16335050);
            F.line = 762;
            sub_list_16315207 = walk_10245019(refresh_list_16306889, it_16335015.id);
            F.line = 763;
            changed_16315251 = is_changed_10240207(sub_list_16315207);
            break;
          }
          F.line = 766;
          var iter_item_16335503 = null;
          F.line = 767;
          var inited_16335504 = false;
            var Tmp17 = match_16306885;
            if (ConstSet947[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_16315203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 771;
          var Tmp19 = match_16306885;
          if (ConstSet948[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_16335503 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_16315203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 772;
          inited_16335504 = true;
          F.line = 773;
          changed_16315251 = true;
          }
          else {
            F.line = 775;
            iter_item_16335503 = create_iter_item_16335520(match_16306885, parent_node_16315206);
            F.line = 776;
            var Tmp21 = match_16306885;
            if (ConstSet953[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_16335503); } else { Tmp22 = [iter_item_16335503]; };
            F.line = 777;
            inited_16335504 = false;
            if (!((serial_16315250[0] == iter_item_16335503.serial))) {
            F.line = 779;
            changed_16315251 = true;
            }
            
          }
          
          F.line = 782;
          var e_16335687 = {get: accessor_16315277.get, set: accessor_16315277.set, node: iter_item_16335503.node, data: item_16315252, init: !(inited_16335504), before: true, skip: iter_item_16335503.skip, m_type: NTI15900205};
          L23: do {
            F.line = 790;
            var refresh_16345214 = null;
            F.line = 184;
            var i_16511759 = 0;
            F.line = 185;
            var l_16511760 = (match_16306885.refresh != null ? match_16306885.refresh.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_16511759 < l_16511760)) break L25;
                  F.line = 790;
                  refresh_16345214 = match_16306885.refresh[chckIndx(i_16511759, 0, (match_16306885.refresh != null ? match_16306885.refresh.length : 0)+0-1)-0];
                  F.line = 791;
                  var exec_16345215 = refresh_16345214.before;
                    if (!exec_16345215) Tmp26 = false; else {                      var Tmp27 = match_16306885;
                      if (ConstSet954[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp26 = (Tmp27.iterate.kind == 2);                    }                  if (Tmp26) {
                  F.line = 793;
                  exec_16345215 = is_changed_10270456(sub_list_16315207, refresh_16345214.reads);
                  }
                  
                    if (exec_16345215) Tmp28 = true; else {                      if (!!(inited_16335504)) Tmp29 = false; else {                        Tmp29 = refresh_16345214.init;                      }                      Tmp28 = Tmp29;                    }                  if (Tmp28) {
                  F.line = 795;
                  e_16335687.data = item_16315252;
                  F.line = 796;
                  refresh_16345214.refresh(e_16335687);
                  F.line = 797;
                  iter_item_16335503.skip = e_16335687.skip;
                  }
                  
                  F.line = 188;
                  i_16511759 = addInt(i_16511759, 1);
                  if (!(((match_16306885.refresh != null ? match_16306885.refresh.length : 0) == l_16511760))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
            if (!!((iter_item_16335503.mount == null))) Tmp30 = false; else {              Tmp30 = !(iter_item_16335503.skip);            }          if (Tmp30) {
          F.line = 801;
          iter_item_16335503.mount.update(item_16315252, accessor_16315277.set, sub_list_16315207);
          }
          
          if (!(iter_item_16335503.skip)) {
          L31: do {
            F.line = 805;
            var submatch_16355214 = null;
            F.line = 184;
            var i_16511764 = 0;
            F.line = 185;
            var l_16511765 = (iter_item_16335503.matches != null ? iter_item_16335503.matches.length : 0);
            L32: do {
              F.line = 186;
                L33: while (true) {
                if (!(i_16511764 < l_16511765)) break L33;
                  F.line = 805;
                  submatch_16355214 = iter_item_16335503.matches[chckIndx(i_16511764, 0, (iter_item_16335503.matches != null ? iter_item_16335503.matches.length : 0)+0-1)-0];
                  F.line = 806;
                  submatch_16355214.update(item_16315252, accessor_16315277.set, sub_list_16315207);
                  F.line = 188;
                  i_16511764 = addInt(i_16511764, 1);
                  if (!(((iter_item_16335503.matches != null ? iter_item_16335503.matches.length : 0) == l_16511765))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          F.line = 809;
          e_16335687 = {get: accessor_16315277.get, set: accessor_16315277.set, node: iter_item_16335503.node, data: item_16315252, init: !(inited_16335504), before: false, skip: iter_item_16335503.skip, m_type: NTI15900205};
          L34: do {
            F.line = 817;
            var refresh_16355225 = null;
            F.line = 184;
            var i_16511769 = 0;
            F.line = 185;
            var l_16511770 = (match_16306885.refresh != null ? match_16306885.refresh.length : 0);
            L35: do {
              F.line = 186;
                L36: while (true) {
                if (!(i_16511769 < l_16511770)) break L36;
                  F.line = 817;
                  refresh_16355225 = match_16306885.refresh[chckIndx(i_16511769, 0, (match_16306885.refresh != null ? match_16306885.refresh.length : 0)+0-1)-0];
                  F.line = 818;
                  var exec_16355226 = refresh_16355225.after;
                    if (!exec_16355226) Tmp37 = false; else {                      var Tmp38 = match_16306885;
                      if (ConstSet955[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                      Tmp37 = (Tmp38.iterate.kind == 2);                    }                  if (Tmp37) {
                  F.line = 820;
                  exec_16355226 = is_changed_10270456(sub_list_16315207, refresh_16355225.reads);
                  }
                  
                  if (exec_16355226) {
                  F.line = 822;
                  e_16335687.data = item_16315252;
                  F.line = 823;
                  refresh_16355225.refresh(e_16335687);
                  F.line = 824;
                  iter_item_16335503.skip = e_16335687.skip;
                  }
                  
                  F.line = 188;
                  i_16511769 = addInt(i_16511769, 1);
                  if (!(((match_16306885.refresh != null ? match_16306885.refresh.length : 0) == l_16511770))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 826;
          i_16315203 = addInt(i_16315203, 1);
        }
    } while(false);
    L39: do {
      F.line = 829;
        L40: while (true) {
          var Tmp41 = match_16306885;
          if (ConstSet956[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_16315203 < ((Tmp42 = Tmp41.items, Tmp42) != null ? Tmp42.length : 0))) break L40;
          F.line = 830;
          var Tmp43 = match_16306885;
          if (ConstSet957[Tmp43.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_16355493(pop_16355243(Tmp43, "items"), parent_node_16315206);
        }
    } while(false);
    }
    else {
      F.line = 832;
      var changed_16355512 = is_changed_10240207(refresh_list_16306889);
      F.line = 833;
      var sub_list_16355513 = null;
      F.line = 834;
      var node_16355514 = match_16306885.node;
      F.line = 835;
      var converted_val_16355515 = null;
      F.line = 836;
      var accessor_16355540 = {get: HEX3Aanonymous_16355524, set: null, m_type: NTI15900209};
      F.line = 840;
      var Tmp44 = match_16306885;
      if (ConstSet958[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp44.convert.kind) {
      case 0:
        F.line = 842;
        var Tmp45 = match_16306885;
        if (ConstSet960[Tmp45.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp46 = Tmp45.convert;
        if (ConstSet959[Tmp46.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_16355515 = Tmp46.simple(val_16315201[0]);
        F.line = 843;
        changed_16355512 = true;
        break;
      case 1:
        F.line = 846;
        var Tmp47 = match_16306885;
        if (ConstSet961[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_16355548 = [Tmp47.serial];
        F.line = 847;
        var Tmp48 = match_16306885;
        if (ConstSet963[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet962[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_16355515 = Tmp49.serial(val_16315201[0], serial_16355548, 0);
          var Tmp50 = match_16306885;
          if (ConstSet964[Tmp50.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_16355548[0] == Tmp50.serial))) {
        F.line = 849;
        changed_16355512 = true;
        }
        
        break;
      case 2:
        F.line = 852;
        var Tmp51 = match_16306885;
        if (ConstSet966[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp52 = Tmp51.convert;
        if (ConstSet965[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp53 = match_16306885;
        if (ConstSet967[Tmp53.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_16355560 = Tmp52.compare(val_16315201[0], Tmp53.value);
        F.line = 853;
        converted_val_16355515 = res_16355560.Field0;
        var Tmp54 = match_16306885;
        if (ConstSet968[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 854;
        Tmp54.value = res_16355560.Field0;
        if (res_16355560.Field1) {
        F.line = 856;
        changed_16355512 = true;
        }
        
        break;
      case 3:
        F.line = 859;
        var Tmp55 = match_16306885;
        if (ConstSet970[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp56 = Tmp55.convert;
        if (ConstSet969[Tmp56.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_16355566 = Tmp56.obj;
        F.line = 860;
        converted_val_16355515 = obj_16355566.get(val_16315201[0]);
        F.line = 861;
        sub_list_16355513 = walk_10245019(refresh_list_16306889, obj_16355566.id);
        F.line = 862;
        changed_16355512 = is_changed_10240207(sub_list_16355513);
          if (!changed_16355512) Tmp57 = false; else {            var Tmp58 = match_16306885;
            if (ConstSet972[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp59 = Tmp58.convert;
            if (ConstSet971[Tmp59.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp57 = !((Tmp59.eql == null));          }        if (Tmp57) {
        F.line = 864;
        var Tmp60 = match_16306885;
        if (ConstSet974[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp61 = Tmp60.convert;
        if (ConstSet973[Tmp61.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp62 = match_16306885;
        if (ConstSet975[Tmp62.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_16355512 = !(Tmp61.eql(converted_val_16355515, Tmp62.value));
        }
        
        F.line = 865;
        accessor_16355540.set = sub_16335394(obj_16355566, val_16315201, 0, set_val_16306888, HEX3Aanonymous_16355606);
        break;
      }
        var Tmp64 = match_16306885;
        if (ConstSet976[Tmp64.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp64.mount == null)) Tmp63 = false; else {          var Tmp65 = match_16306885;
          if (ConstSet977[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp63 = !((Tmp65.mount_source == null));        }      if (Tmp63) {
      var Tmp66 = match_16306885;
      if (ConstSet978[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 871;
      var Tmp67 = match_16306885;
      if (ConstSet979[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp66.mount = Tmp67.mount_source.clone();
      F.line = 872;
      var Tmp68 = match_16306885;
      if (ConstSet980[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_16355514.parentNode.replaceChild(Tmp68.mount.node(), node_16355514);
      }
      
      F.line = 875;
      var Tmp69 = match_16306885;
      if (ConstSet981[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_16355991 = Tmp69.inited;
      if (!(inited_16355991)) {
      F.line = 876;
      changed_16355512 = true;
      }
      
      F.line = 877;
      var Tmp70 = match_16306885;
      if (ConstSet982[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_16355998 = {get: accessor_16355540.get, set: accessor_16355540.set, node: node_16355514, data: converted_val_16355515, init: !(inited_16355991), before: changed_16355512, skip: Tmp70.skip, m_type: NTI15900205};
      L71: do {
        F.line = 885;
        var refresh_16356005 = null;
        F.line = 184;
        var i_16511776 = 0;
        F.line = 185;
        var l_16511777 = (match_16306885.refresh != null ? match_16306885.refresh.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_16511776 < l_16511777)) break L73;
              F.line = 885;
              refresh_16356005 = match_16306885.refresh[chckIndx(i_16511776, 0, (match_16306885.refresh != null ? match_16306885.refresh.length : 0)+0-1)-0];
              F.line = 886;
              var exec_16356006 = changed_16355512;
                if (!exec_16356006) Tmp74 = false; else {                  var Tmp75 = match_16306885;
                  if (ConstSet983[Tmp75.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp74 = (Tmp75.convert.kind == 3);                }              if (Tmp74) {
              F.line = 888;
              exec_16356006 = is_changed_10270456(sub_list_16355513, refresh_16356005.reads);
              }
              
              F.line = 891;
              if (!refresh_16356005.before) Tmp77 = false; else {                Tmp77 = (exec_16356006 || !(inited_16355991));              }              if (Tmp77) Tmp76 = true; else {                if (!refresh_16356005.init) Tmp78 = false; else {                  Tmp78 = !(inited_16355991);                }                Tmp76 = Tmp78;              }              exec_16356006 = Tmp76;
              if (exec_16356006) {
              F.line = 893;
              e_16355998.data = converted_val_16355515;
              F.line = 894;
              refresh_16356005.refresh(e_16355998);
              var Tmp79 = match_16306885;
              if (ConstSet984[Tmp79.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 895;
              Tmp79.skip = e_16355998.skip;
              }
              
              F.line = 188;
              i_16511776 = addInt(i_16511776, 1);
              if (!(((match_16306885.refresh != null ? match_16306885.refresh.length : 0) == l_16511777))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      if (!(inited_16355991)) {
      var Tmp80 = match_16306885;
      if (ConstSet985[Tmp80.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 897;
      Tmp80.inited = true;
      }
      
        if (!changed_16355512) Tmp82 = false; else {          var Tmp83 = match_16306885;
          if (ConstSet986[Tmp83.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp82 = !((Tmp83.mount == null));        }        if (!Tmp82) Tmp81 = false; else {          var Tmp84 = match_16306885;
          if (ConstSet987[Tmp84.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp81 = !(Tmp84.skip);        }      if (Tmp81) {
      F.line = 901;
      var Tmp85 = match_16306885;
      if (ConstSet988[Tmp85.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_16355514 = Tmp85.mount.node();
      F.line = 902;
      var Tmp86 = match_16306885;
      if (ConstSet989[Tmp86.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp86.mount.update(converted_val_16355515, accessor_16355540.set, sub_list_16355513);
      }
      
        if (!changed_16355512) Tmp87 = false; else {          var Tmp88 = match_16306885;
          if (ConstSet990[Tmp88.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp87 = !(Tmp88.skip);        }      if (Tmp87) {
      L89: do {
        F.line = 906;
        var submatch_16356044 = null;
        F.line = 182;
        var colontmp__16511780 = null;
        F.line = 906;
        var Tmp90 = match_16306885;
        if (ConstSet991[Tmp90.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__16511780 = Tmp90.matches;
        F.line = 184;
        var i_16511781 = 0;
        F.line = 185;
        var l_16511782 = (colontmp__16511780 != null ? colontmp__16511780.length : 0);
        L91: do {
          F.line = 186;
            L92: while (true) {
            if (!(i_16511781 < l_16511782)) break L92;
              F.line = 906;
              submatch_16356044 = colontmp__16511780[chckIndx(i_16511781, 0, (colontmp__16511780 != null ? colontmp__16511780.length : 0)+0-1)-0];
              F.line = 907;
              submatch_16356044.update(converted_val_16355515, accessor_16355540.set, sub_list_16355513);
              F.line = 188;
              i_16511781 = addInt(i_16511781, 1);
              if (!(((colontmp__16511780 != null ? colontmp__16511780.length : 0) == l_16511782))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_16355512) {
      F.line = 910;
      var Tmp93 = match_16306885;
      if (ConstSet992[Tmp93.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var e_16356051 = {get: accessor_16355540.get, set: accessor_16355540.set, node: node_16355514, data: converted_val_16355515, init: !(inited_16355991), before: false, skip: Tmp93.skip, m_type: NTI15900205};
      L94: do {
        F.line = 918;
        var refresh_16356058 = null;
        F.line = 184;
        var i_16511786 = 0;
        F.line = 185;
        var l_16511787 = (match_16306885.refresh != null ? match_16306885.refresh.length : 0);
        L95: do {
          F.line = 186;
            L96: while (true) {
            if (!(i_16511786 < l_16511787)) break L96;
              F.line = 918;
              refresh_16356058 = match_16306885.refresh[chckIndx(i_16511786, 0, (match_16306885.refresh != null ? match_16306885.refresh.length : 0)+0-1)-0];
              F.line = 919;
              var exec_16356059 = refresh_16356058.after;
                if (!exec_16356059) Tmp97 = false; else {                  var Tmp98 = match_16306885;
                  if (ConstSet993[Tmp98.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                  Tmp97 = (Tmp98.convert.kind == 3);                }              if (Tmp97) {
              F.line = 921;
              exec_16356059 = is_changed_10270456(sub_list_16355513, refresh_16356058.reads);
              }
              
              if (exec_16356059) {
              F.line = 923;
              e_16356051.data = converted_val_16355515;
              F.line = 924;
              refresh_16356058.refresh(e_16356051);
              var Tmp99 = match_16306885;
              if (ConstSet994[Tmp99.iter]===undefined) { raiseFieldError(makeNimstrLit("\'skip\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 925;
              Tmp99.skip = e_16356051.skip;
              }
              
              F.line = 188;
              i_16511786 = addInt(i_16511786, 1);
              if (!(((match_16306885.refresh != null ? match_16306885.refresh.length : 0) == l_16511787))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function update_16306550(match_16306555, init_val_16306556, set_val_16306558, refresh_list_16306559) {
    function HEX3Aanonymous_16306560() {
      var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 703;
        update_do_16306880(match_16306555, init_val_16306556, set_val_16306558, refresh_list_16306559);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 702;
    var run_16356255 = HEX3Aanonymous_16306560;
    if (!((match_16306555.runner == null))) {
    F.line = 706;
    add_last_13906260(match_16306555.runner.fifo, run_16356255);
    }
    else {
      F.line = 708;
      match_16306555.runner = {fifo: init_deque_13931106(4)};
      F.line = 709;
      try {
      F.line = 710;
      add_last_13906260(match_16306555.runner.fifo, run_16356255);
      L2: do {
        F.line = 711;
          L3: while (true) {
          if (!(0 < len_13945268(match_16306555.runner.fifo))) break L3;
            F.line = 712;
            var run_item_16360054 = pop_first_13950047(match_16306555.runner.fifo);
            F.line = 713;
            run_item_16360054();
          }
      } while(false);
      } finally {
      framePtr = F;
      F.line = 709;
      match_16306555.runner = null;
      }
    }
    
  framePtr = F.prev;

  
}
function as_interface_16306524(match_16306529) {
    function HEX3Aanonymous_16306536(data_16306538, set_16306543, refresh_list_16306544) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 990;
        update_16306550(match_16306529, data_16306538, set_16306543, refresh_list_16306544);
      framePtr = F.prev;

      
    }

  var result_16306531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 989;
    result_16306531 = {update: HEX3Aanonymous_16306536};
  framePtr = F.prev;

  return result_16306531;

}
function as_interface_16273651(config_16273656) {
    function HEX3Aanonymous_16273663(node_16273665) {
      var result_16273671 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 996;
        result_16273671 = nimCopy(null, [], NTI16273686);
        L1: do {
          F.line = 997;
          var comp_match_16305214 = null;
          F.line = 182;
          var colontmp__16511746 = null;
          F.line = 997;
          colontmp__16511746 = compile_16274555(config_16273656, node_16273665);
          F.line = 184;
          var i_16511748 = 0;
          F.line = 185;
          var l_16511749 = (colontmp__16511746 != null ? colontmp__16511746.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511748 < l_16511749)) break L3;
                F.line = 997;
                comp_match_16305214 = colontmp__16511746[chckIndx(i_16511748, 0, (colontmp__16511746 != null ? colontmp__16511746.length : 0)+0-1)-0];
                F.line = 998;
                if (result_16273671 != null) { result_16273671.push(as_interface_16306524(comp_match_16305214)); } else { result_16273671 = [as_interface_16306524(comp_match_16305214)]; };
                F.line = 188;
                i_16511748 = addInt(i_16511748, 1);
                if (!(((colontmp__16511746 != null ? colontmp__16511746.length : 0) == l_16511749))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_16273671;

    }

  var result_16273658 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 994;
    result_16273658 = {compile: HEX3Aanonymous_16273663};
  framePtr = F.prev;

  return result_16273658;

}
function match_16272303(c_16272309, selector_16272310, convert_16272312, actions_16272318) {
  var result_16272320 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 408;
    result_16272320 = {selector: nimCopy(null, selector_16272310, NTI112), refresh: [], mount: null, iter: false, convert: nimCopy(null, convert_16272312, NTI15900245), m_type: NTI15900468, cmatches: null, iterate: ({kind: 0, simple: null, serial: null, selector: null})};
    F.line = 414;
    if (c_16272309.cmatches != null) { c_16272309.cmatches.push(as_interface_16273651(result_16272320)); } else { c_16272309.cmatches = [as_interface_16273651(result_16272320)]; };
    if (!((actions_16272318 == null))) {
    F.line = 416;
    actions_16272318(result_16272320);
    }
    
  framePtr = F.prev;

  return result_16272320;

}
function match_16269671(c_16269677, selector_16269678, convert_16269680, actions_16269686) {
  var result_16269688 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 432;
    var type_selector_16269696 = {kind: 3, obj: convert_16269680, simple: null, serial: null, compare: null, eql: null};
    F.line = 435;
    result_16269688 = match_16272303(c_16269677, selector_16269678, type_selector_16269696, actions_16269686);
  framePtr = F.prev;

  return result_16269688;

}
function match_16269559(c_16269564, selector_16269565, actions_16269571) {
  var result_16269573 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 487;
    result_16269573 = match_16269671(c_16269564, selector_16269565, id_type_selector_16269579(), actions_16269571);
  framePtr = F.prev;

  return result_16269573;

}
function sub_16266227(ts_16266232, val_16266234, val_16266234_Idx, set_val_16266236, update_16266237) {
    function HEX3Aanonymous_16266250(new_value_16266252, changed_path_16266254) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_16266232.set(val_16266234, val_16266234_Idx, new_value_16266252);
        F.line = 360;
        var new_paths_16266256 = null;
        L1: do {
          F.line = 361;
          var p_16266263 = null;
          F.line = 184;
          var i_16511806 = 0;
          F.line = 185;
          var l_16511807 = (changed_path_16266254 != null ? changed_path_16266254.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511806 < l_16511807)) break L3;
                F.line = 361;
                p_16266263 = changed_path_16266254[chckIndx(i_16511806, 0, (changed_path_16266254 != null ? changed_path_16266254.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_16266256 != null) { new_paths_16266256.push(HEX26_13760256(ts_16266232.id, p_16266263)); } else { new_paths_16266256 = [HEX26_13760256(ts_16266232.id, p_16266263)]; };
                F.line = 188;
                i_16511806 = addInt(i_16511806, 1);
                if (!(((changed_path_16266254 != null ? changed_path_16266254.length : 0) == l_16511807))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_16266236 == null))) {
        F.line = 364;
        set_val_16266236(val_16266234[val_16266234_Idx], new_paths_16266256);
        }
        else {
        if (!((update_16266237 == null))) {
        F.line = 367;
        update_16266237({paths: nimCopy(null, new_paths_16266256, NTI16266255)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_16266239 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_16266236 == null) && (update_16266237 == null))) {
    F.line = 357;
    result_16266239 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_16266239 = HEX3Aanonymous_16266250;
  } while (false);
  framePtr = F.prev;

  return result_16266239;

}
function as_interface_16266160(comp_16266165, convert_16266167) {
    function HEX3Aanonymous_16266174() {
      var result_16266176 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1026;
        result_16266176 = comp_16266165.node();
      framePtr = F.prev;

      return result_16266176;

    }
    function HEX3Aanonymous_16266191(init_val_16266193, set_val_16266198, refresh_list_16266199) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1028;
        var val_16266200 = [init_val_16266193];
        F.line = 1029;
        comp_16266165.update(convert_16266167.get(val_16266200[0]), sub_16266227(convert_16266167, val_16266200, 0, set_val_16266198, null), walk_10245019(refresh_list_16266199, convert_16266167.id));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_16266332() {
      var result_16266338 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1031;
        result_16266338 = as_interface_16266160(comp_16266165.clone(), convert_16266167);
      framePtr = F.prev;

      return result_16266338;

    }

  var result_16266169 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1024;
    result_16266169 = {node: HEX3Aanonymous_16266174, update: HEX3Aanonymous_16266191, clone: HEX3Aanonymous_16266332};
  framePtr = F.prev;

  return result_16266169;

}
function mount_16256123(c_16256129, comp_16256131, convert_16256133) {
  var F={procname:"mount.mount",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((comp_16256131 == null)))) {
    F.line = 589;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(589, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 590;
    c_16256129.mount = as_interface_16266160(comp_16256131, convert_16256133);
  framePtr = F.prev;

  
}
function HEX7C_16245216(p1_16245223, p2_16245226) {
    function HEX3Aanonymous_16245230(x_16245232) {
      var result_16245233 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_16245233 = nimCopy(null, p2_16245226(p1_16245223(x_16245232)), NTI13586042);
      framePtr = F.prev;

      return result_16245233;

    }

  var result_16245229 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_16245229 = HEX3Aanonymous_16245230;
  framePtr = F.prev;

  return result_16245229;

}
function refresh_16416344(c_16416349, refresh_16416351, before_16416352, after_16416353, reads_16416354) {
    var Tmp1;
      var Tmp2;

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (c_16416349.iter) {
    F.line = 511;
    var Tmp1 = c_16416349;
    if (ConstSet995[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    switch (Tmp1.iterate.kind) {
    case 0:
      F.line = 513;
      var fmt_res_16416356 = mnewString(0);
      F.line = 513;
      if (fmt_res_16416356 != null) { fmt_res_16416356 = (fmt_res_16416356).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates")); } else { fmt_res_16416356 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates"); };
      F.line = 513;
      raiseException({message: nimCopy(null, fmt_res_16416356, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 1:
      F.line = 515;
      var fmt_res_16425002 = mnewString(0);
      F.line = 515;
      if (fmt_res_16425002 != null) { fmt_res_16425002 = (fmt_res_16425002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates")); } else { fmt_res_16425002 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates"); };
      F.line = 515;
      raiseException({message: nimCopy(null, fmt_res_16425002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
      break;
    case 2:
      break;
    }
    }
    else {
      F.line = 519;
      var Tmp2 = c_16416349;
      if (ConstSet996[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      switch (Tmp2.convert.kind) {
      case 0:
        F.line = 521;
        var fmt_res_16435003 = mnewString(0);
        F.line = 521;
        if (fmt_res_16435003 != null) { fmt_res_16435003 = (fmt_res_16435003).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates")); } else { fmt_res_16435003 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates"); };
        F.line = 521;
        raiseException({message: nimCopy(null, fmt_res_16435003, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 1:
        F.line = 523;
        var fmt_res_16445002 = mnewString(0);
        F.line = 523;
        if (fmt_res_16445002 != null) { fmt_res_16445002 = (fmt_res_16445002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates")); } else { fmt_res_16445002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates"); };
        F.line = 523;
        raiseException({message: nimCopy(null, fmt_res_16445002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 2:
        F.line = 525;
        var fmt_res_16455002 = mnewString(0);
        F.line = 525;
        if (fmt_res_16455002 != null) { fmt_res_16455002 = (fmt_res_16455002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates")); } else { fmt_res_16455002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates"); };
        F.line = 525;
        raiseException({message: nimCopy(null, fmt_res_16455002, NTI112), parent: null, m_type: NTI10206015, name: null, trace: null, up: null}, "BindError");
        break;
      case 3:
        break;
      }
    }
    
    F.line = 528;
    if (c_16416349.refresh != null) { c_16416349.refresh.push({refresh: refresh_16416351, before: before_16416352, after: (after_16416353 || !(before_16416352)), init: false, reads: reads_16416354}); } else { c_16416349.refresh = [{refresh: refresh_16416351, before: before_16416352, after: (after_16416353 || !(before_16416352)), init: false, reads: reads_16416354}]; };
  framePtr = F.prev;

  
}
function refresh_before_16415340(c_16415345, reads_16415346, refresh_proc_16415348) {
  var F={procname:"refresh_before.refresh_before",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 543;
    refresh_16416344(c_16415345, refresh_proc_16415348, true, false, reads_16415346);
  framePtr = F.prev;

  
}
function HEX40_10240020(a_10240024) {
  var result_10240026 = null;

  var F={procname:"@.@",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1538;
    result_10240026 = new Array(chckRange((a_10240024 != null ? a_10240024.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((a_10240024 != null ? a_10240024.length : 0), 0, 2147483647);++i) {result_10240026[i]=null;}    L1: do {
      F.line = 1539;
      var i_10240050 = 0;
      F.line = 66;
      var colontmp__16511821 = 0;
      F.line = 1539;
      colontmp__16511821 = subInt((a_10240024 != null ? a_10240024.length : 0), 1);
      F.line = 77;
      var res_16511822 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_16511822 <= colontmp__16511821)) break L3;
            F.line = 1539;
            i_10240050 = res_16511822;
            F.line = 1539;
            result_10240026[chckIndx(i_10240050, 0, (result_10240026 != null ? result_10240026.length : 0)+0-1)-0] = nimCopy(null, a_10240024[chckIndx(i_10240050, 0, (a_10240024 != null ? a_10240024.length : 0)+0-1)-0], NTI10206031);
            F.line = 80;
            res_16511822 = addInt(res_16511822, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10240026;

}
function update_set_10240015(paths_10240018) {
  var result_10240019 = null;

  var F={procname:"nclearseam.updateSet",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 293;
    result_10240019 = {paths: HEX40_10240020(paths_10240018)};
  framePtr = F.prev;

  return result_10240019;

}
function HEX40_10240113(a_10240117) {
  var result_10240119 = null;

  var F={procname:"@.@",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1538;
    result_10240119 = new Array(chckRange((a_10240117 != null ? a_10240117.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((a_10240117 != null ? a_10240117.length : 0), 0, 2147483647);++i) {result_10240119[i]=null;}    L1: do {
      F.line = 1539;
      var i_10240143 = 0;
      F.line = 66;
      var colontmp__16511828 = 0;
      F.line = 1539;
      colontmp__16511828 = subInt((a_10240117 != null ? a_10240117.length : 0), 1);
      F.line = 77;
      var res_16511829 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_16511829 <= colontmp__16511828)) break L3;
            F.line = 1539;
            i_10240143 = res_16511829;
            F.line = 1539;
            result_10240119[chckIndx(i_10240143, 0, (result_10240119 != null ? result_10240119.length : 0)+0-1)-0] = nimCopy(null, a_10240117[chckIndx(i_10240143, 0, (a_10240117 != null ? a_10240117.length : 0)+0-1)-0], NTI112);
            F.line = 80;
            res_16511829 = addInt(res_16511829, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10240119;

}
function data_path_10240107(members_10240110) {
  var result_10240111 = null;

  var F={procname:"nclearseam.dataPath",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 296;
    var path_10240157 = HEX40_10240113(members_10240110);
    F.line = 297;
    result_10240111 = nimCopy(null, path_10240157, NTI10240112);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10240111;

}
function HEX7C_16380451(p1_16380456, p2_16380459) {
    function HEX3Aanonymous_16380462() {
      var result_16380464 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 19;
        result_16380464 = p2_16380459(p1_16380456());
      framePtr = F.prev;

      return result_16380464;

    }

  var result_16380461 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_16380461 = HEX3Aanonymous_16380462;
  framePtr = F.prev;

  return result_16380461;

}
function new_16380207() {
  var result_16380211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_16380401 = null;
    F.line = 851;
    r_16380401 = ({group: null, loaded_group: null, threads: null});
    F.line = 852;
    result_16380211 = r_16380401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16380211;

}
function sub_16501227(ts_16501232, val_16501234, val_16501234_Idx, set_val_16501236, update_16501237) {
    function HEX3Aanonymous_16501250(new_value_16501252, changed_path_16501254) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 359;
        ts_16501232.set(val_16501234, val_16501234_Idx, new_value_16501252);
        F.line = 360;
        var new_paths_16501256 = null;
        L1: do {
          F.line = 361;
          var p_16501263 = null;
          F.line = 184;
          var i_16511856 = 0;
          F.line = 185;
          var l_16511857 = (changed_path_16501254 != null ? changed_path_16501254.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16511856 < l_16511857)) break L3;
                F.line = 361;
                p_16501263 = changed_path_16501254[chckIndx(i_16511856, 0, (changed_path_16501254 != null ? changed_path_16501254.length : 0)+0-1)-0];
                F.line = 362;
                if (new_paths_16501256 != null) { new_paths_16501256.push(HEX26_13760256(ts_16501232.id, p_16501263)); } else { new_paths_16501256 = [HEX26_13760256(ts_16501232.id, p_16501263)]; };
                F.line = 188;
                i_16511856 = addInt(i_16511856, 1);
                if (!(((changed_path_16501254 != null ? changed_path_16501254.length : 0) == l_16511857))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
        if (!((set_val_16501236 == null))) {
        F.line = 364;
        set_val_16501236(val_16501234[val_16501234_Idx], new_paths_16501256);
        }
        else {
        if (!((update_16501237 == null))) {
        F.line = 367;
        update_16501237({paths: nimCopy(null, new_paths_16501256, NTI16501255)});
        }
        }
      framePtr = F.prev;

      
    }

  var result_16501239 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_16501236 == null) && (update_16501237 == null))) {
    F.line = 357;
    result_16501239 = null;
    break BeforeRet;
    }
    
    F.line = 358;
    result_16501239 = HEX3Aanonymous_16501250;
  } while (false);
  framePtr = F.prev;

  return result_16501239;

}
function as_interface_16501160(comp_16501165, convert_16501167) {
    function HEX3Aanonymous_16501174() {
      var result_16501176 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1026;
        result_16501176 = comp_16501165.node();
      framePtr = F.prev;

      return result_16501176;

    }
    function HEX3Aanonymous_16501191(init_val_16501193, set_val_16501198, refresh_list_16501199) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1028;
        var val_16501200 = [init_val_16501193];
        F.line = 1029;
        comp_16501165.update(convert_16501167.get(val_16501200[0]), sub_16501227(convert_16501167, val_16501200, 0, set_val_16501198, null), walk_10245019(refresh_list_16501199, convert_16501167.id));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_16501332() {
      var result_16501338 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 1031;
        result_16501338 = as_interface_16501160(comp_16501165.clone(), convert_16501167);
      framePtr = F.prev;

      return result_16501338;

    }

  var result_16501169 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 1024;
    result_16501169 = {node: HEX3Aanonymous_16501174, update: HEX3Aanonymous_16501191, clone: HEX3Aanonymous_16501332};
  framePtr = F.prev;

  return result_16501169;

}
function mount_16491118(c_16491124, comp_16491126, convert_16491128) {
  var F={procname:"mount.mount",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((comp_16491126 == null)))) {
    F.line = 589;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(589, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 590;
    c_16491124.mount = as_interface_16501160(comp_16491126, convert_16491128);
  framePtr = F.prev;

  
}
function HEX7C_16480226(p1_16480233, p2_16480236) {
    function HEX3Aanonymous_16480240(x_16480242) {
      var result_16480243 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_16480243 = p2_16480236(p1_16480233(x_16480242));
      framePtr = F.prev;

      return result_16480243;

    }

  var result_16480239 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_16480239 = HEX3Aanonymous_16480240;
  framePtr = F.prev;

  return result_16480239;

}
function HEX3Aanonymous_15900894(node_15900897) {
    function HEX3Aanonymous_15900904(c_15900913) {
        function HEX3Aanonymous_15915001(arg0_15915003) {
          var result_15915009 = null;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 56;
            var arg1_15915010 = arg0_15915003.route;
            if ((arg1_15915010 == null)) {
            F.line = 56;
            arg1_15915010 = new_15915207();
            }
            
            F.line = 69;
            result_15915009 = arg1_15915010;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_15915009;

        }
        function HEX3Aanonymous_15915495(dataHEX60gensym15901850_15915498, dataHEX60gensym15901850_15915498_Idx, val3HEX60gensym15901851_15920007) {
            function HEX3Aanonymous_15925001(arg0_15925003, value_15925009) {
              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
                F.line = 56;
                var arg1_15925010 = arg0_15925003.route;
                if ((arg1_15925010 == null)) {
                F.line = 56;
                arg1_15925010 = new_15915207();
                }
                
                F.line = 122;
                arg1_15925010 = value_15925009;
                F.line = 134;
                arg0_15925003.route = arg1_15925010;
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
            F.line = 182;
            var val2HEX60gensym15901852_15920008 = access_15901680(c_15900913).get(dataHEX60gensym15901850_15915498[dataHEX60gensym15901850_15915498_Idx]);
            F.line = 183;
            var set2HEX60gensym15901853_15925224 = HEX3Aanonymous_15925001;
            F.line = 184;
            set2HEX60gensym15901853_15925224(val2HEX60gensym15901852_15920008, val3HEX60gensym15901851_15920007);
            F.line = 185;
            access_15901680(c_15900913).set(dataHEX60gensym15901850_15915498, dataHEX60gensym15901850_15915498_Idx, val2HEX60gensym15901852_15920008);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_16020502(ev_16020508) {
            function update_hash_16020509() {
              var F={procname:":anonymous.updateHash",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
                F.line = 59;
                ev_16020508.set(route_15890207(cstrToNimstr((window.location.hash))), [[]]);
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            if (ev_16020508.init) {
            window.addEventListener(("hashchange"), (update_hash_16020509));
            F.line = 61;
            update_hash_16020509();
            }
            
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_16130001(arg0_16130003) {
          var result_16130009 = null;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 64;
            var arg1_16130010 = arg0_16130003.route;
            if ((arg1_16130010 == null)) {
            F.line = 64;
            arg1_16130010 = new_15915207();
            }
            
            F.line = 69;
            result_16130009 = arg1_16130010;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_16130009;

        }
        function HEX3Aanonymous_16130239(dataHEX60gensym16115816_16130242, dataHEX60gensym16115816_16130242_Idx, val3HEX60gensym16115817_16135007) {
            function HEX3Aanonymous_16140001(arg0_16140003, value_16140009) {
              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
                F.line = 64;
                var arg1_16140010 = arg0_16140003.route;
                if ((arg1_16140010 == null)) {
                F.line = 64;
                arg1_16140010 = new_15915207();
                }
                
                F.line = 122;
                arg1_16140010 = value_16140009;
                F.line = 134;
                arg0_16140003.route = arg1_16140010;
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
            F.line = 182;
            var val2HEX60gensym16115818_16135008 = access_15901680(c_15900913).get(dataHEX60gensym16115816_16130242[dataHEX60gensym16115816_16130242_Idx]);
            F.line = 183;
            var set2HEX60gensym16115819_16140224 = HEX3Aanonymous_16140001;
            F.line = 184;
            set2HEX60gensym16115819_16140224(val2HEX60gensym16115818_16135008, val3HEX60gensym16115817_16135007);
            F.line = 185;
            access_15901680(c_15900913).set(dataHEX60gensym16115816_16130242, dataHEX60gensym16115816_16130242_Idx, val2HEX60gensym16115818_16135008);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_16155001(arg0_16155003) {
          var result_16155009 = null;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 64;
            var arg1_16155010 = nimCopy(null, arg0_16155003.hash, NTI112);
            F.line = 69;
            result_16155009 = nimCopy(null, arg1_16155010, NTI112);
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_16155009;

        }
        function HEX3Aanonymous_16155275(dataHEX60gensym16140265_16155278, dataHEX60gensym16140265_16155278_Idx, val3HEX60gensym16140266_16160007) {
            function HEX3Aanonymous_16165001(arg0_16165003, value_16165009) {
              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
                F.line = 64;
                var arg1_16165010 = nimCopy(null, arg0_16165003.hash, NTI112);
                F.line = 122;
                arg1_16165010 = nimCopy(null, value_16165009, NTI112);
                F.line = 134;
                arg0_16165003.hash = nimCopy(null, arg1_16165010, NTI112);
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
            F.line = 182;
            var val2HEX60gensym16140267_16160008 = ({get: HEX7C_15915436(access_15901680(c_15900913).get, HEX3Aanonymous_16130001), set: HEX3Aanonymous_16130239, id: HEX26_13760256(access_15901680(c_15900913).id, [makeNimstrLit("route")])}).get(dataHEX60gensym16140265_16155278[dataHEX60gensym16140265_16155278_Idx]);
            F.line = 183;
            var set2HEX60gensym16140268_16165214 = HEX3Aanonymous_16165001;
            F.line = 184;
            set2HEX60gensym16140268_16165214(val2HEX60gensym16140267_16160008, val3HEX60gensym16140266_16160007);
            F.line = 185;
            ({get: HEX7C_15915436(access_15901680(c_15900913).get, HEX3Aanonymous_16130001), set: HEX3Aanonymous_16130239, id: HEX26_13760256(access_15901680(c_15900913).id, [makeNimstrLit("route")])}).set(dataHEX60gensym16140265_16155278, dataHEX60gensym16140265_16155278_Idx, val2HEX60gensym16140267_16160008);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_16231232(app_16231486) {
            function HEX3Aanonymous_16245001(arg0_16245003) {
              var result_16245009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 68;
                var arg1_16245010 = nimCopy(null, arg0_16245003.groups, NTI13586042);
                F.line = 69;
                result_16245009 = nimCopy(null, arg1_16245010, NTI13586042);
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_16245009;

            }
            function HEX3Aanonymous_16245275(dataHEX60gensym16232800_16245278, dataHEX60gensym16232800_16245278_Idx, val3HEX60gensym16232801_16250007) {
                function HEX3Aanonymous_16255001(arg0_16255003, value_16255009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                  framePtr = F;
                    F.line = 68;
                    var arg1_16255010 = nimCopy(null, arg0_16255003.groups, NTI13586042);
                    F.line = 122;
                    arg1_16255010 = nimCopy(null, value_16255009, NTI13586042);
                    F.line = 134;
                    arg0_16255003.groups = nimCopy(null, arg1_16255010, NTI13586042);
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 182;
                var val2HEX60gensym16232802_16250008 = access_15901680(app_16231486).get(dataHEX60gensym16232800_16245278[dataHEX60gensym16232800_16245278_Idx]);
                F.line = 183;
                var set2HEX60gensym16232803_16255214 = HEX3Aanonymous_16255001;
                F.line = 184;
                set2HEX60gensym16232803_16255214(val2HEX60gensym16232802_16250008, val3HEX60gensym16232801_16250007);
                F.line = 185;
                access_15901680(app_16231486).set(dataHEX60gensym16232800_16245278, dataHEX60gensym16232800_16245278_Idx, val2HEX60gensym16232802_16250008);
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 68;
            mount_16256123(app_16231486, groups_component_13676195[0], ({get: HEX7C_16245216(access_15901680(app_16231486).get, HEX3Aanonymous_16245001), set: HEX3Aanonymous_16245275, id: HEX26_13760256(access_15901680(app_16231486).id, [makeNimstrLit("groups")])}));
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_16360441(app_16360695) {
            function HEX3Aanonymous_16361197(ev_16361203) {
                  function HEX3Aanonymous_16380001(arg0_16380003) {
                    var result_16380009 = null;

                    var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                    framePtr = F;
                    BeforeRet: do {
                      F.line = 78;
                      var arg1_16380010 = arg0_16380003.threads;
                      if ((arg1_16380010 == null)) {
                      F.line = 78;
                      arg1_16380010 = new_16380207();
                      }
                      
                      F.line = 69;
                      result_16380009 = arg1_16380010;
                      break BeforeRet;
                    } while (false);
                    framePtr = F.prev;

                    return result_16380009;

                  }
                  function HEX3Aanonymous_16380491(val3HEX60gensym16365008_16385007, pathsHEX60gensym16365009_16385034) {
                      function HEX3Aanonymous_16390001(arg0_16390003, value_16390009) {
                        var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                        framePtr = F;
                          F.line = 78;
                          var arg1_16390010 = arg0_16390003.threads;
                          if ((arg1_16390010 == null)) {
                          F.line = 78;
                          arg1_16390010 = new_16380207();
                          }
                          
                          F.line = 122;
                          arg1_16390010 = value_16390009;
                          F.line = 134;
                          arg0_16390003.threads = arg1_16390010;
                        framePtr = F.prev;

                        
                      }

                    var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
                    framePtr = F;
                      F.line = 193;
                      var val2HEX60gensym16365010_16385035 = ev_16361203.get();
                      F.line = 194;
                      var set2HEX60gensym16365011_16390224 = HEX3Aanonymous_16390001;
                      F.line = 195;
                      set2HEX60gensym16365011_16390224(val2HEX60gensym16365010_16385035, val3HEX60gensym16365008_16385007);
                      F.line = 196;
                      var paths2HEX60gensym16365012_16390226 = null;
                      L1: do {
                        F.line = 197;
                        var pHEX60gensym16365013_16390233 = null;
                        F.line = 184;
                        var i_16511842 = 0;
                        F.line = 185;
                        var l_16511843 = (pathsHEX60gensym16365009_16385034 != null ? pathsHEX60gensym16365009_16385034.length : 0);
                        L2: do {
                          F.line = 186;
                            L3: while (true) {
                            if (!(i_16511842 < l_16511843)) break L3;
                              F.line = 197;
                              pHEX60gensym16365013_16390233 = pathsHEX60gensym16365009_16385034[chckIndx(i_16511842, 0, (pathsHEX60gensym16365009_16385034 != null ? pathsHEX60gensym16365009_16385034.length : 0)+0-1)-0];
                              F.line = 198;
                              if (paths2HEX60gensym16365012_16390226 != null) { paths2HEX60gensym16365012_16390226.push(HEX26_13760256([makeNimstrLit("threads")], pHEX60gensym16365013_16390233)); } else { paths2HEX60gensym16365012_16390226 = [HEX26_13760256([makeNimstrLit("threads")], pHEX60gensym16365013_16390233)]; };
                              F.line = 188;
                              i_16511842 = addInt(i_16511842, 1);
                              if (!(((pathsHEX60gensym16365009_16385034 != null ? pathsHEX60gensym16365009_16385034.length : 0) == l_16511843))) {
                              F.line = 189;
                              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                              }
                              
                            }
                        } while(false);
                      } while(false);
                      F.line = 199;
                      ev_16361203.set(val2HEX60gensym16365010_16385035, paths2HEX60gensym16365012_16390226);
                    framePtr = F.prev;

                    
                  }
                  function HEX3Aanonymous_16405001(arg0_16405003) {
                    var result_16405009 = null;

                    var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                    framePtr = F;
                    BeforeRet: do {
                      F.line = 78;
                      var arg1_16405010 = nimCopy(null, arg0_16405003.group, NTI112);
                      F.line = 69;
                      result_16405009 = nimCopy(null, arg1_16405010, NTI112);
                      break BeforeRet;
                    } while (false);
                    framePtr = F.prev;

                    return result_16405009;

                  }
                  function HEX3Aanonymous_16405226(val3HEX60gensym16390294_16410007, pathsHEX60gensym16390295_16410034) {
                      function HEX3Aanonymous_16415001(arg0_16415003, value_16415009) {
                        var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                        framePtr = F;
                          F.line = 78;
                          var arg1_16415010 = nimCopy(null, arg0_16415003.group, NTI112);
                          F.line = 122;
                          arg1_16415010 = nimCopy(null, value_16415009, NTI112);
                          F.line = 134;
                          arg0_16415003.group = nimCopy(null, arg1_16415010, NTI112);
                        framePtr = F.prev;

                        
                      }

                    var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
                    framePtr = F;
                      F.line = 193;
                      var val2HEX60gensym16390296_16410035 = ({get: HEX7C_16380451(ev_16361203.get, HEX3Aanonymous_16380001), set: HEX3Aanonymous_16380491, m_type: NTI14455014}).get();
                      F.line = 194;
                      var set2HEX60gensym16390297_16415214 = HEX3Aanonymous_16415001;
                      F.line = 195;
                      set2HEX60gensym16390297_16415214(val2HEX60gensym16390296_16410035, val3HEX60gensym16390294_16410007);
                      F.line = 196;
                      var paths2HEX60gensym16390298_16415216 = null;
                      L1: do {
                        F.line = 197;
                        var pHEX60gensym16390299_16415223 = null;
                        F.line = 184;
                        var i_16511849 = 0;
                        F.line = 185;
                        var l_16511850 = (pathsHEX60gensym16390295_16410034 != null ? pathsHEX60gensym16390295_16410034.length : 0);
                        L2: do {
                          F.line = 186;
                            L3: while (true) {
                            if (!(i_16511849 < l_16511850)) break L3;
                              F.line = 197;
                              pHEX60gensym16390299_16415223 = pathsHEX60gensym16390295_16410034[chckIndx(i_16511849, 0, (pathsHEX60gensym16390295_16410034 != null ? pathsHEX60gensym16390295_16410034.length : 0)+0-1)-0];
                              F.line = 198;
                              if (paths2HEX60gensym16390298_16415216 != null) { paths2HEX60gensym16390298_16415216.push(HEX26_13760256([makeNimstrLit("group")], pHEX60gensym16390299_16415223)); } else { paths2HEX60gensym16390298_16415216 = [HEX26_13760256([makeNimstrLit("group")], pHEX60gensym16390299_16415223)]; };
                              F.line = 188;
                              i_16511849 = addInt(i_16511849, 1);
                              if (!(((pathsHEX60gensym16390295_16410034 != null ? pathsHEX60gensym16390295_16410034.length : 0) == l_16511850))) {
                              F.line = 189;
                              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                              }
                              
                            }
                        } while(false);
                      } while(false);
                      F.line = 199;
                      ({get: HEX7C_16380451(ev_16361203.get, HEX3Aanonymous_16380001), set: HEX3Aanonymous_16380491, m_type: NTI14455014}).set(val2HEX60gensym16390296_16410035, paths2HEX60gensym16390298_16415216);
                    framePtr = F.prev;

                    
                  }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
                if (!((ev_16361203.data.route.route == 1))) {
                F.line = 74;
                ev_16361203.skip = true;
                F.line = 75;
                ev_16361203.node.classList.add("hidden");
                }
                else {
                  F.line = 77;
                  ev_16361203.skip = false;
                  F.line = 78;
                  ({get: HEX7C_14470216(({get: HEX7C_16380451(ev_16361203.get, HEX3Aanonymous_16380001), set: HEX3Aanonymous_16380491, m_type: NTI14455014}).get, HEX3Aanonymous_16405001), set: HEX3Aanonymous_16405226, m_type: NTI13760634}).set(ev_16361203.data.route.group_name, [[]]);
                  F.line = 79;
                  ev_16361203.node.classList.remove("hidden");
                }
                
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_16480001(arg0_16480003) {
              var result_16480009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 80;
                var arg1_16480010 = arg0_16480003.threads;
                if ((arg1_16480010 == null)) {
                F.line = 80;
                arg1_16480010 = new_16380207();
                }
                
                F.line = 69;
                result_16480009 = arg1_16480010;
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_16480009;

            }
            function HEX3Aanonymous_16480270(dataHEX60gensym16466365_16480273, dataHEX60gensym16466365_16480273_Idx, val3HEX60gensym16466366_16485007) {
                function HEX3Aanonymous_16490001(arg0_16490003, value_16490009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                  framePtr = F;
                    F.line = 80;
                    var arg1_16490010 = arg0_16490003.threads;
                    if ((arg1_16490010 == null)) {
                    F.line = 80;
                    arg1_16490010 = new_16380207();
                    }
                    
                    F.line = 122;
                    arg1_16490010 = value_16490009;
                    F.line = 134;
                    arg0_16490003.threads = arg1_16490010;
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 182;
                var val2HEX60gensym16466367_16485008 = access_15901680(app_16360695).get(dataHEX60gensym16466365_16480273[dataHEX60gensym16466365_16480273_Idx]);
                F.line = 183;
                var set2HEX60gensym16466368_16490224 = HEX3Aanonymous_16490001;
                F.line = 184;
                set2HEX60gensym16466368_16490224(val2HEX60gensym16466367_16485008, val3HEX60gensym16466366_16485007);
                F.line = 185;
                access_15901680(app_16360695).set(dataHEX60gensym16466365_16480273, dataHEX60gensym16466365_16480273_Idx, val2HEX60gensym16466367_16485008);
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 72;
            refresh_before_16415340(app_16360695, update_set_10240015([data_path_10240107([makeNimstrLit("route")])]), HEX3Aanonymous_16361197);
            F.line = 80;
            mount_16491118(app_16360695, threads_component_14451058[0], ({get: HEX7C_16480226(access_15901680(app_16360695).get, HEX3Aanonymous_16480001), set: HEX3Aanonymous_16480270, id: HEX26_13760256(access_15901680(app_16360695).id, [makeNimstrLit("threads")])}));
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
      framePtr = F;
        F.line = 56;
        refresh_16065538(match_15927517(c_15900913, ({get: HEX7C_15915436(access_15901680(c_15900913).get, HEX3Aanonymous_15915001), set: HEX3Aanonymous_15915495, id: HEX26_13760256(access_15901680(c_15900913).id, [makeNimstrLit("route")])}), null), HEX3Aanonymous_16020502, false, false, refresh_all_10270524);
        F.line = 64;
        refresh_16230930(match_16167466(c_15900913, makeNimstrLit(".hash"), ({get: HEX7C_16155216(({get: HEX7C_15915436(access_15901680(c_15900913).get, HEX3Aanonymous_16130001), set: HEX3Aanonymous_16130239, id: HEX26_13760256(access_15901680(c_15900913).id, [makeNimstrLit("route")])}).get, HEX3Aanonymous_16155001), set: HEX3Aanonymous_16155275, id: HEX26_13760256(({get: HEX7C_15915436(access_15901680(c_15900913).get, HEX3Aanonymous_16130001), set: HEX3Aanonymous_16130239, id: HEX26_13760256(access_15901680(c_15900913).id, [makeNimstrLit("route")])}).id, [makeNimstrLit("hash")])}), null), set_text_13685072(), false, false);
        match_16269559(c_15900913, makeNimstrLit(".groups"), HEX3Aanonymous_16231232);
        match_16269559(c_15900913, makeNimstrLit(".threads"), HEX3Aanonymous_16360441);
      framePtr = F.prev;

      
    }

  var result_15900902 = null;

  var F={procname:"app.:anonymous",prev:framePtr,filename:"app.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 53;
    result_15900902 = compile_16504935(node_15900897, HEX3Aanonymous_15900904, null);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_15900902;

}
var app_15900501 = [null];
declare_16511356(components_10273124[0], app_15900501, 0, fetch_template_13555001(makeNimstrLit("views/app.html"), makeNimstrLit("template"), true), HEX3Aanonymous_15900894);
function map_10280058(s_10280063, op_10280066) {
  var result_10280068 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_10280068 = new Array(chckRange((s_10280063 != null ? s_10280063.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_10280063 != null ? s_10280063.length : 0), 0, 2147483647);++i) {result_10280068[i]=null;}    L1: do {
      F.line = 375;
      var i_10280091 = 0;
      F.line = 104;
      var colontmp__16517417 = 0;
      F.line = 375;
      colontmp__16517417 = (s_10280063 != null ? s_10280063.length : 0);
      F.line = 106;
      var i_16517418 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_16517418 < colontmp__16517417)) break L3;
            F.line = 375;
            i_10280091 = i_16517418;
            F.line = 376;
            result_10280068[chckIndx(i_10280091, 0, (result_10280068 != null ? result_10280068.length : 0)+0-1)-0] = op_10280066(s_10280063[chckIndx(i_10280091, 0, (s_10280063 != null ? s_10280063.length : 0)+0-1)-0]);
            F.line = 109;
            i_16517418 = addInt(i_16517418, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10280068;

}
async function init_10280001(registry_10280003) {
    function HEX3Aanonymous_10280020(p_10280022) {
      var result_10280027 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 39;
        result_10280027 = p_10280022();
      framePtr = F.prev;

      return result_10280027;

    }

  var result_10280008 = null;

  var F={procname:"registry.init",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 39;
    (await (Promise.all((map_10280058(registry_10280003.Field0, HEX3Aanonymous_10280020)))));
    F.line = 131;
    result_10280008 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10280008;

}
function update_16516448(t_16516452, init_val_16516453, set_val_16516455, refresh_list_16516456) {
function set_16516460(new_val_16516462, changed_path_16516464) {
  var F={procname:"update.set",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 958;
    t_16516452.data = new_val_16516462;
    if (!((set_val_16516455 == null))) {
    F.line = 960;
    set_val_16516455(new_val_16516462, changed_path_16516464);
    }
    else {
      F.line = 962;
    upd_16516457({paths: nimCopy(null, changed_path_16516464, NTI16516463)});
    }
    
  framePtr = F.prev;

  
}
    function upd_16516457(refresh_list_16516459) {
      var F={procname:"update.upd",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        L1: do {
          F.line = 965;
          var match_16516492 = null;
          F.line = 184;
          var i_16517422 = 0;
          F.line = 185;
          var l_16517423 = (t_16516452.cmatches != null ? t_16516452.cmatches.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_16517422 < l_16517423)) break L3;
                F.line = 965;
                match_16516492 = t_16516452.cmatches[chckIndx(i_16517422, 0, (t_16516452.cmatches != null ? t_16516452.cmatches.length : 0)+0-1)-0];
                F.line = 966;
                update_16306550(match_16516492, t_16516452.data, set_16516460, refresh_list_16516459);
                F.line = 188;
                i_16517422 = addInt(i_16517422, 1);
                if (!(((t_16516452.cmatches != null ? t_16516452.cmatches.length : 0) == l_16517423))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.6/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 954;
    t_16516452.data = init_val_16516453;
    F.line = 968;
    upd_16516457(refresh_list_16516456);
  framePtr = F.prev;

  
}
function attach_16515769(t_16515773, target_16515774, anchor_16515775, data_16515776, set_16515778) {
  var F={procname:"attach.attach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 974;
    update_16516448(t_16515773, data_16515776, set_16515778, refresh_all_10270524);
    F.line = 975;
    target_16515774.insertBefore(t_16515773.node, anchor_16515775);
  framePtr = F.prev;

  
}
function clone_16515380(comp_16515384) {
    var Tmp1;

  var result_16515386 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 949;
    var Tmp1 = comp_16515384.convert;
    if (ConstSet997[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
    result_16515386 = compile_16504935(comp_16515384.original_node, comp_16515384.config, Tmp1.eql);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16515386;

}
async function main_16515001() {
  var result_16515007 = null;

  var F={procname:"newsweb.main",prev:framePtr,filename:"newsweb.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 11;
    (await init_10280001(components_10273124[0]));
    F.line = 12;
    attach_16515769(clone_16515380(app_15900501[0]), document.body, null, {route: null, groups: null, threads: null}, null);
    F.line = 131;
    result_16515007 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_16515007;

}
main_16515001();
